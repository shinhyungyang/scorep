 * 
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2013,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2013,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license.  See the COPYING file in the package base
 * directory for details.
 *


                         Score-P INSTALL GUIDE
                         =====================

This file describes how to configure, compile, and install the Score-P
measurement infrastructure.  If you are not familiar with using the
configure scripts generated by GNU autoconf, read the "Generic
Installation Instructions" section below; then return here.


Quick start
===========

In a nutshell, configuring, building, and installing Score-P can be as
simple as executing the shell commands

    ./configure --prefix=<installdir>
    make
    make install

If you don't specify --prefix, /opt/scorep will be used. 

Depending on your system configuration and specific needs, the build
process can be customized as described below.

Note Score-P requires a case sensitive file system to build correctly.


Configuration
=============

The configure script in this package tries to automatically determine
the platform for which Score-P will be compiled in order to provide
reasonable defaults for backend (i.e., compute-node) compilers,
MPI compilers, and, in case of cross-compiling environments, frontend
(i.e., login-node) compilers.

Depending on the environment it is possible to override the platform
defaults by using the following configure options:

  --with-machine-name=<default machine name>
               The default machine name used in profile and trace
               output. We suggest using a unique name, e.g., the
               fully qualified domain name. If not set, a name
               based on the detected platform is used. Can be
               overridden at measurement time by setting the
               environment variable SCOREP_MACHINE_NAME.

In non-cross-compiling environments, the compiler suite used to build
the backend parts can be specified explicitly if desired. On Linux
clusters it is currently recommended to use this option to select a
compiler suite other than GCC.

  --with-nocross-compiler-suite=(gcc|ibm|intel|pgi|studio)
               The compiler suite used to build this package in
               non-cross-compiling environments. Needs to be in $PATH.
               [Default: gcc]

In cross-compiling environments, the compiler suite used to build the
frontend parts can be specified explicitly if desired.

  --with-frontend-compiler-suite=(gcc|ibm|intel|pgi|studio)
               The compiler suite used to build the frontend parts of
               this package in cross-compiling environments.  Needs to
               be in $PATH.  
               [Default: gcc]

The MPI compiler, if in $PATH, is usually autodetected. If there are
several MPI compilers in $PATH the user is requested to select one
using the configure option:

  --with-mpi=(bullxmpi|hp|ibmpoe|intel|intel2|intelpoe|lam|mpibull2| \
              mpich|mpich2|mpich3|openmpi|platform|scali|sgimpt|sun)
               The MPI compiler suite to build this package in non
               cross-compiling mode. Usually autodetected. Needs to be
               in $PATH.

Note that there is currently no consistency check if backend and MPI
compiler are from the same vendor. If they are not, linking problems
(undefined references) might occur.

If a particular system requires to use compilers different to those
Score-P currently supports, please edit the three files
vendor/common/build-config/platforms/platform-*-user-provided to your
needs and use the following configure option:

  --with-custom-compilers
               Customize compiler settings by 1. copying the three
               files
               <srcdir>/vendor/common/build-config/platforms/platform-*-user-provided
               to the directory where you run configure <builddir>,
               2. editing those files to your needs, and 3. running
               configure. Alternatively, edit the files under <srcdir>
               directly. Files in <builddir> take precedence. You are
               entering unsupported terrain.  Namaste, and good luck!

On cross-compile systems the default frontend compiler is IBM XL for
the Blue Gene series and GCC on all other platforms.  The backend
compilers will either be automatically selected by the platform
detection (IBM Blue Gene series) or by the currently loaded
environment modules (Cray XT series). If you want to customize these
settings please use the configure option '--with-custom-compilers' as
described above.

Although this package comes with recent versions of the OTF2 and CUBE4
writer libraries as well as the OPARI2 instrumenter included, it is
possible to use existing installations instead. Here, the --without
option means 'without external installation', i.e., the component
provided with the tarball will be used:

  --with-otf2[=<otf2-bindir>]
               Use an already installed and compatible OTF2 library
               (v1.2 or newer). Provide path to otf2-config. 
               Auto-detected if already in $PATH.
  --with-cube[=<cube-bindir>] 
               Use an already installed and compatible CUBE4 library
               (v4.2 or newer). Provide path to cube-config.
               Auto-detected if already in $PATH.
  --with-opari2[=<opari2-bindir>]
               Use an already installed and compatible OPARI2 (v.1.1
               or newer). Provide path to opari2-config.
               Auto-detected if already in $PATH.

Options to further specify which features and external packages should
be used to build Score-P are as follows:

  --enable-debug          activate internal debug output [no]
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-backend-test-runs
               Run tests at make check [no]. If disabled, tests are
               still build at make check. Additionally, scripts
               (scorep_*tests.sh) containing the tests are generated
               in <builddir>/build-backend.
  --enable-cuda
               Enable or disable support for CUDA. Fail if support
               can't be satisfied but was requested.
  --enable-timer-bgl_rts_get_timebase
               enable bgl_rts_get_timebase timer if available instead
               of platform default
  --enable-timer-bgq_mftb 
               enable bgq_mftb timer if available instead of platform
               default
  --enable-timer-bgp_get_timebase
               enable bgp_get_timebase timer if available instead of
               platform default
  --enable-timer-clock_gettime
               enable clock_gettime timer if available
               [Default on Linux platforms]
  --enable-timer-cycle_counter_tsc
               enable cycle_counter_tsc timer if available instead of
               platform default
  --enable-timer-gettimeofday
               enable gettimeofday timer if available instead of
               platform default
  --enable-timer-ibm_realtime
               enable ibm_realtime timer if available instead of
               platform default
  --enable-timer-intel_mmtimer
               enable intel_mmtimer timer if available instead of
               platform default
  --enable-timer-papi_real_cyc
               enable papi_real_cyc timer if available instead of
               platform default
  --enable-timer-papi_real_usec
               enable papi_real_usec timer if available instead of
               platform default
  --with-pdt=<path-to-binaries>
               Specifies the path to the program database toolkit
               (PDT) binaries, e.g., cparse.
  --with-extra-instrumentation-flags=flags
               Add additional instrumentation flags.
  --with-sionconfig[=<path-to-sionconfig>]
               Whether to use sionconfig and where to find it. "yes"
               assumes it is in PATH [no].
  --with-papi-header=<path-to-papi.h>
               If papi.h is not installed in the default location,
               specify the dirname where it can be found.
  --with-papi-lib=<path-to-libpapi.*>
               If libpapi.* is not installed in the default location,
               specify the dirname where it can be found.
  --with-libcudart=<Path to libcudart installation>
               If you want to build scorep with libcudart but do not
               have a libcudart in a standard location then you need
               to explicitly specify the directory where it is
               installed. On non-cross-compile systems we search the
               system include and lib paths per default [yes], on
               cross-compile systems however,you have to specify a
               path [no]. --with-libcudart is a shorthand for
               --with-libcudart-include=<Path/include> and
               --with-libcudart-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the explicit
               include and lib options directly.
  --with-libcudart-include=<Path to libcudart headers>
  --with-libcudart-lib=<Path to libcudart libraries>
  --with-libcuda=<Path to libcuda installation>
               Usually not needed, specifying --with-libcudart should
               be fine!
               If you want to build scorep with libcuda but do not
               have a libcuda in a standard location then you need to
               explicitly specify the directory where it is
               installed. On non-cross-compile systems we search the
               system include and lib paths per default [yes], on
               cross-compile systems however,you have to specify a
               path [no]. --with-libcuda is a shorthand for
               --with-libcuda-include=<Path/include> and
               --with-libcuda-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the explicit
               include and lib options directly.
  --with-libcuda-include=<Path to libcuda headers>
  --with-libcuda-lib=<Path to libcuda libraries>
  --with-libbfd=<Path to libbfd installation>
               If you want to build scorep with libbfd but do not have
               a libbfd in a standard location then you need to
               explicitly specify the directory where it is
               installed. On non-cross-compile systems we search the
               system include and lib paths per default [yes], on
               cross-compile systems however,you have to specify a
               path [no]. --with-libbfd is a shorthand for
               --with-libbfd-include=<Path/include> and
               --with-libbfd-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the explicit
               include and lib options directly.
  --with-libbfd-include=<Path to libbfd headers>
  --with-libbfd-lib=<Path to libbfd libraries>

Instead of passing command-line options to the 'configure' script, the package
configuration can also be influenced by setting the following environment
variables:

  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  FC          Fortran compiler command
  FCFLAGS     Fortran compiler flags
  CC_FOR_BUILD
              C compiler command for the frontend build
  CXX_FOR_BUILD
              C++ compiler command for the frontend build
  F77_FOR_BUILD
              Fortran 77 compiler command for the frontend build
  FC_FOR_BUILD
              Fortran compiler command for the frontend build
  CPPFLAGS_FOR_BUILD
              (Objective) C/C++ preprocessor flags for the frontend build,
              e.g. -I<include dir> if you have headers in a nonstandard
              directory <include dir>
  CFLAGS_FOR_BUILD
              C compiler flags for the frontend build
  CXXFLAGS_FOR_BUILD
              C++ compiler flags for the frontend build
  FFLAGS_FOR_BUILD
              Fortran 77 compiler flags for the frontend build
  FCFLAGS_FOR_BUILD
              Fortran compiler flags for the frontend build
  LDFLAGS_FOR_BUILD
              linker flags for the frontend build, e.g. -L<lib dir> if you
              have libraries in a nonstandard directory <lib dir>
  LIBS_FOR_BUILD
              libraries to pass to the linker for the frontend build, e.g.
              -l<library>
  MPICC       MPI C compiler command
  MPICXX      MPI C++ compiler command
  MPIF77      MPI Fortran 77 compiler command
  MPIFC       MPI Fortran compiler command
  MPI_CPPFLAGS
              MPI (Objective) C/C++ preprocessor flags, e.g. -I<include dir>
              if you have headers in a nonstandard directory <include dir>
  MPI_CFLAGS  MPI C compiler flags
  MPI_CXXFLAGS
              MPI C++ compiler flags
  MPI_FFLAGS  MPI Fortran 77 compiler flags
  MPI_FCFLAGS MPI Fortran compiler flags
  MPI_LDFLAGS
              MPI linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  MPI_LIBS    MPI libraries to pass to the linker, e.g. -l<library>

  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  RUNTIME_MANAGEMENT_TIMINGS
              Whether to activate time measurements for Score-P's
              SCOREP_InitMeasurement() and scorep_finalize() functions.
              Activation values are '1', 'yes', and 'true'. For developer use.
  SIONCONFIG  Absolute path to sionconfig, including "sionconfig".
  PAPI_INC    Include path to the papi.h header.
  PAPI_LIB    Library path to the papi library.
  LIBCUDART_INCLUDE
              Path to libcudart headers.
  LIBCUDART_LIB
              Path to libcudart libraries.
  LIBCUDA_INCLUDE
              Path to libcuda headers.
  LIBCUDA_LIB Path to libcuda libraries.
  LIBBFD_INCLUDE
              Path to libbfd headers.
  LIBBFD_LIB  Path to libbfd libraries.

Building & Installing
=====================

Before building Score-P, carefully check whether the configuration summary
printed by the configure script matches your expectations (i.e., whether MPI
and/or OpenMP support is correctly enabled/disabled, external libraries are
used, etc). If everything is OK, Score-P can be built and installed using

        make
        make install

Note that parallel builds (i.e., using 'make -j <n>') are fully supported.




                     Generic Installation Instructions
                     =================================

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Basic Installation
==================

   Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following more-detailed
instructions are generic; see the section above for instructions
specific to this package.  Some packages provide this `INSTALL' file but
do not implement all of the features documented below.  The lack of an
optional feature in a given package is not necessarily a bug.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to support@score-p.org so they can be considered
for the next release.  If you are using the cache, and at some point
`config.cache' contains results you don't want to keep, you may remove
or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

   The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package, generally using the just-built uninstalled binaries.

  4. Type `make install' to install the programs and any data files and
     documentation.  When installing into a prefix owned by root, it is
     recommended that the package be configured and built as a regular
     user, and only the `make install' phase executed with root
     privileges.

  5. Optionally, type `make installcheck' to repeat any self-tests, but
     this time using the binaries in their final installed location.
     This target does not install anything.  Running this target as a
     regular user, particularly if the prior `make install' required
     root privileges, verifies that the installation completed
     correctly.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  7. Often, you can also type `make uninstall' to remove the installed
     files again.  In practice, not all packages have tested that
     uninstallation works correctly, even though it is required by the
     GNU Coding Standards.

  8. Some packages, particularly those that use Automake, provide `make
     distcheck', which can by used by developers to test that all other
     targets like `make install' and `make uninstall' work correctly.
     This target is generally not run by end users.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c99 CFLAGS=-g LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.  This
is known as a "VPATH" build.

   With a non-GNU `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

   On MacOS X 10.5 and later systems, you can create libraries and
executables that work on multiple system types--known as "fat" or
"universal" binaries--by specifying multiple `-arch' options to the
compiler but only a single `-arch' option to the preprocessor.  Like
this:

     ./configure CC="gcc -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CXX="g++ -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CPP="gcc -E" CXXCPP="g++ -E"

   This is not guaranteed to produce working output in all cases, you
may have to build one architecture at a time and combine the results
using the `lipo' tool if you have problems.

Installation Names
==================

   By default, `make install' installs the package's commands under
`/usr/local/bin', include files under `/usr/local/include', etc.  You
can specify an installation prefix other than `/usr/local' by giving
`configure' the option `--prefix=PREFIX', where PREFIX must be an
absolute file name.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option `--exec-prefix=PREFIX' to `configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.  In general, the
default for these options is expressed in terms of `${prefix}', so that
specifying just `--prefix' will affect all of the other directory
specifications that were not explicitly provided.

   The most portable way to affect installation locations is to pass the
correct locations to `configure'; however, many packages provide one or
both of the following shortcuts of passing variable assignments to the
`make install' command line to change installation locations without
having to reconfigure or recompile.

   The first method involves providing an override variable for each
affected directory.  For example, `make install
prefix=/alternate/directory' will choose an alternate location for all
directory configuration variables that were expressed in terms of
`${prefix}'.  Any directories that were specified during `configure',
but not in terms of `${prefix}', must each be overridden at install
time for the entire installation to be relocated.  The approach of
makefile variable overrides for each directory variable is required by
the GNU Coding Standards, and ideally causes no recompilation.
However, some platforms have known limitations with the semantics of
shared libraries that end up requiring recompilation when using this
method, particularly noticeable in packages that use GNU Libtool.

   The second method involves providing the `DESTDIR' variable.  For
example, `make install DESTDIR=/alternate/directory' will prepend
`/alternate/directory' before all installation names.  The approach of
`DESTDIR' overrides is not required by the GNU Coding Standards, and
does not work on platforms that have drive letters.  On the other hand,
it does better at avoiding recompilation issues, and works well even
when some directory options were not specified in terms of `${prefix}'
at `configure' time.

Optional Features
=================

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

   Some packages offer the ability to configure how verbose the
execution of `make' will be.  For these packages, running `./configure
--enable-silent-rules' sets the default to minimal output, which can be
overridden with `make V=1'; while running `./configure
--disable-silent-rules' sets the default to verbose, which can be
overridden with `make V=0'.

Particular systems
==================

   On HP-UX, the default C compiler is not ANSI C compatible.  If GNU
CC is not installed, it is recommended to use the following options in
order to use an ANSI C compiler:

     ./configure CC="cc -Ae -D_XOPEN_SOURCE=500"

and if that doesn't work, install pre-built binaries of GCC for HP-UX.

   On OSF/1 a.k.a. Tru64, some versions of the default C compiler cannot
parse its `<wchar.h>' header file.  The option `-nodtk' can be used as
a workaround.  If GNU CC is not installed, it is therefore recommended
to try

     ./configure CC="cc"

and if that doesn't work, try

     ./configure CC="cc -nodtk"

   On Solaris, don't put `/usr/ucb' early in your `PATH'.  This
directory contains several dysfunctional programs; working variants of
these programs are available in `/usr/bin'.  So, if you need `/usr/ucb'
in your `PATH', put it _after_ `/usr/bin'.

   On Haiku, software installed for all users goes in `/boot/common',
not `/usr/local'.  It is recommended to use the following options:

     ./configure --prefix=/boot/common

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS
     KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:

     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of all of the options to `configure', and exit.

`--help=short'
`--help=recursive'
     Print a summary of the options unique to this package's
     `configure', and exit.  The `short' variant lists options used
     only in the top level, while the `recursive' variant lists options
     also present in any nested packages.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--prefix=DIR'
     Use DIR as the installation prefix.  *note Installation Names::
     for more details, including other options available for fine-tuning
     the installation locations.

`--no-create'
`-n'
     Run the configure checks, but stop before creating any output
     files.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.

