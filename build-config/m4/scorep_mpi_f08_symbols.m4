##
## This file is part of the Score-P software (http://www.score-p.org)
##
## Copyright (c) 2025,
## Forschungszentrum Juelich GmbH, Germany
##
## This software may be modified and distributed under the terms of
## a BSD-style license. See the COPYING file in the package base
## directory for details.
##

##
## This file was generated by mpi_wrapgen2 from template m4/scorep_mpi_f08_symbols.m4.tmpl.
##


# SCOREP_MPI_F08_SYMBOLS()
# ------------------------
#
# Determine which MPI procedures are provided by the 'mpi_f08' module and
# their specific (linker) names.
#
# Outputs:
# - For each MPI procedure MPI_Xxx that is properly supported, AC_DEFINE
#   SCOREP_F08_SYMBOL_NAME_MPI_XXX with the value of specific symbol name.
# - For each MPI procedure MPI_Xxx that is properly supported, AC_DEFINE
#   HAVE_F08_TS_BUFFERS_MPI_XXX as '1' if the procedure uses the Fortran-TS29113
#   method to pass choice buffers via 'type(*), dimension(..)', else as '0'.
#
#
# These checks are necessary because:
# 1. Although the MPI standard specifies a naming scheme (Version 4.0, section
#    19.1.5), there are multiple possible standard conforming names for each
#    specific procedure.
# 2. Some MPI implementations do not conform fully to the standard and provide
#    other names.
#
# On point 1:
# <quote>
# Advice to users. Although for each support method and MPI routine (e.g.,
# MPI_ISEND in mpi_f08), multiple routines may need to be provided to intercept
# the specific procedures in the MPI library (e.g., MPI_Isend_f08 and
# MPI_Isend_f08ts), [...]
# </quote>
# Therefore, we need to check the MPI implementation for the actually provided
# name.
#
#
# On point 2:
# <quote>
# In Fortran, when using USE mpi_f08, for each MPI procedure that had at least
# one count or byte displacement parameter that used the INTEGER or
# INTEGER(KIND=MPI_ADDRESS_KIND) types prior to MPI-4.0, a polymorphic interface
# containing two specific procedures is provided. One of the specific procedures
# has the same name and dummy parameter types as in versions prior to MPI-4.0.
# INTEGER and/or INTEGER(KIND=MPI_ADDRESS_KIND) for count and byte displacement
# parameters. The other specific procedure has the same name followed by “_c”,
# and then suffixed by the token specified in Table 19.1 for USE mpi_f08. [...]
# </quote>
#
# MPICH (4.0) uses the non-conforming names 'mpi_xxx_f08_large' or
# 'mpi_xxx_f08ts_large' instead.
#
AC_DEFUN([SCOREP_MPI_F08_SYMBOLS], [
AC_REQUIRE([AC_PROG_GREP])
AC_REQUIRE([AC_PROG_SED])
AC_LANG_PUSH([Fortran])
# For each MPI procedure in the standard, get the specific name of the procedure
# in the mpi_f08 module. This is done as follows:
# 1. Compile a small test program that calls the MPI procedure by its binding
#    name.
# 2. Extract the specific name from the output of nm on the object file
#    -  Remove possible prefixes: Procedures in modules might get a prefix
#       (e.g. module_name_MOD_function_name for gfortran).
#    -  Remove possible trailing underscores. This is necessary because of name
#       mangling: Fortran compilers possibly decorate object names by one or two
#       trailing underscores.
#    -  Check whether we found exactly one symbol.
#    -  Check whether the found symbol is not the same as the previous symbol:
#       The MPI implementation may define MPI_COUNT_KIND == MPI_ADDRESS_KIND ==
#       MPI_OFFSET_KIND.
#       In this case---and when the signatures of the normal and large count
#       procedure only differ in arguments of these kinds---the compile check
#       cannot differentiate between the procedures.
#       Because a large count procedure is always immediately checked after the
#       corresponding normal procedure, it is enough to ensure that the current symbol
#       differs from the previous symbol.
#       From a practical standpoint, if the compile checks cannot find a
#       large count procedure, then the user also cannot call it and we don't
#       need to wrap it.
#     - Some MPIs do not provide Fortran symbols for all PMPI_ procedures.
#       In all cases where we observed this bug in some MPI, an additional
#       AC_LINK_IFELSE check for the PMPI symbol is performed.
#     - Determine the method to pass choice buffers from the symbol name. We
#       assume that routines with the '_f08ts' suffix use the Fortran-TS29113
#       method. Work around known deviations by additional AC_COMPILE_IFELSE
#       checks.
# 3. If the program compiled without errors and the name extraction worked,
#    define a preprocessor macro that holds the specific name.
mpi_f08_previous_symbol=""
m4_foreach([SYM], [_MPI_F08_SYMBOLS],
    [AC_MSG_CHECKING([for F08 name of MPI_]SYM)
     AC_COMPILE_IFELSE(AC_LANG_SOURCE(_MPI_F08_[]SYM),
        [sym_no_suffix="$(echo SYM | $SED 's/_C$//i')"
         mpi_f08_symbol="$($NM -u conftest.$ac_objext | $SED -n -e 's/.* U \w*\(MPI_'"$sym_no_suffix"'\w*\)$/\1/i p' | $SED -e 's/__\?$//')"
         line_count="$(echo "$mpi_f08_symbol" | $GREP --count '')"
         AS_IF([test "x$mpi_f08_symbol" != x -a "x$line_count" = x1],
            [AS_IF([test "x$mpi_f08_previous_symbol" != "x$mpi_f08_symbol"],
                [mpi_f08_previous_symbol="$mpi_f08_symbol"
                 linkcheck_pass="yes"
                 m4_ifdef(_MPI_F08_LINKCHECK_[]SYM,
                    [AC_LINK_IFELSE(AC_LANG_SOURCE(_MPI_F08_LINKCHECK_[]SYM),
                        [linkcheck_pass="yes"],
                        [linkcheck_pass="no"])])
                 AS_IF([test "x$linkcheck_pass" = "xyes"],
                    [AC_DEFINE_UNQUOTED(SCOREP_F08_SYMBOL_NAME_MPI_[]SYM, [$mpi_f08_symbol], [The specific procedure name for MPI_]SYM)
                     choice_buffers_with_ts="$(echo "$mpi_f08_symbol" | $GREP -i '_f08ts')"
                     AS_IF([test "x$scorep_fortran_ts_buffers" = "xyes"],
                        [m4_ifdef(_MPI_F08_TSBUFFERS_CHECK_[]SYM,
                            [AC_COMPILE_IFELSE(AC_LANG_SOURCE(_MPI_F08_TSBUFFERS_CHECK_[]SYM),
                                [choice_buffers_with_ts="yes"])])])
                     AS_IF([test "x$choice_buffers_with_ts" != x],
                        [AS_IF([test "x$scorep_fortran_ts_buffers" = "xyes"],
                            [AC_DEFINE_UNQUOTED(HAVE_F08_TS_BUFFERS_MPI_[]SYM, [1], [Choice buffers are implemented with TS 29113 'type(*), dimension(..)' for MPI_]SYM)],
                            [AC_MSG_ERROR([Compiler/MPI mismatch: Got an _f08ts symbol in the MPI library, but the compiler does not support the 'type(*), dimension(..)' feature of TS 29113])])],
                        [AC_DEFINE_UNQUOTED(HAVE_F08_TS_BUFFERS_MPI_[]SYM, [0], [Choice buffers are implemented with non-standard extension' for MPI_]SYM)])
                     AC_MSG_RESULT([$mpi_f08_symbol])],
                    [AC_MSG_RESULT([no. PMPI symbol not provided in the MPI library])])],
                [AC_MSG_RESULT([no, large count symbol is the same as the normal symbol])])],
            [AC_MSG_RESULT([no, could not extract the procedure name, got "$mpi_f08_symbol"])])],
        [AC_MSG_RESULT([no])])
        ])

AC_LANG_POP([Fortran])
AS_UNSET([mpi_f08_previous_symbol])
AS_UNSET([sym_no_suffix])
AS_UNSET([mpi_f08_symbol])
AS_UNSET([line_count])
AS_UNSET([linkcheck_pass])
AS_UNSET([choice_buffers_with_ts])
])dnl SCOREP_MPI_F08_SYMBOLS

m4_define([_MPI_F08_SYMBOLS],
    [ABORT,
    ACCUMULATE,
    ACCUMULATE_C,
    ADD_ERROR_CLASS,
    ADD_ERROR_CODE,
    ADD_ERROR_STRING,
    ALLGATHER,
    ALLGATHER_C,
    ALLGATHER_INIT,
    ALLGATHER_INIT_C,
    ALLGATHERV,
    ALLGATHERV_C,
    ALLGATHERV_INIT,
    ALLGATHERV_INIT_C,
    ALLOC_MEM,
    ALLREDUCE,
    ALLREDUCE_C,
    ALLREDUCE_INIT,
    ALLREDUCE_INIT_C,
    ALLTOALL,
    ALLTOALL_C,
    ALLTOALL_INIT,
    ALLTOALL_INIT_C,
    ALLTOALLV,
    ALLTOALLV_C,
    ALLTOALLV_INIT,
    ALLTOALLV_INIT_C,
    ALLTOALLW,
    ALLTOALLW_C,
    ALLTOALLW_INIT,
    ALLTOALLW_INIT_C,
    BARRIER,
    BARRIER_INIT,
    BCAST,
    BCAST_C,
    BCAST_INIT,
    BCAST_INIT_C,
    BSEND,
    BSEND_C,
    BSEND_INIT,
    BSEND_INIT_C,
    BUFFER_ATTACH,
    BUFFER_ATTACH_C,
    BUFFER_DETACH,
    BUFFER_DETACH_C,
    CANCEL,
    CART_COORDS,
    CART_CREATE,
    CART_GET,
    CART_MAP,
    CART_RANK,
    CART_SHIFT,
    CART_SUB,
    CARTDIM_GET,
    CLOSE_PORT,
    COMM_ACCEPT,
    COMM_CALL_ERRHANDLER,
    COMM_COMPARE,
    COMM_CONNECT,
    COMM_CREATE,
    COMM_CREATE_ERRHANDLER,
    COMM_CREATE_FROM_GROUP,
    COMM_CREATE_GROUP,
    COMM_CREATE_KEYVAL,
    COMM_DELETE_ATTR,
    COMM_DISCONNECT,
    COMM_DUP,
    COMM_DUP_WITH_INFO,
    COMM_FREE,
    COMM_FREE_KEYVAL,
    COMM_GET_ATTR,
    COMM_GET_ERRHANDLER,
    COMM_GET_INFO,
    COMM_GET_NAME,
    COMM_GET_PARENT,
    COMM_GROUP,
    COMM_IDUP,
    COMM_IDUP_WITH_INFO,
    COMM_JOIN,
    COMM_RANK,
    COMM_REMOTE_GROUP,
    COMM_REMOTE_SIZE,
    COMM_SET_ATTR,
    COMM_SET_ERRHANDLER,
    COMM_SET_INFO,
    COMM_SET_NAME,
    COMM_SIZE,
    COMM_SPAWN,
    COMM_SPAWN_MULTIPLE,
    COMM_SPLIT,
    COMM_SPLIT_TYPE,
    COMM_TEST_INTER,
    COMPARE_AND_SWAP,
    DIMS_CREATE,
    DIST_GRAPH_CREATE,
    DIST_GRAPH_CREATE_ADJACENT,
    DIST_GRAPH_NEIGHBORS,
    DIST_GRAPH_NEIGHBORS_COUNT,
    ERRHANDLER_FREE,
    ERROR_CLASS,
    ERROR_STRING,
    EXSCAN,
    EXSCAN_C,
    EXSCAN_INIT,
    EXSCAN_INIT_C,
    FETCH_AND_OP,
    FILE_CALL_ERRHANDLER,
    FILE_CLOSE,
    FILE_CREATE_ERRHANDLER,
    FILE_DELETE,
    FILE_GET_AMODE,
    FILE_GET_ATOMICITY,
    FILE_GET_BYTE_OFFSET,
    FILE_GET_ERRHANDLER,
    FILE_GET_GROUP,
    FILE_GET_INFO,
    FILE_GET_POSITION,
    FILE_GET_POSITION_SHARED,
    FILE_GET_SIZE,
    FILE_GET_TYPE_EXTENT,
    FILE_GET_TYPE_EXTENT_C,
    FILE_GET_VIEW,
    FILE_IREAD,
    FILE_IREAD_C,
    FILE_IREAD_ALL,
    FILE_IREAD_ALL_C,
    FILE_IREAD_AT,
    FILE_IREAD_AT_C,
    FILE_IREAD_AT_ALL,
    FILE_IREAD_AT_ALL_C,
    FILE_IREAD_SHARED,
    FILE_IREAD_SHARED_C,
    FILE_IWRITE,
    FILE_IWRITE_C,
    FILE_IWRITE_ALL,
    FILE_IWRITE_ALL_C,
    FILE_IWRITE_AT,
    FILE_IWRITE_AT_C,
    FILE_IWRITE_AT_ALL,
    FILE_IWRITE_AT_ALL_C,
    FILE_IWRITE_SHARED,
    FILE_IWRITE_SHARED_C,
    FILE_OPEN,
    FILE_PREALLOCATE,
    FILE_READ,
    FILE_READ_C,
    FILE_READ_ALL,
    FILE_READ_ALL_C,
    FILE_READ_ALL_BEGIN,
    FILE_READ_ALL_BEGIN_C,
    FILE_READ_ALL_END,
    FILE_READ_AT,
    FILE_READ_AT_C,
    FILE_READ_AT_ALL,
    FILE_READ_AT_ALL_C,
    FILE_READ_AT_ALL_BEGIN,
    FILE_READ_AT_ALL_BEGIN_C,
    FILE_READ_AT_ALL_END,
    FILE_READ_ORDERED,
    FILE_READ_ORDERED_C,
    FILE_READ_ORDERED_BEGIN,
    FILE_READ_ORDERED_BEGIN_C,
    FILE_READ_ORDERED_END,
    FILE_READ_SHARED,
    FILE_READ_SHARED_C,
    FILE_SEEK,
    FILE_SEEK_SHARED,
    FILE_SET_ATOMICITY,
    FILE_SET_ERRHANDLER,
    FILE_SET_INFO,
    FILE_SET_SIZE,
    FILE_SET_VIEW,
    FILE_SYNC,
    FILE_WRITE,
    FILE_WRITE_C,
    FILE_WRITE_ALL,
    FILE_WRITE_ALL_C,
    FILE_WRITE_ALL_BEGIN,
    FILE_WRITE_ALL_BEGIN_C,
    FILE_WRITE_ALL_END,
    FILE_WRITE_AT,
    FILE_WRITE_AT_C,
    FILE_WRITE_AT_ALL,
    FILE_WRITE_AT_ALL_C,
    FILE_WRITE_AT_ALL_BEGIN,
    FILE_WRITE_AT_ALL_BEGIN_C,
    FILE_WRITE_AT_ALL_END,
    FILE_WRITE_ORDERED,
    FILE_WRITE_ORDERED_C,
    FILE_WRITE_ORDERED_BEGIN,
    FILE_WRITE_ORDERED_BEGIN_C,
    FILE_WRITE_ORDERED_END,
    FILE_WRITE_SHARED,
    FILE_WRITE_SHARED_C,
    FINALIZE,
    FINALIZED,
    FREE_MEM,
    GATHER,
    GATHER_C,
    GATHER_INIT,
    GATHER_INIT_C,
    GATHERV,
    GATHERV_C,
    GATHERV_INIT,
    GATHERV_INIT_C,
    GET,
    GET_C,
    GET_ACCUMULATE,
    GET_ACCUMULATE_C,
    GET_ADDRESS,
    GET_COUNT,
    GET_COUNT_C,
    GET_ELEMENTS,
    GET_ELEMENTS_C,
    GET_ELEMENTS_X,
    GET_LIBRARY_VERSION,
    GET_PROCESSOR_NAME,
    GET_VERSION,
    GRAPH_CREATE,
    GRAPH_GET,
    GRAPH_MAP,
    GRAPH_NEIGHBORS,
    GRAPH_NEIGHBORS_COUNT,
    GRAPHDIMS_GET,
    GREQUEST_COMPLETE,
    GREQUEST_START,
    GROUP_COMPARE,
    GROUP_DIFFERENCE,
    GROUP_EXCL,
    GROUP_FREE,
    GROUP_FROM_SESSION_PSET,
    GROUP_INCL,
    GROUP_INTERSECTION,
    GROUP_RANGE_EXCL,
    GROUP_RANGE_INCL,
    GROUP_RANK,
    GROUP_SIZE,
    GROUP_TRANSLATE_RANKS,
    GROUP_UNION,
    IALLGATHER,
    IALLGATHER_C,
    IALLGATHERV,
    IALLGATHERV_C,
    IALLREDUCE,
    IALLREDUCE_C,
    IALLTOALL,
    IALLTOALL_C,
    IALLTOALLV,
    IALLTOALLV_C,
    IALLTOALLW,
    IALLTOALLW_C,
    IBARRIER,
    IBCAST,
    IBCAST_C,
    IBSEND,
    IBSEND_C,
    IEXSCAN,
    IEXSCAN_C,
    IGATHER,
    IGATHER_C,
    IGATHERV,
    IGATHERV_C,
    IMPROBE,
    IMRECV,
    IMRECV_C,
    INEIGHBOR_ALLGATHER,
    INEIGHBOR_ALLGATHER_C,
    INEIGHBOR_ALLGATHERV,
    INEIGHBOR_ALLGATHERV_C,
    INEIGHBOR_ALLTOALL,
    INEIGHBOR_ALLTOALL_C,
    INEIGHBOR_ALLTOALLV,
    INEIGHBOR_ALLTOALLV_C,
    INEIGHBOR_ALLTOALLW,
    INEIGHBOR_ALLTOALLW_C,
    INFO_CREATE,
    INFO_CREATE_ENV,
    INFO_DELETE,
    INFO_DUP,
    INFO_FREE,
    INFO_GET,
    INFO_GET_NKEYS,
    INFO_GET_NTHKEY,
    INFO_GET_STRING,
    INFO_GET_VALUELEN,
    INFO_SET,
    INIT,
    INIT_THREAD,
    INITIALIZED,
    INTERCOMM_CREATE,
    INTERCOMM_CREATE_FROM_GROUPS,
    INTERCOMM_MERGE,
    IPROBE,
    IRECV,
    IRECV_C,
    IREDUCE,
    IREDUCE_C,
    IREDUCE_SCATTER,
    IREDUCE_SCATTER_C,
    IREDUCE_SCATTER_BLOCK,
    IREDUCE_SCATTER_BLOCK_C,
    IRSEND,
    IRSEND_C,
    IS_THREAD_MAIN,
    ISCAN,
    ISCAN_C,
    ISCATTER,
    ISCATTER_C,
    ISCATTERV,
    ISCATTERV_C,
    ISEND,
    ISEND_C,
    ISENDRECV,
    ISENDRECV_C,
    ISENDRECV_REPLACE,
    ISENDRECV_REPLACE_C,
    ISSEND,
    ISSEND_C,
    LOOKUP_NAME,
    MPROBE,
    MRECV,
    MRECV_C,
    NEIGHBOR_ALLGATHER,
    NEIGHBOR_ALLGATHER_C,
    NEIGHBOR_ALLGATHER_INIT,
    NEIGHBOR_ALLGATHER_INIT_C,
    NEIGHBOR_ALLGATHERV,
    NEIGHBOR_ALLGATHERV_C,
    NEIGHBOR_ALLGATHERV_INIT,
    NEIGHBOR_ALLGATHERV_INIT_C,
    NEIGHBOR_ALLTOALL,
    NEIGHBOR_ALLTOALL_C,
    NEIGHBOR_ALLTOALL_INIT,
    NEIGHBOR_ALLTOALL_INIT_C,
    NEIGHBOR_ALLTOALLV,
    NEIGHBOR_ALLTOALLV_C,
    NEIGHBOR_ALLTOALLV_INIT,
    NEIGHBOR_ALLTOALLV_INIT_C,
    NEIGHBOR_ALLTOALLW,
    NEIGHBOR_ALLTOALLW_C,
    NEIGHBOR_ALLTOALLW_INIT,
    NEIGHBOR_ALLTOALLW_INIT_C,
    OP_COMMUTATIVE,
    OP_CREATE,
    OP_CREATE_C,
    OP_FREE,
    OPEN_PORT,
    PACK,
    PACK_C,
    PACK_EXTERNAL,
    PACK_EXTERNAL_C,
    PACK_EXTERNAL_SIZE,
    PACK_EXTERNAL_SIZE_C,
    PACK_SIZE,
    PACK_SIZE_C,
    PARRIVED,
    PREADY,
    PREADY_LIST,
    PREADY_RANGE,
    PRECV_INIT,
    PROBE,
    PSEND_INIT,
    PUBLISH_NAME,
    PUT,
    PUT_C,
    QUERY_THREAD,
    RACCUMULATE,
    RACCUMULATE_C,
    RECV,
    RECV_C,
    RECV_INIT,
    RECV_INIT_C,
    REDUCE,
    REDUCE_C,
    REDUCE_INIT,
    REDUCE_INIT_C,
    REDUCE_LOCAL,
    REDUCE_LOCAL_C,
    REDUCE_SCATTER,
    REDUCE_SCATTER_C,
    REDUCE_SCATTER_BLOCK,
    REDUCE_SCATTER_BLOCK_C,
    REDUCE_SCATTER_BLOCK_INIT,
    REDUCE_SCATTER_BLOCK_INIT_C,
    REDUCE_SCATTER_INIT,
    REDUCE_SCATTER_INIT_C,
    REGISTER_DATAREP,
    REGISTER_DATAREP_C,
    REQUEST_FREE,
    REQUEST_GET_STATUS,
    RGET,
    RGET_C,
    RGET_ACCUMULATE,
    RGET_ACCUMULATE_C,
    RPUT,
    RPUT_C,
    RSEND,
    RSEND_C,
    RSEND_INIT,
    RSEND_INIT_C,
    SCAN,
    SCAN_C,
    SCAN_INIT,
    SCAN_INIT_C,
    SCATTER,
    SCATTER_C,
    SCATTER_INIT,
    SCATTER_INIT_C,
    SCATTERV,
    SCATTERV_C,
    SCATTERV_INIT,
    SCATTERV_INIT_C,
    SEND,
    SEND_C,
    SEND_INIT,
    SEND_INIT_C,
    SENDRECV,
    SENDRECV_C,
    SENDRECV_REPLACE,
    SENDRECV_REPLACE_C,
    SESSION_CALL_ERRHANDLER,
    SESSION_CREATE_ERRHANDLER,
    SESSION_FINALIZE,
    SESSION_GET_ERRHANDLER,
    SESSION_GET_INFO,
    SESSION_GET_NTH_PSET,
    SESSION_GET_NUM_PSETS,
    SESSION_GET_PSET_INFO,
    SESSION_INIT,
    SESSION_SET_ERRHANDLER,
    SIZEOF,
    SSEND,
    SSEND_C,
    SSEND_INIT,
    SSEND_INIT_C,
    START,
    STARTALL,
    STATUS_F082F,
    STATUS_F2F08,
    STATUS_SET_CANCELLED,
    STATUS_SET_ELEMENTS,
    STATUS_SET_ELEMENTS_X,
    TEST,
    TEST_CANCELLED,
    TESTALL,
    TESTANY,
    TESTSOME,
    TOPO_TEST,
    TYPE_COMMIT,
    TYPE_CONTIGUOUS,
    TYPE_CONTIGUOUS_C,
    TYPE_CREATE_DARRAY,
    TYPE_CREATE_DARRAY_C,
    TYPE_CREATE_F90_COMPLEX,
    TYPE_CREATE_F90_INTEGER,
    TYPE_CREATE_F90_REAL,
    TYPE_CREATE_HINDEXED,
    TYPE_CREATE_HINDEXED_C,
    TYPE_CREATE_HINDEXED_BLOCK,
    TYPE_CREATE_HINDEXED_BLOCK_C,
    TYPE_CREATE_HVECTOR,
    TYPE_CREATE_HVECTOR_C,
    TYPE_CREATE_INDEXED_BLOCK,
    TYPE_CREATE_INDEXED_BLOCK_C,
    TYPE_CREATE_KEYVAL,
    TYPE_CREATE_RESIZED,
    TYPE_CREATE_RESIZED_C,
    TYPE_CREATE_STRUCT,
    TYPE_CREATE_STRUCT_C,
    TYPE_CREATE_SUBARRAY,
    TYPE_CREATE_SUBARRAY_C,
    TYPE_DELETE_ATTR,
    TYPE_DUP,
    TYPE_FREE,
    TYPE_FREE_KEYVAL,
    TYPE_GET_ATTR,
    TYPE_GET_CONTENTS,
    TYPE_GET_CONTENTS_C,
    TYPE_GET_ENVELOPE,
    TYPE_GET_ENVELOPE_C,
    TYPE_GET_EXTENT,
    TYPE_GET_EXTENT_C,
    TYPE_GET_EXTENT_X,
    TYPE_GET_NAME,
    TYPE_GET_TRUE_EXTENT,
    TYPE_GET_TRUE_EXTENT_C,
    TYPE_GET_TRUE_EXTENT_X,
    TYPE_INDEXED,
    TYPE_INDEXED_C,
    TYPE_MATCH_SIZE,
    TYPE_SET_ATTR,
    TYPE_SET_NAME,
    TYPE_SIZE,
    TYPE_SIZE_C,
    TYPE_SIZE_X,
    TYPE_VECTOR,
    TYPE_VECTOR_C,
    UNPACK,
    UNPACK_C,
    UNPACK_EXTERNAL,
    UNPACK_EXTERNAL_C,
    UNPUBLISH_NAME,
    WAIT,
    WAITALL,
    WAITANY,
    WAITSOME,
    WIN_ALLOCATE,
    WIN_ALLOCATE_C,
    WIN_ALLOCATE_SHARED,
    WIN_ALLOCATE_SHARED_C,
    WIN_ATTACH,
    WIN_CALL_ERRHANDLER,
    WIN_COMPLETE,
    WIN_CREATE,
    WIN_CREATE_C,
    WIN_CREATE_DYNAMIC,
    WIN_CREATE_ERRHANDLER,
    WIN_CREATE_KEYVAL,
    WIN_DELETE_ATTR,
    WIN_DETACH,
    WIN_FENCE,
    WIN_FLUSH,
    WIN_FLUSH_ALL,
    WIN_FLUSH_LOCAL,
    WIN_FLUSH_LOCAL_ALL,
    WIN_FREE,
    WIN_FREE_KEYVAL,
    WIN_GET_ATTR,
    WIN_GET_ERRHANDLER,
    WIN_GET_GROUP,
    WIN_GET_INFO,
    WIN_GET_NAME,
    WIN_LOCK,
    WIN_LOCK_ALL,
    WIN_POST,
    WIN_SET_ATTR,
    WIN_SET_ERRHANDLER,
    WIN_SET_INFO,
    WIN_SET_NAME,
    WIN_SHARED_QUERY,
    WIN_SHARED_QUERY_C,
    WIN_START,
    WIN_SYNC,
    WIN_TEST,
    WIN_UNLOCK,
    WIN_UNLOCK_ALL,
    WIN_WAIT])

# Start F08 symbol checks
m4_define([_MPI_F08_ABORT], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Abort,&
&profiling_procedure => PMPI_Abort
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_ABORT

m4_define([_MPI_F08_ACCUMULATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Accumulate,&
&profiling_procedure => PMPI_Accumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_OP), INTENT(IN) :: h_
TYPE(MPI_WIN), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ACCUMULATE

m4_define([_MPI_F08_ACCUMULATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Accumulate,&
&profiling_procedure => PMPI_Accumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_OP), INTENT(IN) :: h_
TYPE(MPI_WIN), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ACCUMULATE_C

m4_define([_MPI_F08_ADD_ERROR_CLASS], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Add_error_class,&
&profiling_procedure => PMPI_Add_error_class
implicit none

INTEGER, INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_ADD_ERROR_CLASS

m4_define([_MPI_F08_ADD_ERROR_CODE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Add_error_code,&
&profiling_procedure => PMPI_Add_error_code
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_ADD_ERROR_CODE

m4_define([_MPI_F08_ADD_ERROR_STRING], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Add_error_string,&
&profiling_procedure => PMPI_Add_error_string
implicit none

INTEGER, INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_ADD_ERROR_STRING

m4_define([_MPI_F08_ALLGATHER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Allgather,&
&profiling_procedure => PMPI_Allgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ALLGATHER

m4_define([_MPI_F08_ALLGATHER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Allgather,&
&profiling_procedure => PMPI_Allgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ALLGATHER_C

m4_define([_MPI_F08_ALLGATHER_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Allgather_init,&
&profiling_procedure => PMPI_Allgather_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLGATHER_INIT

m4_define([_MPI_F08_ALLGATHER_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Allgather_init,&
&profiling_procedure => PMPI_Allgather_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLGATHER_INIT_C

m4_define([_MPI_F08_ALLGATHERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Allgatherv,&
&profiling_procedure => PMPI_Allgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*) :: d_
INTEGER, DIMENSION(*), INTENT(IN) :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_ALLGATHERV

m4_define([_MPI_F08_ALLGATHERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Allgatherv,&
&profiling_procedure => PMPI_Allgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*) :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_ALLGATHERV_C

m4_define([_MPI_F08_ALLGATHERV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Allgatherv_init,&
&profiling_procedure => PMPI_Allgatherv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_ALLGATHERV_INIT

m4_define([_MPI_F08_ALLGATHERV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Allgatherv_init,&
&profiling_procedure => PMPI_Allgatherv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_ALLGATHERV_INIT_C

m4_define([_MPI_F08_ALLOC_MEM], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Alloc_mem,&
&profiling_procedure => PMPI_Alloc_mem
implicit none

INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
TYPE(C_PTR), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_ALLOC_MEM

m4_define([_MPI_F08_ALLREDUCE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Allreduce,&
&profiling_procedure => PMPI_Allreduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_ALLREDUCE

m4_define([_MPI_F08_ALLREDUCE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Allreduce,&
&profiling_procedure => PMPI_Allreduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_ALLREDUCE_C

m4_define([_MPI_F08_ALLREDUCE_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Allreduce_init,&
&profiling_procedure => PMPI_Allreduce_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_ALLREDUCE_INIT

m4_define([_MPI_F08_ALLREDUCE_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Allreduce_init,&
&profiling_procedure => PMPI_Allreduce_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_ALLREDUCE_INIT_C

m4_define([_MPI_F08_ALLTOALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Alltoall,&
&profiling_procedure => PMPI_Alltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ALLTOALL

m4_define([_MPI_F08_ALLTOALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Alltoall,&
&profiling_procedure => PMPI_Alltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ALLTOALL_C

m4_define([_MPI_F08_ALLTOALL_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Alltoall_init,&
&profiling_procedure => PMPI_Alltoall_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLTOALL_INIT

m4_define([_MPI_F08_ALLTOALL_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Alltoall_init,&
&profiling_procedure => PMPI_Alltoall_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLTOALL_INIT_C

m4_define([_MPI_F08_ALLTOALLV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Alltoallv,&
&profiling_procedure => PMPI_Alltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, DIMENSION(*), INTENT(IN) :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLV

m4_define([_MPI_F08_ALLTOALLV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Alltoallv,&
&profiling_procedure => PMPI_Alltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: c_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLV_C

m4_define([_MPI_F08_ALLTOALLV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Alltoallv_init,&
&profiling_procedure => PMPI_Alltoallv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLV_INIT

m4_define([_MPI_F08_ALLTOALLV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Alltoallv_init,&
&profiling_procedure => PMPI_Alltoallv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLV_INIT_C

m4_define([_MPI_F08_ALLTOALLW], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Alltoallw,&
&profiling_procedure => PMPI_Alltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, DIMENSION(*), INTENT(IN) :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLW

m4_define([_MPI_F08_ALLTOALLW_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Alltoallw,&
&profiling_procedure => PMPI_Alltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLW_C

m4_define([_MPI_F08_ALLTOALLW_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Alltoallw_init,&
&profiling_procedure => PMPI_Alltoallw_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLW_INIT

m4_define([_MPI_F08_ALLTOALLW_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Alltoallw_init,&
&profiling_procedure => PMPI_Alltoallw_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_ALLTOALLW_INIT_C

m4_define([_MPI_F08_BARRIER], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Barrier,&
&profiling_procedure => PMPI_Barrier
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_BARRIER

m4_define([_MPI_F08_BARRIER_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Barrier_init,&
&profiling_procedure => PMPI_Barrier_init
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
TYPE(MPI_REQUEST), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_BARRIER_INIT

m4_define([_MPI_F08_BCAST], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Bcast,&
&profiling_procedure => PMPI_Bcast
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER, INTENT(IN) :: b_, d_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_BCAST

m4_define([_MPI_F08_BCAST_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Bcast,&
&profiling_procedure => PMPI_Bcast
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_BCAST_C

m4_define([_MPI_F08_BCAST_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Bcast_init,&
&profiling_procedure => PMPI_Bcast_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: e_
TYPE(MPI_INFO), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_BCAST_INIT

m4_define([_MPI_F08_BCAST_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Bcast_init,&
&profiling_procedure => PMPI_Bcast_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: e_
TYPE(MPI_INFO), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_BCAST_INIT_C

m4_define([_MPI_F08_BSEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Bsend,&
&profiling_procedure => PMPI_Bsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_BSEND

m4_define([_MPI_F08_BSEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Bsend,&
&profiling_procedure => PMPI_Bsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_BSEND_C

m4_define([_MPI_F08_BSEND_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Bsend_init,&
&profiling_procedure => PMPI_Bsend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_BSEND_INIT

m4_define([_MPI_F08_BSEND_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Bsend_init,&
&profiling_procedure => PMPI_Bsend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_BSEND_INIT_C

m4_define([_MPI_F08_BUFFER_ATTACH], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Buffer_attach,&
&profiling_procedure => PMPI_Buffer_attach
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_BUFFER_ATTACH

m4_define([_MPI_F08_BUFFER_ATTACH_C], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Buffer_attach,&
&profiling_procedure => PMPI_Buffer_attach
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_BUFFER_ATTACH_C

m4_define([_MPI_F08_BUFFER_DETACH], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Buffer_detach,&
&profiling_procedure => PMPI_Buffer_detach
implicit none

TYPE(C_PTR), INTENT(OUT) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_BUFFER_DETACH

m4_define([_MPI_F08_BUFFER_DETACH_C], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Buffer_detach,&
&profiling_procedure => PMPI_Buffer_detach
implicit none

TYPE(C_PTR), INTENT(OUT) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_BUFFER_DETACH_C

m4_define([_MPI_F08_CANCEL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Cancel,&
&profiling_procedure => PMPI_Cancel
implicit none

TYPE(MPI_REQUEST), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_CANCEL

m4_define([_MPI_F08_CART_COORDS], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Cart_coords,&
&profiling_procedure => PMPI_Cart_coords
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_
INTEGER, DIMENSION(c_), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_CART_COORDS

m4_define([_MPI_F08_CART_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Cart_create,&
&profiling_procedure => PMPI_Cart_create
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
LOGICAL, DIMENSION(b_), INTENT(IN) :: d_
LOGICAL, INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_CART_CREATE

m4_define([_MPI_F08_CART_GET], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Cart_get,&
&profiling_procedure => PMPI_Cart_get
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(OUT) :: c_, e_
LOGICAL, DIMENSION(b_), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_CART_GET

m4_define([_MPI_F08_CART_MAP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Cart_map,&
&profiling_procedure => PMPI_Cart_map
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
LOGICAL, DIMENSION(b_), INTENT(IN) :: d_
INTEGER, INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_CART_MAP

m4_define([_MPI_F08_CART_RANK], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Cart_rank,&
&profiling_procedure => PMPI_Cart_rank
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_CART_RANK

m4_define([_MPI_F08_CART_SHIFT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Cart_shift,&
&profiling_procedure => PMPI_Cart_shift
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_
INTEGER, INTENT(OUT) :: d_, e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_CART_SHIFT

m4_define([_MPI_F08_CART_SUB], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Cart_sub,&
&profiling_procedure => PMPI_Cart_sub
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
LOGICAL, DIMENSION(*), INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_CART_SUB

m4_define([_MPI_F08_CARTDIM_GET], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Cartdim_get,&
&profiling_procedure => PMPI_Cartdim_get
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_CARTDIM_GET

m4_define([_MPI_F08_CLOSE_PORT], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Close_port,&
&profiling_procedure => PMPI_Close_port
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_CLOSE_PORT

m4_define([_MPI_F08_COMM_ACCEPT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Comm_accept,&
&profiling_procedure => PMPI_Comm_accept
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_COMM_ACCEPT

m4_define([_MPI_F08_COMM_CALL_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_call_errhandler,&
&profiling_procedure => PMPI_Comm_call_errhandler
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_CALL_ERRHANDLER

m4_define([_MPI_F08_COMM_COMPARE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Comm_compare,&
&profiling_procedure => PMPI_Comm_compare
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_, b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_COMM_COMPARE

m4_define([_MPI_F08_COMM_CONNECT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Comm_connect,&
&profiling_procedure => PMPI_Comm_connect
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_COMM_CONNECT

m4_define([_MPI_F08_COMM_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Comm_create,&
&profiling_procedure => PMPI_Comm_create
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_GROUP), INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_COMM_CREATE

m4_define([_MPI_F08_COMM_CREATE_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_create_errhandler,&
&profiling_procedure => PMPI_Comm_create_errhandler
implicit none

PROCEDURE(MPI_COMM_ERRHANDLER_FUNCTION) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_CREATE_ERRHANDLER

m4_define([_MPI_F08_COMM_CREATE_FROM_GROUP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Comm_create_from_group,&
&profiling_procedure => PMPI_Comm_create_from_group
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
TYPE(MPI_INFO), INTENT(IN) :: c_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_COMM_CREATE_FROM_GROUP

m4_define([_MPI_F08_COMM_CREATE_GROUP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Comm_create_group,&
&profiling_procedure => PMPI_Comm_create_group
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_GROUP), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_COMM_CREATE_GROUP

m4_define([_MPI_F08_COMM_CREATE_KEYVAL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Comm_create_keyval,&
&profiling_procedure => PMPI_Comm_create_keyval
implicit none

PROCEDURE(MPI_COMM_COPY_ATTR_FUNCTION) :: a_
PROCEDURE(MPI_COMM_DELETE_ATTR_FUNCTION) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_COMM_CREATE_KEYVAL

m4_define([_MPI_F08_COMM_DELETE_ATTR], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_delete_attr,&
&profiling_procedure => PMPI_Comm_delete_attr
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_DELETE_ATTR

m4_define([_MPI_F08_COMM_DISCONNECT], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Comm_disconnect,&
&profiling_procedure => PMPI_Comm_disconnect
implicit none

TYPE(MPI_COMM), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_COMM_DISCONNECT

m4_define([_MPI_F08_COMM_DUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_dup,&
&profiling_procedure => PMPI_Comm_dup
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_COMM), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_DUP

m4_define([_MPI_F08_COMM_DUP_WITH_INFO], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Comm_dup_with_info,&
&profiling_procedure => PMPI_Comm_dup_with_info
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_COMM_DUP_WITH_INFO

m4_define([_MPI_F08_COMM_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Comm_free,&
&profiling_procedure => PMPI_Comm_free
implicit none

TYPE(MPI_COMM), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_COMM_FREE

m4_define([_MPI_F08_COMM_FREE_KEYVAL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Comm_free_keyval,&
&profiling_procedure => PMPI_Comm_free_keyval
implicit none

INTEGER, INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_COMM_FREE_KEYVAL

m4_define([_MPI_F08_COMM_GET_ATTR], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Comm_get_attr,&
&profiling_procedure => PMPI_Comm_get_attr
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: c_
LOGICAL, INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_COMM_GET_ATTR

m4_define([_MPI_F08_COMM_GET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_get_errhandler,&
&profiling_procedure => PMPI_Comm_get_errhandler
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_GET_ERRHANDLER

m4_define([_MPI_F08_COMM_GET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_get_info,&
&profiling_procedure => PMPI_Comm_get_info
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_GET_INFO

m4_define([_MPI_F08_COMM_GET_NAME], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Comm_get_name,&
&profiling_procedure => PMPI_Comm_get_name
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_COMM_GET_NAME

m4_define([_MPI_F08_COMM_GET_PARENT], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Comm_get_parent,&
&profiling_procedure => PMPI_Comm_get_parent
implicit none

TYPE(MPI_COMM), INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_COMM_GET_PARENT

m4_define([_MPI_F08_COMM_GROUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_group,&
&profiling_procedure => PMPI_Comm_group
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_GROUP), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_GROUP

m4_define([_MPI_F08_COMM_IDUP], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Comm_idup,&
&profiling_procedure => PMPI_Comm_idup
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_COMM), INTENT(OUT), ASYNCHRONOUS :: b_
TYPE(MPI_REQUEST), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_COMM_IDUP

m4_define([_MPI_F08_COMM_IDUP_WITH_INFO], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Comm_idup_with_info,&
&profiling_procedure => PMPI_Comm_idup_with_info
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(OUT), ASYNCHRONOUS :: c_
TYPE(MPI_REQUEST), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_COMM_IDUP_WITH_INFO

m4_define([_MPI_F08_COMM_JOIN], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_join,&
&profiling_procedure => PMPI_Comm_join
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_COMM), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_JOIN

m4_define([_MPI_F08_COMM_RANK], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_rank,&
&profiling_procedure => PMPI_Comm_rank
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_RANK

m4_define([_MPI_F08_COMM_REMOTE_GROUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_remote_group,&
&profiling_procedure => PMPI_Comm_remote_group
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_GROUP), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_REMOTE_GROUP

m4_define([_MPI_F08_COMM_REMOTE_SIZE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_remote_size,&
&profiling_procedure => PMPI_Comm_remote_size
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_REMOTE_SIZE

m4_define([_MPI_F08_COMM_SET_ATTR], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Comm_set_attr,&
&profiling_procedure => PMPI_Comm_set_attr
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_COMM_SET_ATTR

m4_define([_MPI_F08_COMM_SET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_set_errhandler,&
&profiling_procedure => PMPI_Comm_set_errhandler
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_SET_ERRHANDLER

m4_define([_MPI_F08_COMM_SET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_set_info,&
&profiling_procedure => PMPI_Comm_set_info
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_SET_INFO

m4_define([_MPI_F08_COMM_SET_NAME], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_set_name,&
&profiling_procedure => PMPI_Comm_set_name
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_SET_NAME

m4_define([_MPI_F08_COMM_SIZE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_size,&
&profiling_procedure => PMPI_Comm_size
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_SIZE

m4_define([_MPI_F08_COMM_SPAWN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Comm_spawn,&
&profiling_procedure => PMPI_Comm_spawn
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
CHARACTER(LEN=*), DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_, e_
TYPE(MPI_INFO), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(OUT) :: g_
INTEGER, DIMENSION(*) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_COMM_SPAWN

m4_define([_MPI_F08_COMM_SPAWN_MULTIPLE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Comm_spawn_multiple,&
&profiling_procedure => PMPI_Comm_spawn_multiple
implicit none

INTEGER, INTENT(IN) :: a_, f_
CHARACTER(LEN=*), DIMENSION(*), INTENT(IN) :: b_
CHARACTER(LEN=*), DIMENSION(a_,*), INTENT(IN) :: c_
INTEGER, DIMENSION(*), INTENT(IN) :: d_
TYPE(MPI_INFO), DIMENSION(*), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(OUT) :: h_
INTEGER, DIMENSION(*) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_COMM_SPAWN_MULTIPLE

m4_define([_MPI_F08_COMM_SPLIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Comm_split,&
&profiling_procedure => PMPI_Comm_split
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_
TYPE(MPI_COMM), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_COMM_SPLIT

m4_define([_MPI_F08_COMM_SPLIT_TYPE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Comm_split_type,&
&profiling_procedure => PMPI_Comm_split_type
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_
TYPE(MPI_INFO), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_COMM_SPLIT_TYPE

m4_define([_MPI_F08_COMM_TEST_INTER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Comm_test_inter,&
&profiling_procedure => PMPI_Comm_test_inter
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
LOGICAL, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_COMM_TEST_INTER

m4_define([_MPI_F08_COMPARE_AND_SWAP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Compare_and_swap,&
&profiling_procedure => PMPI_Compare_and_swap
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_, b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(IN) :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: f_
TYPE(MPI_WIN), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_COMPARE_AND_SWAP

m4_define([_MPI_F08_DIMS_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Dims_create,&
&profiling_procedure => PMPI_Dims_create
implicit none

INTEGER, INTENT(IN) :: a_, b_
INTEGER, DIMENSION(b_), INTENT(INOUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_DIMS_CREATE

m4_define([_MPI_F08_DIST_GRAPH_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Dist_graph_create,&
&profiling_procedure => PMPI_Dist_graph_create
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_, d_
INTEGER, DIMENSION(*), INTENT(IN) :: e_, f_
TYPE(MPI_INFO), INTENT(IN) :: g_
LOGICAL, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_DIST_GRAPH_CREATE

m4_define([_MPI_F08_DIST_GRAPH_CREATE_ADJACENT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Dist_graph_create_adjacent,&
&profiling_procedure => PMPI_Dist_graph_create_adjacent
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
INTEGER, DIMENSION(*), INTENT(IN) :: d_, g_
INTEGER, DIMENSION(e_), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: h_
LOGICAL, INTENT(IN) :: i_
TYPE(MPI_COMM), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_DIST_GRAPH_CREATE_ADJACENT

m4_define([_MPI_F08_DIST_GRAPH_NEIGHBORS], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Dist_graph_neighbors,&
&profiling_procedure => PMPI_Dist_graph_neighbors
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
INTEGER, DIMENSION(b_), INTENT(OUT) :: c_
INTEGER, DIMENSION(*) :: d_, g_
INTEGER, DIMENSION(e_), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_DIST_GRAPH_NEIGHBORS

m4_define([_MPI_F08_DIST_GRAPH_NEIGHBORS_COUNT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Dist_graph_neighbors_count,&
&profiling_procedure => PMPI_Dist_graph_neighbors_count
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_, c_
LOGICAL, INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_DIST_GRAPH_NEIGHBORS_COUNT

m4_define([_MPI_F08_ERRHANDLER_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Errhandler_free,&
&profiling_procedure => PMPI_Errhandler_free
implicit none

TYPE(MPI_ERRHANDLER), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_ERRHANDLER_FREE

m4_define([_MPI_F08_ERROR_CLASS], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Error_class,&
&profiling_procedure => PMPI_Error_class
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_ERROR_CLASS

m4_define([_MPI_F08_ERROR_STRING], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Error_string,&
&profiling_procedure => PMPI_Error_string
implicit none

INTEGER, INTENT(IN) :: a_
CHARACTER(LEN=MPI_MAX_ERROR_STRING), INTENT(OUT) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_ERROR_STRING

m4_define([_MPI_F08_EXSCAN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Exscan,&
&profiling_procedure => PMPI_Exscan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_EXSCAN

m4_define([_MPI_F08_EXSCAN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Exscan,&
&profiling_procedure => PMPI_Exscan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_EXSCAN_C

m4_define([_MPI_F08_EXSCAN_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Exscan_init,&
&profiling_procedure => PMPI_Exscan_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_EXSCAN_INIT

m4_define([_MPI_F08_EXSCAN_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Exscan_init,&
&profiling_procedure => PMPI_Exscan_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_EXSCAN_INIT_C

m4_define([_MPI_F08_FETCH_AND_OP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Fetch_and_op,&
&profiling_procedure => PMPI_Fetch_and_op
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_OP), INTENT(IN) :: f_
TYPE(MPI_WIN), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_FETCH_AND_OP

m4_define([_MPI_F08_FILE_CALL_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_call_errhandler,&
&profiling_procedure => PMPI_File_call_errhandler
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_CALL_ERRHANDLER

m4_define([_MPI_F08_FILE_CLOSE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_File_close,&
&profiling_procedure => PMPI_File_close
implicit none

TYPE(MPI_FILE), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_FILE_CLOSE

m4_define([_MPI_F08_FILE_CREATE_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_create_errhandler,&
&profiling_procedure => PMPI_File_create_errhandler
implicit none

PROCEDURE(MPI_FILE_ERRHANDLER_FUNCTION) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_CREATE_ERRHANDLER

m4_define([_MPI_F08_FILE_DELETE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_delete,&
&profiling_procedure => PMPI_File_delete
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_DELETE

m4_define([_MPI_F08_FILE_GET_AMODE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_amode,&
&profiling_procedure => PMPI_File_get_amode
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_AMODE

m4_define([_MPI_F08_FILE_GET_ATOMICITY], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_atomicity,&
&profiling_procedure => PMPI_File_get_atomicity
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
LOGICAL, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_ATOMICITY

m4_define([_MPI_F08_FILE_GET_BYTE_OFFSET], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_get_byte_offset,&
&profiling_procedure => PMPI_File_get_byte_offset
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_BYTE_OFFSET

m4_define([_MPI_F08_FILE_GET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_errhandler,&
&profiling_procedure => PMPI_File_get_errhandler
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_ERRHANDLER

m4_define([_MPI_F08_FILE_GET_GROUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_group,&
&profiling_procedure => PMPI_File_get_group
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_GROUP), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_GROUP

m4_define([_MPI_F08_FILE_GET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_info,&
&profiling_procedure => PMPI_File_get_info
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_INFO

m4_define([_MPI_F08_FILE_GET_POSITION], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_position,&
&profiling_procedure => PMPI_File_get_position
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_POSITION

m4_define([_MPI_F08_FILE_GET_POSITION_SHARED], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_position_shared,&
&profiling_procedure => PMPI_File_get_position_shared
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_POSITION_SHARED

m4_define([_MPI_F08_FILE_GET_SIZE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_get_size,&
&profiling_procedure => PMPI_File_get_size
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_SIZE

m4_define([_MPI_F08_FILE_GET_TYPE_EXTENT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_get_type_extent,&
&profiling_procedure => PMPI_File_get_type_extent
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_TYPE_EXTENT

m4_define([_MPI_F08_FILE_GET_TYPE_EXTENT_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_get_type_extent,&
&profiling_procedure => PMPI_File_get_type_extent
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_TYPE_EXTENT_C

m4_define([_MPI_F08_FILE_GET_VIEW], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_get_view,&
&profiling_procedure => PMPI_File_get_view
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: b_
TYPE(MPI_DATATYPE), INTENT(OUT) :: c_, d_
CHARACTER(LEN=*), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_GET_VIEW

m4_define([_MPI_F08_FILE_IREAD], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iread,&
&profiling_procedure => PMPI_File_iread
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD

m4_define([_MPI_F08_FILE_IREAD_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iread,&
&profiling_procedure => PMPI_File_iread
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_C

m4_define([_MPI_F08_FILE_IREAD_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iread_all,&
&profiling_procedure => PMPI_File_iread_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_ALL

m4_define([_MPI_F08_FILE_IREAD_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iread_all,&
&profiling_procedure => PMPI_File_iread_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_ALL_C

m4_define([_MPI_F08_FILE_IREAD_AT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iread_at,&
&profiling_procedure => PMPI_File_iread_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_AT

m4_define([_MPI_F08_FILE_IREAD_AT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iread_at,&
&profiling_procedure => PMPI_File_iread_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_AT_C

m4_define([_MPI_F08_FILE_IREAD_AT_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iread_at_all,&
&profiling_procedure => PMPI_File_iread_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_AT_ALL

m4_define([_MPI_F08_FILE_IREAD_AT_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iread_at_all,&
&profiling_procedure => PMPI_File_iread_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_AT_ALL_C

m4_define([_MPI_F08_FILE_IREAD_SHARED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iread_shared,&
&profiling_procedure => PMPI_File_iread_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_SHARED

m4_define([_MPI_F08_FILE_IREAD_SHARED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iread_shared,&
&profiling_procedure => PMPI_File_iread_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IREAD_SHARED_C

m4_define([_MPI_F08_FILE_IWRITE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iwrite,&
&profiling_procedure => PMPI_File_iwrite
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE

m4_define([_MPI_F08_FILE_IWRITE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iwrite,&
&profiling_procedure => PMPI_File_iwrite
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_C

m4_define([_MPI_F08_FILE_IWRITE_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_all,&
&profiling_procedure => PMPI_File_iwrite_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_ALL

m4_define([_MPI_F08_FILE_IWRITE_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_all,&
&profiling_procedure => PMPI_File_iwrite_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_ALL_C

m4_define([_MPI_F08_FILE_IWRITE_AT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_at,&
&profiling_procedure => PMPI_File_iwrite_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_AT

m4_define([_MPI_F08_FILE_IWRITE_AT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_at,&
&profiling_procedure => PMPI_File_iwrite_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_AT_C

m4_define([_MPI_F08_FILE_IWRITE_AT_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_at_all,&
&profiling_procedure => PMPI_File_iwrite_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_AT_ALL

m4_define([_MPI_F08_FILE_IWRITE_AT_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_at_all,&
&profiling_procedure => PMPI_File_iwrite_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_AT_ALL_C

m4_define([_MPI_F08_FILE_IWRITE_SHARED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_shared,&
&profiling_procedure => PMPI_File_iwrite_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_SHARED

m4_define([_MPI_F08_FILE_IWRITE_SHARED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_iwrite_shared,&
&profiling_procedure => PMPI_File_iwrite_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_IWRITE_SHARED_C

m4_define([_MPI_F08_FILE_OPEN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_open,&
&profiling_procedure => PMPI_File_open
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_INFO), INTENT(IN) :: d_
TYPE(MPI_FILE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_OPEN

m4_define([_MPI_F08_FILE_PREALLOCATE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_preallocate,&
&profiling_procedure => PMPI_File_preallocate
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_PREALLOCATE

m4_define([_MPI_F08_FILE_READ], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read,&
&profiling_procedure => PMPI_File_read
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ

m4_define([_MPI_F08_FILE_READ_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read,&
&profiling_procedure => PMPI_File_read
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_C

m4_define([_MPI_F08_FILE_READ_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_all,&
&profiling_procedure => PMPI_File_read_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ALL

m4_define([_MPI_F08_FILE_READ_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_all,&
&profiling_procedure => PMPI_File_read_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ALL_C

m4_define([_MPI_F08_FILE_READ_ALL_BEGIN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_read_all_begin,&
&profiling_procedure => PMPI_File_read_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ALL_BEGIN

m4_define([_MPI_F08_FILE_READ_ALL_BEGIN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_read_all_begin,&
&profiling_procedure => PMPI_File_read_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ALL_BEGIN_C

m4_define([_MPI_F08_FILE_READ_ALL_END], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_read_all_end,&
&profiling_procedure => PMPI_File_read_all_end
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ALL_END

m4_define([_MPI_F08_FILE_READ_AT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_read_at,&
&profiling_procedure => PMPI_File_read_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT

m4_define([_MPI_F08_FILE_READ_AT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_read_at,&
&profiling_procedure => PMPI_File_read_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*) :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT_C

m4_define([_MPI_F08_FILE_READ_AT_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_read_at_all,&
&profiling_procedure => PMPI_File_read_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT_ALL

m4_define([_MPI_F08_FILE_READ_AT_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_read_at_all,&
&profiling_procedure => PMPI_File_read_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*) :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT_ALL_C

m4_define([_MPI_F08_FILE_READ_AT_ALL_BEGIN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_at_all_begin,&
&profiling_procedure => PMPI_File_read_at_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT_ALL_BEGIN

m4_define([_MPI_F08_FILE_READ_AT_ALL_BEGIN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_at_all_begin,&
&profiling_procedure => PMPI_File_read_at_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT_ALL_BEGIN_C

m4_define([_MPI_F08_FILE_READ_AT_ALL_END], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_read_at_all_end,&
&profiling_procedure => PMPI_File_read_at_all_end
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_AT_ALL_END

m4_define([_MPI_F08_FILE_READ_ORDERED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_ordered,&
&profiling_procedure => PMPI_File_read_ordered
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ORDERED

m4_define([_MPI_F08_FILE_READ_ORDERED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_ordered,&
&profiling_procedure => PMPI_File_read_ordered
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ORDERED_C

m4_define([_MPI_F08_FILE_READ_ORDERED_BEGIN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_read_ordered_begin,&
&profiling_procedure => PMPI_File_read_ordered_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ORDERED_BEGIN

m4_define([_MPI_F08_FILE_READ_ORDERED_BEGIN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_read_ordered_begin,&
&profiling_procedure => PMPI_File_read_ordered_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ORDERED_BEGIN_C

m4_define([_MPI_F08_FILE_READ_ORDERED_END], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_read_ordered_end,&
&profiling_procedure => PMPI_File_read_ordered_end
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_ORDERED_END

m4_define([_MPI_F08_FILE_READ_SHARED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_shared,&
&profiling_procedure => PMPI_File_read_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_SHARED

m4_define([_MPI_F08_FILE_READ_SHARED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_read_shared,&
&profiling_procedure => PMPI_File_read_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_READ_SHARED_C

m4_define([_MPI_F08_FILE_SEEK], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_seek,&
&profiling_procedure => PMPI_File_seek
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_SEEK

m4_define([_MPI_F08_FILE_SEEK_SHARED], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_seek_shared,&
&profiling_procedure => PMPI_File_seek_shared
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_SEEK_SHARED

m4_define([_MPI_F08_FILE_SET_ATOMICITY], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_set_atomicity,&
&profiling_procedure => PMPI_File_set_atomicity
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
LOGICAL, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_SET_ATOMICITY

m4_define([_MPI_F08_FILE_SET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_set_errhandler,&
&profiling_procedure => PMPI_File_set_errhandler
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_SET_ERRHANDLER

m4_define([_MPI_F08_FILE_SET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_set_info,&
&profiling_procedure => PMPI_File_set_info
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_SET_INFO

m4_define([_MPI_F08_FILE_SET_SIZE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_File_set_size,&
&profiling_procedure => PMPI_File_set_size
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_FILE_SET_SIZE

m4_define([_MPI_F08_FILE_SET_VIEW], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_set_view,&
&profiling_procedure => PMPI_File_set_view
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, d_
CHARACTER(LEN=*), INTENT(IN) :: e_
TYPE(MPI_INFO), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_SET_VIEW

m4_define([_MPI_F08_FILE_SYNC], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_File_sync,&
&profiling_procedure => PMPI_File_sync
implicit none

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_FILE_SYNC

m4_define([_MPI_F08_FILE_WRITE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write,&
&profiling_procedure => PMPI_File_write
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE

m4_define([_MPI_F08_FILE_WRITE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write,&
&profiling_procedure => PMPI_File_write
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_C

m4_define([_MPI_F08_FILE_WRITE_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_all,&
&profiling_procedure => PMPI_File_write_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ALL

m4_define([_MPI_F08_FILE_WRITE_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_all,&
&profiling_procedure => PMPI_File_write_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ALL_C

m4_define([_MPI_F08_FILE_WRITE_ALL_BEGIN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_write_all_begin,&
&profiling_procedure => PMPI_File_write_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ALL_BEGIN

m4_define([_MPI_F08_FILE_WRITE_ALL_BEGIN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_write_all_begin,&
&profiling_procedure => PMPI_File_write_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ALL_BEGIN_C

m4_define([_MPI_F08_FILE_WRITE_ALL_END], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_write_all_end,&
&profiling_procedure => PMPI_File_write_all_end
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ALL_END

m4_define([_MPI_F08_FILE_WRITE_AT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_write_at,&
&profiling_procedure => PMPI_File_write_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT

m4_define([_MPI_F08_FILE_WRITE_AT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_write_at,&
&profiling_procedure => PMPI_File_write_at
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN) :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT_C

m4_define([_MPI_F08_FILE_WRITE_AT_ALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_write_at_all,&
&profiling_procedure => PMPI_File_write_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT_ALL

m4_define([_MPI_F08_FILE_WRITE_AT_ALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_File_write_at_all,&
&profiling_procedure => PMPI_File_write_at_all
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN) :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT_ALL_C

m4_define([_MPI_F08_FILE_WRITE_AT_ALL_BEGIN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_at_all_begin,&
&profiling_procedure => PMPI_File_write_at_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT_ALL_BEGIN

m4_define([_MPI_F08_FILE_WRITE_AT_ALL_BEGIN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_at_all_begin,&
&profiling_procedure => PMPI_File_write_at_all_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: b_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT_ALL_BEGIN_C

m4_define([_MPI_F08_FILE_WRITE_AT_ALL_END], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_write_at_all_end,&
&profiling_procedure => PMPI_File_write_at_all_end
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_AT_ALL_END

m4_define([_MPI_F08_FILE_WRITE_ORDERED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_ordered,&
&profiling_procedure => PMPI_File_write_ordered
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ORDERED

m4_define([_MPI_F08_FILE_WRITE_ORDERED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_ordered,&
&profiling_procedure => PMPI_File_write_ordered
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ORDERED_C

m4_define([_MPI_F08_FILE_WRITE_ORDERED_BEGIN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_write_ordered_begin,&
&profiling_procedure => PMPI_File_write_ordered_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ORDERED_BEGIN

m4_define([_MPI_F08_FILE_WRITE_ORDERED_BEGIN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_File_write_ordered_begin,&
&profiling_procedure => PMPI_File_write_ordered_begin
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ORDERED_BEGIN_C

m4_define([_MPI_F08_FILE_WRITE_ORDERED_END], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_File_write_ordered_end,&
&profiling_procedure => PMPI_File_write_ordered_end
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_ORDERED_END

m4_define([_MPI_F08_FILE_WRITE_SHARED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_shared,&
&profiling_procedure => PMPI_File_write_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_SHARED

m4_define([_MPI_F08_FILE_WRITE_SHARED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_File_write_shared,&
&profiling_procedure => PMPI_File_write_shared
implicit none

type mytype
integer :: value
end type

TYPE(MPI_FILE), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_FILE_WRITE_SHARED_C

m4_define([_MPI_F08_FINALIZE], [[subroutine check_f08_sym(a_)
use :: mpi_f08, this_procedure => MPI_Finalize,&
&profiling_procedure => PMPI_Finalize
implicit none

INTEGER, INTENT(OUT), OPTIONAL :: a_

call this_procedure(a_)
end subroutine]]
)dnl _MPI_F08_FINALIZE

m4_define([_MPI_F08_FINALIZED], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Finalized,&
&profiling_procedure => PMPI_Finalized
implicit none

LOGICAL, INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_FINALIZED

m4_define([_MPI_F08_FREE_MEM], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Free_mem,&
&profiling_procedure => PMPI_Free_mem
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_FREE_MEM

m4_define([_MPI_F08_GATHER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Gather,&
&profiling_procedure => PMPI_Gather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_GATHER

m4_define([_MPI_F08_GATHER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Gather,&
&profiling_procedure => PMPI_Gather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
INTEGER, INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_GATHER_C

m4_define([_MPI_F08_GATHER_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Gather_init,&
&profiling_procedure => PMPI_Gather_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_GATHER_INIT

m4_define([_MPI_F08_GATHER_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Gather_init,&
&profiling_procedure => PMPI_Gather_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_GATHER_INIT_C

m4_define([_MPI_F08_GATHERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Gatherv,&
&profiling_procedure => PMPI_Gatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, h_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*) :: d_
INTEGER, DIMENSION(*), INTENT(IN) :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_GATHERV

m4_define([_MPI_F08_GATHERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Gatherv,&
&profiling_procedure => PMPI_Gatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*) :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: f_
INTEGER, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_GATHERV_C

m4_define([_MPI_F08_GATHERV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Gatherv_init,&
&profiling_procedure => PMPI_Gatherv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, h_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_GATHERV_INIT

m4_define([_MPI_F08_GATHERV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Gatherv_init,&
&profiling_procedure => PMPI_Gatherv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: f_
INTEGER, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_GATHERV_INIT_C

m4_define([_MPI_F08_GET], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Get,&
&profiling_procedure => PMPI_Get
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_GET

m4_define([_MPI_F08_GET_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Get,&
&profiling_procedure => PMPI_Get
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_GET_C

m4_define([_MPI_F08_GET_ACCUMULATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
use :: mpi_f08, this_procedure => MPI_Get_accumulate,&
&profiling_procedure => PMPI_Get_accumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_, g_, i_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_, j_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: h_
TYPE(MPI_OP), INTENT(IN) :: k_
TYPE(MPI_WIN), INTENT(IN) :: l_
INTEGER, INTENT(OUT), OPTIONAL :: m_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
end subroutine]]
)dnl _MPI_F08_GET_ACCUMULATE

m4_define([_MPI_F08_GET_ACCUMULATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
use :: mpi_f08, this_procedure => MPI_Get_accumulate,&
&profiling_procedure => PMPI_Get_accumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_, i_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_, j_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, INTENT(IN) :: g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: h_
TYPE(MPI_OP), INTENT(IN) :: k_
TYPE(MPI_WIN), INTENT(IN) :: l_
INTEGER, INTENT(OUT), OPTIONAL :: m_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
end subroutine]]
)dnl _MPI_F08_GET_ACCUMULATE_C

m4_define([_MPI_F08_GET_ADDRESS], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Get_address,&
&profiling_procedure => PMPI_Get_address
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_GET_ADDRESS

m4_define([_MPI_F08_GET_COUNT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Get_count,&
&profiling_procedure => PMPI_Get_count
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GET_COUNT

m4_define([_MPI_F08_GET_COUNT_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Get_count,&
&profiling_procedure => PMPI_Get_count
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GET_COUNT_C

m4_define([_MPI_F08_GET_ELEMENTS], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Get_elements,&
&profiling_procedure => PMPI_Get_elements
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GET_ELEMENTS

m4_define([_MPI_F08_GET_ELEMENTS_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Get_elements,&
&profiling_procedure => PMPI_Get_elements
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GET_ELEMENTS_C

m4_define([_MPI_F08_GET_ELEMENTS_X], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Get_elements_x,&
&profiling_procedure => PMPI_Get_elements_x
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GET_ELEMENTS_X

m4_define([_MPI_F08_GET_LIBRARY_VERSION], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Get_library_version,&
&profiling_procedure => PMPI_Get_library_version
implicit none

CHARACTER(LEN=MPI_MAX_LIBRARY_VERSION_STRING), INTENT(OUT) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_GET_LIBRARY_VERSION

m4_define([_MPI_F08_GET_PROCESSOR_NAME], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Get_processor_name,&
&profiling_procedure => PMPI_Get_processor_name
implicit none

CHARACTER(LEN=MPI_MAX_PROCESSOR_NAME), INTENT(OUT) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_GET_PROCESSOR_NAME

m4_define([_MPI_F08_GET_VERSION], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Get_version,&
&profiling_procedure => PMPI_Get_version
implicit none

INTEGER, INTENT(OUT) :: a_, b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_GET_VERSION

m4_define([_MPI_F08_GRAPH_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Graph_create,&
&profiling_procedure => PMPI_Graph_create
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
INTEGER, DIMENSION(*), INTENT(IN) :: d_
LOGICAL, INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_GRAPH_CREATE

m4_define([_MPI_F08_GRAPH_GET], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Graph_get,&
&profiling_procedure => PMPI_Graph_get
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_
INTEGER, DIMENSION(b_), INTENT(OUT) :: d_
INTEGER, DIMENSION(c_), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_GRAPH_GET

m4_define([_MPI_F08_GRAPH_MAP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Graph_map,&
&profiling_procedure => PMPI_Graph_map
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
INTEGER, DIMENSION(*), INTENT(IN) :: d_
INTEGER, INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_GRAPH_MAP

m4_define([_MPI_F08_GRAPH_NEIGHBORS], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Graph_neighbors,&
&profiling_procedure => PMPI_Graph_neighbors
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_
INTEGER, DIMENSION(c_), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_GRAPH_NEIGHBORS

m4_define([_MPI_F08_GRAPH_NEIGHBORS_COUNT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Graph_neighbors_count,&
&profiling_procedure => PMPI_Graph_neighbors_count
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GRAPH_NEIGHBORS_COUNT

m4_define([_MPI_F08_GRAPHDIMS_GET], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Graphdims_get,&
&profiling_procedure => PMPI_Graphdims_get
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GRAPHDIMS_GET

m4_define([_MPI_F08_GREQUEST_COMPLETE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Grequest_complete,&
&profiling_procedure => PMPI_Grequest_complete
implicit none

TYPE(MPI_REQUEST), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_GREQUEST_COMPLETE

m4_define([_MPI_F08_GREQUEST_START], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Grequest_start,&
&profiling_procedure => PMPI_Grequest_start
implicit none

PROCEDURE(MPI_GREQUEST_QUERY_FUNCTION) :: a_
PROCEDURE(MPI_GREQUEST_FREE_FUNCTION) :: b_
PROCEDURE(MPI_GREQUEST_CANCEL_FUNCTION) :: c_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_GREQUEST_START

m4_define([_MPI_F08_GROUP_COMPARE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Group_compare,&
&profiling_procedure => PMPI_Group_compare
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_, b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GROUP_COMPARE

m4_define([_MPI_F08_GROUP_DIFFERENCE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Group_difference,&
&profiling_procedure => PMPI_Group_difference
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_, b_
TYPE(MPI_GROUP), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GROUP_DIFFERENCE

m4_define([_MPI_F08_GROUP_EXCL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Group_excl,&
&profiling_procedure => PMPI_Group_excl
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
TYPE(MPI_GROUP), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_GROUP_EXCL

m4_define([_MPI_F08_GROUP_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Group_free,&
&profiling_procedure => PMPI_Group_free
implicit none

TYPE(MPI_GROUP), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_GROUP_FREE

m4_define([_MPI_F08_GROUP_FROM_SESSION_PSET], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Group_from_session_pset,&
&profiling_procedure => PMPI_Group_from_session_pset
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
TYPE(MPI_GROUP), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GROUP_FROM_SESSION_PSET

m4_define([_MPI_F08_GROUP_INCL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Group_incl,&
&profiling_procedure => PMPI_Group_incl
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
TYPE(MPI_GROUP), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_GROUP_INCL

m4_define([_MPI_F08_GROUP_INTERSECTION], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Group_intersection,&
&profiling_procedure => PMPI_Group_intersection
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_, b_
TYPE(MPI_GROUP), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GROUP_INTERSECTION

m4_define([_MPI_F08_GROUP_RANGE_EXCL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Group_range_excl,&
&profiling_procedure => PMPI_Group_range_excl
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(3,b_), INTENT(IN) :: c_
TYPE(MPI_GROUP), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_GROUP_RANGE_EXCL

m4_define([_MPI_F08_GROUP_RANGE_INCL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Group_range_incl,&
&profiling_procedure => PMPI_Group_range_incl
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(3,b_), INTENT(IN) :: c_
TYPE(MPI_GROUP), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_GROUP_RANGE_INCL

m4_define([_MPI_F08_GROUP_RANK], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Group_rank,&
&profiling_procedure => PMPI_Group_rank
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_GROUP_RANK

m4_define([_MPI_F08_GROUP_SIZE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Group_size,&
&profiling_procedure => PMPI_Group_size
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_GROUP_SIZE

m4_define([_MPI_F08_GROUP_TRANSLATE_RANKS], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Group_translate_ranks,&
&profiling_procedure => PMPI_Group_translate_ranks
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_, d_
INTEGER, INTENT(IN) :: b_
INTEGER, DIMENSION(b_), INTENT(IN) :: c_
INTEGER, DIMENSION(b_), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_GROUP_TRANSLATE_RANKS

m4_define([_MPI_F08_GROUP_UNION], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Group_union,&
&profiling_procedure => PMPI_Group_union
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_, b_
TYPE(MPI_GROUP), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_GROUP_UNION

m4_define([_MPI_F08_IALLGATHER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Iallgather,&
&profiling_procedure => PMPI_Iallgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_IALLGATHER

m4_define([_MPI_F08_IALLGATHER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Iallgather,&
&profiling_procedure => PMPI_Iallgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_IALLGATHER_C

m4_define([_MPI_F08_IALLGATHERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Iallgatherv,&
&profiling_procedure => PMPI_Iallgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_IALLGATHERV

m4_define([_MPI_F08_IALLGATHERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Iallgatherv,&
&profiling_procedure => PMPI_Iallgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_IALLGATHERV_C

m4_define([_MPI_F08_IALLREDUCE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Iallreduce,&
&profiling_procedure => PMPI_Iallreduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IALLREDUCE

m4_define([_MPI_F08_IALLREDUCE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Iallreduce,&
&profiling_procedure => PMPI_Iallreduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IALLREDUCE_C

m4_define([_MPI_F08_IALLTOALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ialltoall,&
&profiling_procedure => PMPI_Ialltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_IALLTOALL

m4_define([_MPI_F08_IALLTOALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ialltoall,&
&profiling_procedure => PMPI_Ialltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_IALLTOALL_C

m4_define([_MPI_F08_IALLTOALLV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ialltoallv,&
&profiling_procedure => PMPI_Ialltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_IALLTOALLV

m4_define([_MPI_F08_IALLTOALLV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ialltoallv,&
&profiling_procedure => PMPI_Ialltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_IALLTOALLV_C

m4_define([_MPI_F08_IALLTOALLW], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ialltoallw,&
&profiling_procedure => PMPI_Ialltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_IALLTOALLW

m4_define([_MPI_F08_IALLTOALLW_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ialltoallw,&
&profiling_procedure => PMPI_Ialltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_IALLTOALLW_C

m4_define([_MPI_F08_IBARRIER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Ibarrier,&
&profiling_procedure => PMPI_Ibarrier
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
TYPE(MPI_REQUEST), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_IBARRIER

m4_define([_MPI_F08_IBCAST], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Ibcast,&
&profiling_procedure => PMPI_Ibcast
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_IBCAST

m4_define([_MPI_F08_IBCAST_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Ibcast,&
&profiling_procedure => PMPI_Ibcast
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: e_
TYPE(MPI_REQUEST), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_IBCAST_C

m4_define([_MPI_F08_IBSEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ibsend,&
&profiling_procedure => PMPI_Ibsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IBSEND

m4_define([_MPI_F08_IBSEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ibsend,&
&profiling_procedure => PMPI_Ibsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IBSEND_C

m4_define([_MPI_F08_IEXSCAN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Iexscan,&
&profiling_procedure => PMPI_Iexscan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IEXSCAN

m4_define([_MPI_F08_IEXSCAN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Iexscan,&
&profiling_procedure => PMPI_Iexscan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IEXSCAN_C

m4_define([_MPI_F08_IGATHER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Igather,&
&profiling_procedure => PMPI_Igather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_IGATHER

m4_define([_MPI_F08_IGATHER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Igather,&
&profiling_procedure => PMPI_Igather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_IGATHER_C

m4_define([_MPI_F08_IGATHERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Igatherv,&
&profiling_procedure => PMPI_Igatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, h_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_IGATHERV

m4_define([_MPI_F08_IGATHERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Igatherv,&
&profiling_procedure => PMPI_Igatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: f_
INTEGER, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_IGATHERV_C

m4_define([_MPI_F08_IMPROBE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Improbe,&
&profiling_procedure => PMPI_Improbe
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_COMM), INTENT(IN) :: c_
LOGICAL, INTENT(OUT) :: d_
TYPE(MPI_MESSAGE), INTENT(OUT) :: e_
TYPE(MPI_STATUS) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_IMPROBE

m4_define([_MPI_F08_IMRECV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Imrecv,&
&profiling_procedure => PMPI_Imrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_MESSAGE), INTENT(INOUT) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_IMRECV

m4_define([_MPI_F08_IMRECV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Imrecv,&
&profiling_procedure => PMPI_Imrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_MESSAGE), INTENT(INOUT) :: d_
TYPE(MPI_REQUEST), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_IMRECV_C

m4_define([_MPI_F08_INEIGHBOR_ALLGATHER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_allgather,&
&profiling_procedure => PMPI_Ineighbor_allgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLGATHER

m4_define([_MPI_F08_INEIGHBOR_ALLGATHER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_allgather,&
&profiling_procedure => PMPI_Ineighbor_allgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLGATHER_C

m4_define([_MPI_F08_INEIGHBOR_ALLGATHERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_allgatherv,&
&profiling_procedure => PMPI_Ineighbor_allgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLGATHERV

m4_define([_MPI_F08_INEIGHBOR_ALLGATHERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_allgatherv,&
&profiling_procedure => PMPI_Ineighbor_allgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLGATHERV_C

m4_define([_MPI_F08_INEIGHBOR_ALLTOALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_alltoall,&
&profiling_procedure => PMPI_Ineighbor_alltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLTOALL

m4_define([_MPI_F08_INEIGHBOR_ALLTOALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_alltoall,&
&profiling_procedure => PMPI_Ineighbor_alltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLTOALL_C

m4_define([_MPI_F08_INEIGHBOR_ALLTOALLV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_alltoallv,&
&profiling_procedure => PMPI_Ineighbor_alltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLTOALLV

m4_define([_MPI_F08_INEIGHBOR_ALLTOALLV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_alltoallv,&
&profiling_procedure => PMPI_Ineighbor_alltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLTOALLV_C

m4_define([_MPI_F08_INEIGHBOR_ALLTOALLW], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_alltoallw,&
&profiling_procedure => PMPI_Ineighbor_alltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLTOALLW

m4_define([_MPI_F08_INEIGHBOR_ALLTOALLW_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Ineighbor_alltoallw,&
&profiling_procedure => PMPI_Ineighbor_alltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_INEIGHBOR_ALLTOALLW_C

m4_define([_MPI_F08_INFO_CREATE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Info_create,&
&profiling_procedure => PMPI_Info_create
implicit none

TYPE(MPI_INFO), INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_INFO_CREATE

m4_define([_MPI_F08_INFO_CREATE_ENV], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Info_create_env,&
&profiling_procedure => PMPI_Info_create_env
implicit none

TYPE(MPI_INFO), INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_INFO_CREATE_ENV

m4_define([_MPI_F08_INFO_DELETE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Info_delete,&
&profiling_procedure => PMPI_Info_delete
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_INFO_DELETE

m4_define([_MPI_F08_INFO_DUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Info_dup,&
&profiling_procedure => PMPI_Info_dup
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_INFO_DUP

m4_define([_MPI_F08_INFO_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Info_free,&
&profiling_procedure => PMPI_Info_free
implicit none

TYPE(MPI_INFO), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_INFO_FREE

m4_define([_MPI_F08_INFO_GET], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Info_get,&
&profiling_procedure => PMPI_Info_get
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
CHARACTER(LEN=c_), INTENT(OUT) :: d_
LOGICAL, INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_INFO_GET

m4_define([_MPI_F08_INFO_GET_NKEYS], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Info_get_nkeys,&
&profiling_procedure => PMPI_Info_get_nkeys
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_INFO_GET_NKEYS

m4_define([_MPI_F08_INFO_GET_NTHKEY], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Info_get_nthkey,&
&profiling_procedure => PMPI_Info_get_nthkey
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
CHARACTER(LEN=*), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_INFO_GET_NTHKEY

m4_define([_MPI_F08_INFO_GET_STRING], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Info_get_string,&
&profiling_procedure => PMPI_Info_get_string
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(INOUT) :: c_
CHARACTER(LEN=*), INTENT(OUT) :: d_
LOGICAL, INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_INFO_GET_STRING

m4_define([_MPI_F08_INFO_GET_VALUELEN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Info_get_valuelen,&
&profiling_procedure => PMPI_Info_get_valuelen
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(OUT) :: c_
LOGICAL, INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_INFO_GET_VALUELEN

m4_define([_MPI_F08_INFO_SET], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Info_set,&
&profiling_procedure => PMPI_Info_set
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_INFO_SET

m4_define([_MPI_F08_INIT], [[subroutine check_f08_sym(a_)
use :: mpi_f08, this_procedure => MPI_Init,&
&profiling_procedure => PMPI_Init
implicit none

INTEGER, INTENT(OUT), OPTIONAL :: a_

call this_procedure(a_)
end subroutine]]
)dnl _MPI_F08_INIT

m4_define([_MPI_F08_INIT_THREAD], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Init_thread,&
&profiling_procedure => PMPI_Init_thread
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_INIT_THREAD

m4_define([_MPI_F08_INITIALIZED], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Initialized,&
&profiling_procedure => PMPI_Initialized
implicit none

LOGICAL, INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_INITIALIZED

m4_define([_MPI_F08_INTERCOMM_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Intercomm_create,&
&profiling_procedure => PMPI_Intercomm_create
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_, c_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_COMM), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_INTERCOMM_CREATE

m4_define([_MPI_F08_INTERCOMM_CREATE_FROM_GROUPS], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Intercomm_create_from_groups,&
&profiling_procedure => PMPI_Intercomm_create_from_groups
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_, c_
INTEGER, INTENT(IN) :: b_, d_
CHARACTER(LEN=*), INTENT(IN) :: e_
TYPE(MPI_INFO), INTENT(IN) :: f_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_INTERCOMM_CREATE_FROM_GROUPS

m4_define([_MPI_F08_INTERCOMM_MERGE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Intercomm_merge,&
&profiling_procedure => PMPI_Intercomm_merge
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
LOGICAL, INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_INTERCOMM_MERGE

m4_define([_MPI_F08_IPROBE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Iprobe,&
&profiling_procedure => PMPI_Iprobe
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_COMM), INTENT(IN) :: c_
LOGICAL, INTENT(OUT) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_IPROBE

m4_define([_MPI_F08_IRECV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Irecv,&
&profiling_procedure => PMPI_Irecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IRECV

m4_define([_MPI_F08_IRECV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Irecv,&
&profiling_procedure => PMPI_Irecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IRECV_C

m4_define([_MPI_F08_IREDUCE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ireduce,&
&profiling_procedure => PMPI_Ireduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_IREDUCE

m4_define([_MPI_F08_IREDUCE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Ireduce,&
&profiling_procedure => PMPI_Ireduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
INTEGER, INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_IREDUCE_C

m4_define([_MPI_F08_IREDUCE_SCATTER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ireduce_scatter,&
&profiling_procedure => PMPI_Ireduce_scatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IREDUCE_SCATTER

m4_define([_MPI_F08_IREDUCE_SCATTER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ireduce_scatter,&
&profiling_procedure => PMPI_Ireduce_scatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IREDUCE_SCATTER_C

m4_define([_MPI_F08_IREDUCE_SCATTER_BLOCK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ireduce_scatter_block,&
&profiling_procedure => PMPI_Ireduce_scatter_block
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IREDUCE_SCATTER_BLOCK

m4_define([_MPI_F08_IREDUCE_SCATTER_BLOCK_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ireduce_scatter_block,&
&profiling_procedure => PMPI_Ireduce_scatter_block
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IREDUCE_SCATTER_BLOCK_C

m4_define([_MPI_F08_IRSEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Irsend,&
&profiling_procedure => PMPI_Irsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IRSEND

m4_define([_MPI_F08_IRSEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Irsend,&
&profiling_procedure => PMPI_Irsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_IRSEND_C

m4_define([_MPI_F08_IS_THREAD_MAIN], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Is_thread_main,&
&profiling_procedure => PMPI_Is_thread_main
implicit none

LOGICAL, INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_IS_THREAD_MAIN

m4_define([_MPI_F08_ISCAN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Iscan,&
&profiling_procedure => PMPI_Iscan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ISCAN

m4_define([_MPI_F08_ISCAN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Iscan,&
&profiling_procedure => PMPI_Iscan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ISCAN_C

m4_define([_MPI_F08_ISCATTER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Iscatter,&
&profiling_procedure => PMPI_Iscatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ISCATTER

m4_define([_MPI_F08_ISCATTER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Iscatter,&
&profiling_procedure => PMPI_Iscatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ISCATTER_C

m4_define([_MPI_F08_ISCATTERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Iscatterv,&
&profiling_procedure => PMPI_Iscatterv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
INTEGER, INTENT(IN) :: f_, h_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_ISCATTERV

m4_define([_MPI_F08_ISCATTERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Iscatterv,&
&profiling_procedure => PMPI_Iscatterv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: f_
INTEGER, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_ISCATTERV_C

m4_define([_MPI_F08_ISEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Isend,&
&profiling_procedure => PMPI_Isend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ISEND

m4_define([_MPI_F08_ISEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Isend,&
&profiling_procedure => PMPI_Isend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ISEND_C

m4_define([_MPI_F08_ISENDRECV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
use :: mpi_f08, this_procedure => MPI_Isendrecv,&
&profiling_procedure => PMPI_Isendrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_, g_, i_, j_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: f_
TYPE(MPI_COMM), INTENT(IN) :: k_
TYPE(MPI_REQUEST), INTENT(OUT) :: l_
INTEGER, INTENT(OUT), OPTIONAL :: m_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
end subroutine]]
)dnl _MPI_F08_ISENDRECV

m4_define([_MPI_F08_ISENDRECV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
use :: mpi_f08, this_procedure => MPI_Isendrecv,&
&profiling_procedure => PMPI_Isendrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, h_
INTEGER, INTENT(IN) :: d_, e_, i_, j_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: f_
TYPE(MPI_COMM), INTENT(IN) :: k_
TYPE(MPI_REQUEST), INTENT(OUT) :: l_
INTEGER, INTENT(OUT), OPTIONAL :: m_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
end subroutine]]
)dnl _MPI_F08_ISENDRECV_C

m4_define([_MPI_F08_ISENDRECV_REPLACE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Isendrecv_replace,&
&profiling_procedure => PMPI_Isendrecv_replace
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ISENDRECV_REPLACE

m4_define([_MPI_F08_ISENDRECV_REPLACE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Isendrecv_replace,&
&profiling_procedure => PMPI_Isendrecv_replace
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_, f_, g_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_ISENDRECV_REPLACE_C

m4_define([_MPI_F08_ISSEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Issend,&
&profiling_procedure => PMPI_Issend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ISSEND

m4_define([_MPI_F08_ISSEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Issend,&
&profiling_procedure => PMPI_Issend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_ISSEND_C

m4_define([_MPI_F08_LOOKUP_NAME], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Lookup_name,&
&profiling_procedure => PMPI_Lookup_name
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_LOOKUP_NAME

m4_define([_MPI_F08_MPROBE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Mprobe,&
&profiling_procedure => PMPI_Mprobe
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_COMM), INTENT(IN) :: c_
TYPE(MPI_MESSAGE), INTENT(OUT) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_MPROBE

m4_define([_MPI_F08_MRECV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Mrecv,&
&profiling_procedure => PMPI_Mrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_MESSAGE), INTENT(INOUT) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_MRECV

m4_define([_MPI_F08_MRECV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Mrecv,&
&profiling_procedure => PMPI_Mrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_MESSAGE), INTENT(INOUT) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_MRECV_C

m4_define([_MPI_F08_NEIGHBOR_ALLGATHER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgather,&
&profiling_procedure => PMPI_Neighbor_allgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHER

m4_define([_MPI_F08_NEIGHBOR_ALLGATHER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgather,&
&profiling_procedure => PMPI_Neighbor_allgather
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHER_C

m4_define([_MPI_F08_NEIGHBOR_ALLGATHER_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgather_init,&
&profiling_procedure => PMPI_Neighbor_allgather_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHER_INIT

m4_define([_MPI_F08_NEIGHBOR_ALLGATHER_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgather_init,&
&profiling_procedure => PMPI_Neighbor_allgather_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHER_INIT_C

m4_define([_MPI_F08_NEIGHBOR_ALLGATHERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgatherv,&
&profiling_procedure => PMPI_Neighbor_allgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*) :: d_
INTEGER, DIMENSION(*), INTENT(IN) :: e_, f_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHERV

m4_define([_MPI_F08_NEIGHBOR_ALLGATHERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgatherv,&
&profiling_procedure => PMPI_Neighbor_allgatherv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*) :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHERV_C

m4_define([_MPI_F08_NEIGHBOR_ALLGATHERV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgatherv_init,&
&profiling_procedure => PMPI_Neighbor_allgatherv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER, DIMENSION(*), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHERV_INIT

m4_define([_MPI_F08_NEIGHBOR_ALLGATHERV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Neighbor_allgatherv_init,&
&profiling_procedure => PMPI_Neighbor_allgatherv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLGATHERV_INIT_C

m4_define([_MPI_F08_NEIGHBOR_ALLTOALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoall,&
&profiling_procedure => PMPI_Neighbor_alltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALL

m4_define([_MPI_F08_NEIGHBOR_ALLTOALL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoall,&
&profiling_procedure => PMPI_Neighbor_alltoall
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALL_C

m4_define([_MPI_F08_NEIGHBOR_ALLTOALL_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoall_init,&
&profiling_procedure => PMPI_Neighbor_alltoall_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALL_INIT

m4_define([_MPI_F08_NEIGHBOR_ALLTOALL_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoall_init,&
&profiling_procedure => PMPI_Neighbor_alltoall_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALL_INIT_C

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallv,&
&profiling_procedure => PMPI_Neighbor_alltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, DIMENSION(*), INTENT(IN) :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLV

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallv,&
&profiling_procedure => PMPI_Neighbor_alltoallv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: c_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLV_C

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallv_init,&
&profiling_procedure => PMPI_Neighbor_alltoallv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLV_INIT

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallv_init,&
&profiling_procedure => PMPI_Neighbor_alltoallv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLV_INIT_C

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLW], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallw,&
&profiling_procedure => PMPI_Neighbor_alltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, DIMENSION(*), INTENT(IN) :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLW

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLW_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallw,&
&profiling_procedure => PMPI_Neighbor_alltoallw
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN) :: d_, h_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLW_C

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLW_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallw_init,&
&profiling_procedure => PMPI_Neighbor_alltoallw_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLW_INIT

m4_define([_MPI_F08_NEIGHBOR_ALLTOALLW_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Neighbor_alltoallw_init,&
&profiling_procedure => PMPI_Neighbor_alltoallw_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_, g_
TYPE(MPI_DATATYPE), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: d_, h_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_NEIGHBOR_ALLTOALLW_INIT_C

m4_define([_MPI_F08_OP_COMMUTATIVE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Op_commutative,&
&profiling_procedure => PMPI_Op_commutative
implicit none

TYPE(MPI_OP), INTENT(IN) :: a_
LOGICAL, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_OP_COMMUTATIVE

m4_define([_MPI_F08_OP_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Op_create,&
&profiling_procedure => PMPI_Op_create
implicit none

PROCEDURE(MPI_USER_FUNCTION) :: a_
LOGICAL, INTENT(IN) :: b_
TYPE(MPI_OP), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_OP_CREATE

m4_define([_MPI_F08_OP_CREATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Op_create_c,&
&profiling_procedure => PMPI_Op_create_c
implicit none

PROCEDURE(MPI_USER_FUNCTION_C) :: a_
LOGICAL, INTENT(IN) :: b_
TYPE(MPI_OP), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_OP_CREATE_C

m4_define([_MPI_F08_OP_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Op_free,&
&profiling_procedure => PMPI_Op_free
implicit none

TYPE(MPI_OP), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_OP_FREE

m4_define([_MPI_F08_OPEN_PORT], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Open_port,&
&profiling_procedure => PMPI_Open_port
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_OPEN_PORT

m4_define([_MPI_F08_PACK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Pack,&
&profiling_procedure => PMPI_Pack
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
type(mytype), DIMENSION(*) :: d_
INTEGER, INTENT(INOUT) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_PACK

m4_define([_MPI_F08_PACK_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Pack,&
&profiling_procedure => PMPI_Pack
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
type(mytype), DIMENSION(*) :: d_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_PACK_C

m4_define([_MPI_F08_PACK_EXTERNAL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Pack_external,&
&profiling_procedure => PMPI_Pack_external
implicit none

type mytype
integer :: value
end type

CHARACTER(LEN=*), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
type(mytype), DIMENSION(*) :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: f_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_PACK_EXTERNAL

m4_define([_MPI_F08_PACK_EXTERNAL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Pack_external,&
&profiling_procedure => PMPI_Pack_external
implicit none

type mytype
integer :: value
end type

CHARACTER(LEN=*), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
type(mytype), DIMENSION(*) :: e_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_PACK_EXTERNAL_C

m4_define([_MPI_F08_PACK_EXTERNAL_SIZE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Pack_external_size,&
&profiling_procedure => PMPI_Pack_external_size
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_PACK_EXTERNAL_SIZE

m4_define([_MPI_F08_PACK_EXTERNAL_SIZE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Pack_external_size,&
&profiling_procedure => PMPI_Pack_external_size
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_PACK_EXTERNAL_SIZE_C

m4_define([_MPI_F08_PACK_SIZE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Pack_size,&
&profiling_procedure => PMPI_Pack_size
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(IN) :: c_
INTEGER, INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_PACK_SIZE

m4_define([_MPI_F08_PACK_SIZE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Pack_size,&
&profiling_procedure => PMPI_Pack_size
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
TYPE(MPI_COMM), INTENT(IN) :: c_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_PACK_SIZE_C

m4_define([_MPI_F08_PARRIVED], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Parrived,&
&profiling_procedure => PMPI_Parrived
implicit none

TYPE(MPI_REQUEST), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
LOGICAL, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_PARRIVED

m4_define([_MPI_F08_PREADY], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Pready,&
&profiling_procedure => PMPI_Pready
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_PREADY

m4_define([_MPI_F08_PREADY_LIST], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Pready_list,&
&profiling_procedure => PMPI_Pready_list
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, DIMENSION(a_), INTENT(IN) :: b_
TYPE(MPI_REQUEST), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_PREADY_LIST

m4_define([_MPI_F08_PREADY_RANGE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Pready_range,&
&profiling_procedure => PMPI_Pready_range
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_REQUEST), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_PREADY_RANGE

m4_define([_MPI_F08_PRECV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Precv_init,&
&profiling_procedure => PMPI_Precv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_, f_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_PRECV_INIT

m4_define([_MPI_F08_PROBE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Probe,&
&profiling_procedure => PMPI_Probe
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_COMM), INTENT(IN) :: c_
TYPE(MPI_STATUS) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_PROBE

m4_define([_MPI_F08_PSEND_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Psend_init,&
&profiling_procedure => PMPI_Psend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_, f_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_PSEND_INIT

m4_define([_MPI_F08_PUBLISH_NAME], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Publish_name,&
&profiling_procedure => PMPI_Publish_name
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_, c_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_PUBLISH_NAME

m4_define([_MPI_F08_PUT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Put,&
&profiling_procedure => PMPI_Put
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_PUT

m4_define([_MPI_F08_PUT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Put,&
&profiling_procedure => PMPI_Put
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_PUT_C

m4_define([_MPI_F08_QUERY_THREAD], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Query_thread,&
&profiling_procedure => PMPI_Query_thread
implicit none

INTEGER, INTENT(OUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_QUERY_THREAD

m4_define([_MPI_F08_RACCUMULATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Raccumulate,&
&profiling_procedure => PMPI_Raccumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_OP), INTENT(IN) :: h_
TYPE(MPI_WIN), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_RACCUMULATE

m4_define([_MPI_F08_RACCUMULATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Raccumulate,&
&profiling_procedure => PMPI_Raccumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_OP), INTENT(IN) :: h_
TYPE(MPI_WIN), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_RACCUMULATE_C

m4_define([_MPI_F08_RECV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Recv,&
&profiling_procedure => PMPI_Recv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_STATUS) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_RECV

m4_define([_MPI_F08_RECV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Recv,&
&profiling_procedure => PMPI_Recv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_STATUS) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_RECV_C

m4_define([_MPI_F08_RECV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Recv_init,&
&profiling_procedure => PMPI_Recv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_RECV_INIT

m4_define([_MPI_F08_RECV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Recv_init,&
&profiling_procedure => PMPI_Recv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_RECV_INIT_C

m4_define([_MPI_F08_REDUCE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Reduce,&
&profiling_procedure => PMPI_Reduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_REDUCE

m4_define([_MPI_F08_REDUCE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Reduce,&
&profiling_procedure => PMPI_Reduce
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
INTEGER, INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_REDUCE_C

m4_define([_MPI_F08_REDUCE_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Reduce_init,&
&profiling_procedure => PMPI_Reduce_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_REDUCE_INIT

m4_define([_MPI_F08_REDUCE_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Reduce_init,&
&profiling_procedure => PMPI_Reduce_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
INTEGER, INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
TYPE(MPI_INFO), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_REDUCE_INIT_C

m4_define([_MPI_F08_REDUCE_LOCAL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Reduce_local,&
&profiling_procedure => PMPI_Reduce_local
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_REDUCE_LOCAL

m4_define([_MPI_F08_REDUCE_LOCAL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Reduce_local,&
&profiling_procedure => PMPI_Reduce_local
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_REDUCE_LOCAL_C

m4_define([_MPI_F08_REDUCE_SCATTER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter,&
&profiling_procedure => PMPI_Reduce_scatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, DIMENSION(*), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER

m4_define([_MPI_F08_REDUCE_SCATTER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter,&
&profiling_procedure => PMPI_Reduce_scatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_C

m4_define([_MPI_F08_REDUCE_SCATTER_BLOCK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter_block,&
&profiling_procedure => PMPI_Reduce_scatter_block
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_BLOCK

m4_define([_MPI_F08_REDUCE_SCATTER_BLOCK_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter_block,&
&profiling_procedure => PMPI_Reduce_scatter_block
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_BLOCK_C

m4_define([_MPI_F08_REDUCE_SCATTER_BLOCK_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter_block_init,&
&profiling_procedure => PMPI_Reduce_scatter_block_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_BLOCK_INIT

m4_define([_MPI_F08_REDUCE_SCATTER_BLOCK_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter_block_init,&
&profiling_procedure => PMPI_Reduce_scatter_block_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_BLOCK_INIT_C

m4_define([_MPI_F08_REDUCE_SCATTER_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter_init,&
&profiling_procedure => PMPI_Reduce_scatter_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_INIT

m4_define([_MPI_F08_REDUCE_SCATTER_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Reduce_scatter_init,&
&profiling_procedure => PMPI_Reduce_scatter_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_REDUCE_SCATTER_INIT_C

m4_define([_MPI_F08_REGISTER_DATAREP], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Register_datarep,&
&profiling_procedure => PMPI_Register_datarep
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
PROCEDURE(MPI_DATAREP_CONVERSION_FUNCTION) :: b_, c_
PROCEDURE(MPI_DATAREP_EXTENT_FUNCTION) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_REGISTER_DATAREP

m4_define([_MPI_F08_REGISTER_DATAREP_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Register_datarep_c,&
&profiling_procedure => PMPI_Register_datarep_c
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_
PROCEDURE(MPI_DATAREP_CONVERSION_FUNCTION_C) :: b_, c_
PROCEDURE(MPI_DATAREP_EXTENT_FUNCTION) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_REGISTER_DATAREP_C

m4_define([_MPI_F08_REQUEST_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Request_free,&
&profiling_procedure => PMPI_Request_free
implicit none

TYPE(MPI_REQUEST), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_REQUEST_FREE

m4_define([_MPI_F08_REQUEST_GET_STATUS], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Request_get_status,&
&profiling_procedure => PMPI_Request_get_status
implicit none

TYPE(MPI_REQUEST), INTENT(IN) :: a_
LOGICAL, INTENT(OUT) :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_REQUEST_GET_STATUS

m4_define([_MPI_F08_RGET], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Rget,&
&profiling_procedure => PMPI_Rget
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_RGET

m4_define([_MPI_F08_RGET_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Rget,&
&profiling_procedure => PMPI_Rget
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_RGET_C

m4_define([_MPI_F08_RGET_ACCUMULATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_,n_)
use :: mpi_f08, this_procedure => MPI_Rget_accumulate,&
&profiling_procedure => PMPI_Rget_accumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_, g_, i_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_, j_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: h_
TYPE(MPI_OP), INTENT(IN) :: k_
TYPE(MPI_WIN), INTENT(IN) :: l_
TYPE(MPI_REQUEST), INTENT(OUT) :: m_
INTEGER, INTENT(OUT), OPTIONAL :: n_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_,n_)
end subroutine]]
)dnl _MPI_F08_RGET_ACCUMULATE

m4_define([_MPI_F08_RGET_ACCUMULATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_,n_)
use :: mpi_f08, this_procedure => MPI_Rget_accumulate,&
&profiling_procedure => PMPI_Rget_accumulate
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_, i_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_, j_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, INTENT(IN) :: g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: h_
TYPE(MPI_OP), INTENT(IN) :: k_
TYPE(MPI_WIN), INTENT(IN) :: l_
TYPE(MPI_REQUEST), INTENT(OUT) :: m_
INTEGER, INTENT(OUT), OPTIONAL :: n_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_,n_)
end subroutine]]
)dnl _MPI_F08_RGET_ACCUMULATE_C

m4_define([_MPI_F08_RPUT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Rput,&
&profiling_procedure => PMPI_Rput
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_RPUT

m4_define([_MPI_F08_RPUT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Rput,&
&profiling_procedure => PMPI_Rput
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, f_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, g_
INTEGER, INTENT(IN) :: d_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(IN) :: h_
TYPE(MPI_REQUEST), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_RPUT_C

m4_define([_MPI_F08_RSEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Rsend,&
&profiling_procedure => PMPI_Rsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_RSEND

m4_define([_MPI_F08_RSEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Rsend,&
&profiling_procedure => PMPI_Rsend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_RSEND_C

m4_define([_MPI_F08_RSEND_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Rsend_init,&
&profiling_procedure => PMPI_Rsend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_RSEND_INIT

m4_define([_MPI_F08_RSEND_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Rsend_init,&
&profiling_procedure => PMPI_Rsend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_RSEND_INIT_C

m4_define([_MPI_F08_SCAN], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Scan,&
&profiling_procedure => PMPI_Scan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_SCAN

m4_define([_MPI_F08_SCAN_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Scan,&
&profiling_procedure => PMPI_Scan
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
type(mytype), DIMENSION(*) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_SCAN_C

m4_define([_MPI_F08_SCAN_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Scan_init,&
&profiling_procedure => PMPI_Scan_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_SCAN_INIT

m4_define([_MPI_F08_SCAN_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Scan_init,&
&profiling_procedure => PMPI_Scan_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_OP), INTENT(IN) :: e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_INFO), INTENT(IN) :: g_
TYPE(MPI_REQUEST), INTENT(OUT) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_SCAN_INIT_C

m4_define([_MPI_F08_SCATTER], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Scatter,&
&profiling_procedure => PMPI_Scatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_SCATTER

m4_define([_MPI_F08_SCATTER_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_)
use :: mpi_f08, this_procedure => MPI_Scatter,&
&profiling_procedure => PMPI_Scatter
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*) :: d_
INTEGER, INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(IN) :: h_
INTEGER, INTENT(OUT), OPTIONAL :: i_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end subroutine]]
)dnl _MPI_F08_SCATTER_C

m4_define([_MPI_F08_SCATTER_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Scatter_init,&
&profiling_procedure => PMPI_Scatter_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, e_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_SCATTER_INIT

m4_define([_MPI_F08_SCATTER_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Scatter_init,&
&profiling_procedure => PMPI_Scatter_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, f_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: d_
INTEGER, INTENT(IN) :: g_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_INFO), INTENT(IN) :: i_
TYPE(MPI_REQUEST), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_SCATTER_INIT_C

m4_define([_MPI_F08_SCATTERV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Scatterv,&
&profiling_procedure => PMPI_Scatterv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, DIMENSION(*), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, g_
type(mytype), DIMENSION(*) :: e_
INTEGER, INTENT(IN) :: f_, h_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_SCATTERV

m4_define([_MPI_F08_SCATTERV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Scatterv,&
&profiling_procedure => PMPI_Scatterv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, g_
type(mytype), DIMENSION(*) :: e_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: f_
INTEGER, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(IN) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_SCATTERV_C

m4_define([_MPI_F08_SCATTERV_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Scatterv_init,&
&profiling_procedure => PMPI_Scatterv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
INTEGER, INTENT(IN) :: f_, h_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_SCATTERV_INIT

m4_define([_MPI_F08_SCATTERV_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
use :: mpi_f08, this_procedure => MPI_Scatterv_init,&
&profiling_procedure => PMPI_Scatterv_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_, g_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: e_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: f_
INTEGER, INTENT(IN) :: h_
TYPE(MPI_COMM), INTENT(IN) :: i_
TYPE(MPI_INFO), INTENT(IN) :: j_
TYPE(MPI_REQUEST), INTENT(OUT) :: k_
INTEGER, INTENT(OUT), OPTIONAL :: l_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_)
end subroutine]]
)dnl _MPI_F08_SCATTERV_INIT_C

m4_define([_MPI_F08_SEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Send,&
&profiling_procedure => PMPI_Send
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_SEND

m4_define([_MPI_F08_SEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Send,&
&profiling_procedure => PMPI_Send
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_SEND_C

m4_define([_MPI_F08_SEND_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Send_init,&
&profiling_procedure => PMPI_Send_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_SEND_INIT

m4_define([_MPI_F08_SEND_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Send_init,&
&profiling_procedure => PMPI_Send_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_SEND_INIT_C

m4_define([_MPI_F08_SENDRECV], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
use :: mpi_f08, this_procedure => MPI_Sendrecv,&
&profiling_procedure => PMPI_Sendrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_, g_, i_, j_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, h_
type(mytype), DIMENSION(*) :: f_
TYPE(MPI_COMM), INTENT(IN) :: k_
TYPE(MPI_STATUS) :: l_
INTEGER, INTENT(OUT), OPTIONAL :: m_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
end subroutine]]
)dnl _MPI_F08_SENDRECV

m4_define([_MPI_F08_SENDRECV_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
use :: mpi_f08, this_procedure => MPI_Sendrecv,&
&profiling_procedure => PMPI_Sendrecv
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_, h_
INTEGER, INTENT(IN) :: d_, e_, i_, j_
type(mytype), DIMENSION(*) :: f_
TYPE(MPI_COMM), INTENT(IN) :: k_
TYPE(MPI_STATUS) :: l_
INTEGER, INTENT(OUT), OPTIONAL :: m_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_,l_,m_)
end subroutine]]
)dnl _MPI_F08_SENDRECV_C

m4_define([_MPI_F08_SENDRECV_REPLACE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Sendrecv_replace,&
&profiling_procedure => PMPI_Sendrecv_replace
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_STATUS) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_SENDRECV_REPLACE

m4_define([_MPI_F08_SENDRECV_REPLACE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Sendrecv_replace,&
&profiling_procedure => PMPI_Sendrecv_replace
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_, f_, g_
TYPE(MPI_COMM), INTENT(IN) :: h_
TYPE(MPI_STATUS) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_SENDRECV_REPLACE_C

m4_define([_MPI_F08_SESSION_CALL_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Session_call_errhandler,&
&profiling_procedure => PMPI_Session_call_errhandler
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_SESSION_CALL_ERRHANDLER

m4_define([_MPI_F08_SESSION_CREATE_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Session_create_errhandler,&
&profiling_procedure => PMPI_Session_create_errhandler
implicit none

PROCEDURE(MPI_SESSION_ERRHANDLER_FUNCTION) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_SESSION_CREATE_ERRHANDLER

m4_define([_MPI_F08_SESSION_FINALIZE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Session_finalize,&
&profiling_procedure => PMPI_Session_finalize
implicit none

TYPE(MPI_SESSION), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_SESSION_FINALIZE

m4_define([_MPI_F08_SESSION_GET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Session_get_errhandler,&
&profiling_procedure => PMPI_Session_get_errhandler
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_SESSION_GET_ERRHANDLER

m4_define([_MPI_F08_SESSION_GET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Session_get_info,&
&profiling_procedure => PMPI_Session_get_info
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_SESSION_GET_INFO

m4_define([_MPI_F08_SESSION_GET_NTH_PSET], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Session_get_nth_pset,&
&profiling_procedure => PMPI_Session_get_nth_pset
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
INTEGER, INTENT(INOUT) :: d_
CHARACTER(LEN=*), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_SESSION_GET_NTH_PSET

m4_define([_MPI_F08_SESSION_GET_NUM_PSETS], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Session_get_num_psets,&
&profiling_procedure => PMPI_Session_get_num_psets
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_SESSION_GET_NUM_PSETS

m4_define([_MPI_F08_SESSION_GET_PSET_INFO], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Session_get_pset_info,&
&profiling_procedure => PMPI_Session_get_pset_info
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
TYPE(MPI_INFO), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_SESSION_GET_PSET_INFO

m4_define([_MPI_F08_SESSION_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Session_init,&
&profiling_procedure => PMPI_Session_init
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: b_
TYPE(MPI_SESSION), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_SESSION_INIT

m4_define([_MPI_F08_SESSION_SET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Session_set_errhandler,&
&profiling_procedure => PMPI_Session_set_errhandler
implicit none

TYPE(MPI_SESSION), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_SESSION_SET_ERRHANDLER

m4_define([_MPI_F08_SIZEOF], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Sizeof,&
&profiling_procedure => PMPI_Sizeof
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_SIZEOF

m4_define([_MPI_F08_SSEND], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Ssend,&
&profiling_procedure => PMPI_Ssend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_SSEND

m4_define([_MPI_F08_SSEND_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Ssend,&
&profiling_procedure => PMPI_Ssend
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_SSEND_C

m4_define([_MPI_F08_SSEND_INIT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ssend_init,&
&profiling_procedure => PMPI_Ssend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(IN) :: b_, d_, e_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_SSEND_INIT

m4_define([_MPI_F08_SSEND_INIT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Ssend_init,&
&profiling_procedure => PMPI_Ssend_init
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(IN) :: c_
INTEGER, INTENT(IN) :: d_, e_
TYPE(MPI_COMM), INTENT(IN) :: f_
TYPE(MPI_REQUEST), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_SSEND_INIT_C

m4_define([_MPI_F08_START], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Start,&
&profiling_procedure => PMPI_Start
implicit none

TYPE(MPI_REQUEST), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_START

m4_define([_MPI_F08_STARTALL], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Startall,&
&profiling_procedure => PMPI_Startall
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_STARTALL

m4_define([_MPI_F08_STATUS_F082F], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Status_f082f,&
&profiling_procedure => PMPI_Status_f082f
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
INTEGER, DIMENSION(MPI_STATUS_SIZE), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_STATUS_F082F

m4_define([_MPI_F08_STATUS_F2F08], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Status_f2f08,&
&profiling_procedure => PMPI_Status_f2f08
implicit none

INTEGER, DIMENSION(MPI_STATUS_SIZE), INTENT(IN) :: a_
TYPE(MPI_STATUS), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_STATUS_F2F08

m4_define([_MPI_F08_STATUS_SET_CANCELLED], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Status_set_cancelled,&
&profiling_procedure => PMPI_Status_set_cancelled
implicit none

TYPE(MPI_STATUS), INTENT(INOUT) :: a_
LOGICAL, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_STATUS_SET_CANCELLED

m4_define([_MPI_F08_STATUS_SET_ELEMENTS], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Status_set_elements,&
&profiling_procedure => PMPI_Status_set_elements
implicit none

TYPE(MPI_STATUS), INTENT(INOUT) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_STATUS_SET_ELEMENTS

m4_define([_MPI_F08_STATUS_SET_ELEMENTS_X], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Status_set_elements_x,&
&profiling_procedure => PMPI_Status_set_elements_x
implicit none

TYPE(MPI_STATUS), INTENT(INOUT) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_STATUS_SET_ELEMENTS_X

m4_define([_MPI_F08_TEST], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Test,&
&profiling_procedure => PMPI_Test
implicit none

TYPE(MPI_REQUEST), INTENT(INOUT) :: a_
LOGICAL, INTENT(OUT) :: b_
TYPE(MPI_STATUS) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TEST

m4_define([_MPI_F08_TEST_CANCELLED], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Test_cancelled,&
&profiling_procedure => PMPI_Test_cancelled
implicit none

TYPE(MPI_STATUS), INTENT(IN) :: a_
LOGICAL, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TEST_CANCELLED

m4_define([_MPI_F08_TESTALL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Testall,&
&profiling_procedure => PMPI_Testall
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
LOGICAL, INTENT(OUT) :: c_
TYPE(MPI_STATUS), DIMENSION(*) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_TESTALL

m4_define([_MPI_F08_TESTANY], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Testany,&
&profiling_procedure => PMPI_Testany
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
INTEGER, INTENT(OUT) :: c_
LOGICAL, INTENT(OUT) :: d_
TYPE(MPI_STATUS) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TESTANY

m4_define([_MPI_F08_TESTSOME], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Testsome,&
&profiling_procedure => PMPI_Testsome
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, DIMENSION(*), INTENT(OUT) :: d_
TYPE(MPI_STATUS), DIMENSION(*) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TESTSOME

m4_define([_MPI_F08_TOPO_TEST], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Topo_test,&
&profiling_procedure => PMPI_Topo_test
implicit none

TYPE(MPI_COMM), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TOPO_TEST

m4_define([_MPI_F08_TYPE_COMMIT], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Type_commit,&
&profiling_procedure => PMPI_Type_commit
implicit none

TYPE(MPI_DATATYPE), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_TYPE_COMMIT

m4_define([_MPI_F08_TYPE_CONTIGUOUS], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_contiguous,&
&profiling_procedure => PMPI_Type_contiguous
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_CONTIGUOUS

m4_define([_MPI_F08_TYPE_CONTIGUOUS_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_contiguous,&
&profiling_procedure => PMPI_Type_contiguous
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(IN) :: b_
TYPE(MPI_DATATYPE), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_CONTIGUOUS_C

m4_define([_MPI_F08_TYPE_CREATE_DARRAY], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Type_create_darray,&
&profiling_procedure => PMPI_Type_create_darray
implicit none

INTEGER, INTENT(IN) :: a_, b_, c_, h_
INTEGER, DIMENSION(c_), INTENT(IN) :: d_, e_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: i_
TYPE(MPI_DATATYPE), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_DARRAY

m4_define([_MPI_F08_TYPE_CREATE_DARRAY_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
use :: mpi_f08, this_procedure => MPI_Type_create_darray,&
&profiling_procedure => PMPI_Type_create_darray
implicit none

INTEGER, INTENT(IN) :: a_, b_, c_, h_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(c_), INTENT(IN) :: d_
INTEGER, DIMENSION(c_), INTENT(IN) :: e_, f_, g_
TYPE(MPI_DATATYPE), INTENT(IN) :: i_
TYPE(MPI_DATATYPE), INTENT(OUT) :: j_
INTEGER, INTENT(OUT), OPTIONAL :: k_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_,k_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_DARRAY_C

m4_define([_MPI_F08_TYPE_CREATE_F90_COMPLEX], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_create_f90_complex,&
&profiling_procedure => PMPI_Type_create_f90_complex
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_DATATYPE), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_F90_COMPLEX

m4_define([_MPI_F08_TYPE_CREATE_F90_INTEGER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_create_f90_integer,&
&profiling_procedure => PMPI_Type_create_f90_integer
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_F90_INTEGER

m4_define([_MPI_F08_TYPE_CREATE_F90_REAL], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_create_f90_real,&
&profiling_procedure => PMPI_Type_create_f90_real
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_DATATYPE), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_F90_REAL

m4_define([_MPI_F08_TYPE_CREATE_HINDEXED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_hindexed,&
&profiling_procedure => PMPI_Type_create_hindexed
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, DIMENSION(a_), INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(a_), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_HINDEXED

m4_define([_MPI_F08_TYPE_CREATE_HINDEXED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_hindexed,&
&profiling_procedure => PMPI_Type_create_hindexed
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(a_), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_HINDEXED_C

m4_define([_MPI_F08_TYPE_CREATE_HINDEXED_BLOCK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_hindexed_block,&
&profiling_procedure => PMPI_Type_create_hindexed_block
implicit none

INTEGER, INTENT(IN) :: a_, b_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(a_), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_HINDEXED_BLOCK

m4_define([_MPI_F08_TYPE_CREATE_HINDEXED_BLOCK_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_hindexed_block,&
&profiling_procedure => PMPI_Type_create_hindexed_block
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_, b_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(a_), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_HINDEXED_BLOCK_C

m4_define([_MPI_F08_TYPE_CREATE_HVECTOR], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_hvector,&
&profiling_procedure => PMPI_Type_create_hvector
implicit none

INTEGER, INTENT(IN) :: a_, b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_HVECTOR

m4_define([_MPI_F08_TYPE_CREATE_HVECTOR_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_hvector,&
&profiling_procedure => PMPI_Type_create_hvector
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_, b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_HVECTOR_C

m4_define([_MPI_F08_TYPE_CREATE_INDEXED_BLOCK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_indexed_block,&
&profiling_procedure => PMPI_Type_create_indexed_block
implicit none

INTEGER, INTENT(IN) :: a_, b_
INTEGER, DIMENSION(a_), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_INDEXED_BLOCK

m4_define([_MPI_F08_TYPE_CREATE_INDEXED_BLOCK_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_indexed_block,&
&profiling_procedure => PMPI_Type_create_indexed_block
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_, b_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(a_), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_INDEXED_BLOCK_C

m4_define([_MPI_F08_TYPE_CREATE_KEYVAL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Type_create_keyval,&
&profiling_procedure => PMPI_Type_create_keyval
implicit none

PROCEDURE(MPI_TYPE_COPY_ATTR_FUNCTION) :: a_
PROCEDURE(MPI_TYPE_DELETE_ATTR_FUNCTION) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_KEYVAL

m4_define([_MPI_F08_TYPE_CREATE_RESIZED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Type_create_resized,&
&profiling_procedure => PMPI_Type_create_resized
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_RESIZED

m4_define([_MPI_F08_TYPE_CREATE_RESIZED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Type_create_resized,&
&profiling_procedure => PMPI_Type_create_resized
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_RESIZED_C

m4_define([_MPI_F08_TYPE_CREATE_STRUCT], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_struct,&
&profiling_procedure => PMPI_Type_create_struct
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, DIMENSION(a_), INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(a_), INTENT(IN) :: c_
TYPE(MPI_DATATYPE), DIMENSION(a_), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_STRUCT

m4_define([_MPI_F08_TYPE_CREATE_STRUCT_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_create_struct,&
&profiling_procedure => PMPI_Type_create_struct
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(a_), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), DIMENSION(a_), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_STRUCT_C

m4_define([_MPI_F08_TYPE_CREATE_SUBARRAY], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Type_create_subarray,&
&profiling_procedure => PMPI_Type_create_subarray
implicit none

INTEGER, INTENT(IN) :: a_, e_
INTEGER, DIMENSION(a_), INTENT(IN) :: b_, c_, d_
TYPE(MPI_DATATYPE), INTENT(IN) :: f_
TYPE(MPI_DATATYPE), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_SUBARRAY

m4_define([_MPI_F08_TYPE_CREATE_SUBARRAY_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Type_create_subarray,&
&profiling_procedure => PMPI_Type_create_subarray
implicit none

INTEGER, INTENT(IN) :: a_, e_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(a_), INTENT(IN) :: b_, c_, d_
TYPE(MPI_DATATYPE), INTENT(IN) :: f_
TYPE(MPI_DATATYPE), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_TYPE_CREATE_SUBARRAY_C

m4_define([_MPI_F08_TYPE_DELETE_ATTR], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_delete_attr,&
&profiling_procedure => PMPI_Type_delete_attr
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_DELETE_ATTR

m4_define([_MPI_F08_TYPE_DUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_dup,&
&profiling_procedure => PMPI_Type_dup
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
TYPE(MPI_DATATYPE), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_DUP

m4_define([_MPI_F08_TYPE_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Type_free,&
&profiling_procedure => PMPI_Type_free
implicit none

TYPE(MPI_DATATYPE), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_TYPE_FREE

m4_define([_MPI_F08_TYPE_FREE_KEYVAL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Type_free_keyval,&
&profiling_procedure => PMPI_Type_free_keyval
implicit none

INTEGER, INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_TYPE_FREE_KEYVAL

m4_define([_MPI_F08_TYPE_GET_ATTR], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Type_get_attr,&
&profiling_procedure => PMPI_Type_get_attr
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: c_
LOGICAL, INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_ATTR

m4_define([_MPI_F08_TYPE_GET_CONTENTS], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Type_get_contents,&
&profiling_procedure => PMPI_Type_get_contents
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, c_, d_
INTEGER, DIMENSION(b_), INTENT(OUT) :: e_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(c_), INTENT(OUT) :: f_
TYPE(MPI_DATATYPE), DIMENSION(d_), INTENT(OUT) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_CONTENTS

m4_define([_MPI_F08_TYPE_GET_CONTENTS_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
use :: mpi_f08, this_procedure => MPI_Type_get_contents,&
&profiling_procedure => PMPI_Type_get_contents
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, c_, d_, e_
INTEGER, DIMENSION(b_), INTENT(OUT) :: f_
INTEGER(KIND=MPI_ADDRESS_KIND), DIMENSION(c_), INTENT(OUT) :: g_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(d_), INTENT(OUT) :: h_
TYPE(MPI_DATATYPE), DIMENSION(e_), INTENT(OUT) :: i_
INTEGER, INTENT(OUT), OPTIONAL :: j_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_,i_,j_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_CONTENTS_C

m4_define([_MPI_F08_TYPE_GET_ENVELOPE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_get_envelope,&
&profiling_procedure => PMPI_Type_get_envelope
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_, c_, d_, e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_ENVELOPE

m4_define([_MPI_F08_TYPE_GET_ENVELOPE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Type_get_envelope,&
&profiling_procedure => PMPI_Type_get_envelope
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_, c_, d_, e_
INTEGER, INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_ENVELOPE_C

m4_define([_MPI_F08_TYPE_GET_EXTENT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_extent,&
&profiling_procedure => PMPI_Type_get_extent
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_EXTENT

m4_define([_MPI_F08_TYPE_GET_EXTENT_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_extent,&
&profiling_procedure => PMPI_Type_get_extent
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_EXTENT_C

m4_define([_MPI_F08_TYPE_GET_EXTENT_X], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_extent_x,&
&profiling_procedure => PMPI_Type_get_extent_x
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_EXTENT_X

m4_define([_MPI_F08_TYPE_GET_NAME], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_name,&
&profiling_procedure => PMPI_Type_get_name
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_NAME

m4_define([_MPI_F08_TYPE_GET_TRUE_EXTENT], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_true_extent,&
&profiling_procedure => PMPI_Type_get_true_extent
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_TRUE_EXTENT

m4_define([_MPI_F08_TYPE_GET_TRUE_EXTENT_C], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_true_extent,&
&profiling_procedure => PMPI_Type_get_true_extent
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_TRUE_EXTENT_C

m4_define([_MPI_F08_TYPE_GET_TRUE_EXTENT_X], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_get_true_extent_x,&
&profiling_procedure => PMPI_Type_get_true_extent_x
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_, c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_GET_TRUE_EXTENT_X

m4_define([_MPI_F08_TYPE_INDEXED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_indexed,&
&profiling_procedure => PMPI_Type_indexed
implicit none

INTEGER, INTENT(IN) :: a_
INTEGER, DIMENSION(a_), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_INDEXED

m4_define([_MPI_F08_TYPE_INDEXED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_indexed,&
&profiling_procedure => PMPI_Type_indexed
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), DIMENSION(a_), INTENT(IN) :: b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_INDEXED_C

m4_define([_MPI_F08_TYPE_MATCH_SIZE], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_match_size,&
&profiling_procedure => PMPI_Type_match_size
implicit none

INTEGER, INTENT(IN) :: a_, b_
TYPE(MPI_DATATYPE), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_MATCH_SIZE

m4_define([_MPI_F08_TYPE_SET_ATTR], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Type_set_attr,&
&profiling_procedure => PMPI_Type_set_attr
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_TYPE_SET_ATTR

m4_define([_MPI_F08_TYPE_SET_NAME], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_set_name,&
&profiling_procedure => PMPI_Type_set_name
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_SET_NAME

m4_define([_MPI_F08_TYPE_SIZE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_size,&
&profiling_procedure => PMPI_Type_size
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_SIZE

m4_define([_MPI_F08_TYPE_SIZE_C], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_size,&
&profiling_procedure => PMPI_Type_size
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_SIZE_C

m4_define([_MPI_F08_TYPE_SIZE_X], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Type_size_x,&
&profiling_procedure => PMPI_Type_size_x
implicit none

TYPE(MPI_DATATYPE), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_TYPE_SIZE_X

m4_define([_MPI_F08_TYPE_VECTOR], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_vector,&
&profiling_procedure => PMPI_Type_vector
implicit none

INTEGER, INTENT(IN) :: a_, b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_VECTOR

m4_define([_MPI_F08_TYPE_VECTOR_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Type_vector,&
&profiling_procedure => PMPI_Type_vector
implicit none

INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: a_, b_, c_
TYPE(MPI_DATATYPE), INTENT(IN) :: d_
TYPE(MPI_DATATYPE), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_TYPE_VECTOR_C

m4_define([_MPI_F08_UNPACK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Unpack,&
&profiling_procedure => PMPI_Unpack
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_, e_
INTEGER, INTENT(INOUT) :: c_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_UNPACK

m4_define([_MPI_F08_UNPACK_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Unpack,&
&profiling_procedure => PMPI_Unpack
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), INTENT(IN) :: a_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: b_, e_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: c_
type(mytype), DIMENSION(*) :: d_
TYPE(MPI_DATATYPE), INTENT(IN) :: f_
TYPE(MPI_COMM), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_UNPACK_C

m4_define([_MPI_F08_UNPACK_EXTERNAL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Unpack_external,&
&profiling_procedure => PMPI_Unpack_external
implicit none

type mytype
integer :: value
end type

CHARACTER(LEN=*), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: c_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: d_
type(mytype), DIMENSION(*) :: e_
INTEGER, INTENT(IN) :: f_
TYPE(MPI_DATATYPE), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_UNPACK_EXTERNAL

m4_define([_MPI_F08_UNPACK_EXTERNAL_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_,h_)
use :: mpi_f08, this_procedure => MPI_Unpack_external,&
&profiling_procedure => PMPI_Unpack_external
implicit none

type mytype
integer :: value
end type

CHARACTER(LEN=*), INTENT(IN) :: a_
type(mytype), DIMENSION(*), INTENT(IN) :: b_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: c_, f_
INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: d_
type(mytype), DIMENSION(*) :: e_
TYPE(MPI_DATATYPE), INTENT(IN) :: g_
INTEGER, INTENT(OUT), OPTIONAL :: h_

call this_procedure(a_,b_,c_,d_,e_,f_,g_,h_)
end subroutine]]
)dnl _MPI_F08_UNPACK_EXTERNAL_C

m4_define([_MPI_F08_UNPUBLISH_NAME], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Unpublish_name,&
&profiling_procedure => PMPI_Unpublish_name
implicit none

CHARACTER(LEN=*), INTENT(IN) :: a_, c_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_UNPUBLISH_NAME

m4_define([_MPI_F08_WAIT], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Wait,&
&profiling_procedure => PMPI_Wait
implicit none

TYPE(MPI_REQUEST), INTENT(INOUT) :: a_
TYPE(MPI_STATUS) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WAIT

m4_define([_MPI_F08_WAITALL], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Waitall,&
&profiling_procedure => PMPI_Waitall
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
TYPE(MPI_STATUS), DIMENSION(*) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WAITALL

m4_define([_MPI_F08_WAITANY], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Waitany,&
&profiling_procedure => PMPI_Waitany
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
INTEGER, INTENT(OUT) :: c_
TYPE(MPI_STATUS) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_WAITANY

m4_define([_MPI_F08_WAITSOME], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Waitsome,&
&profiling_procedure => PMPI_Waitsome
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_REQUEST), DIMENSION(a_), INTENT(INOUT) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, DIMENSION(*), INTENT(OUT) :: d_
TYPE(MPI_STATUS), DIMENSION(*) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_WAITSOME

m4_define([_MPI_F08_WIN_ALLOCATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Win_allocate,&
&profiling_procedure => PMPI_Win_allocate
implicit none

INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_INFO), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: d_
TYPE(C_PTR), INTENT(OUT) :: e_
TYPE(MPI_WIN), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_WIN_ALLOCATE

m4_define([_MPI_F08_WIN_ALLOCATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Win_allocate,&
&profiling_procedure => PMPI_Win_allocate
implicit none

INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: a_, b_
TYPE(MPI_INFO), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: d_
TYPE(C_PTR), INTENT(OUT) :: e_
TYPE(MPI_WIN), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_WIN_ALLOCATE_C

m4_define([_MPI_F08_WIN_ALLOCATE_SHARED], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Win_allocate_shared,&
&profiling_procedure => PMPI_Win_allocate_shared
implicit none

INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_INFO), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: d_
TYPE(C_PTR), INTENT(OUT) :: e_
TYPE(MPI_WIN), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_WIN_ALLOCATE_SHARED

m4_define([_MPI_F08_WIN_ALLOCATE_SHARED_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Win_allocate_shared,&
&profiling_procedure => PMPI_Win_allocate_shared
implicit none

INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: a_, b_
TYPE(MPI_INFO), INTENT(IN) :: c_
TYPE(MPI_COMM), INTENT(IN) :: d_
TYPE(C_PTR), INTENT(OUT) :: e_
TYPE(MPI_WIN), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_WIN_ALLOCATE_SHARED_C

m4_define([_MPI_F08_WIN_ATTACH], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Win_attach,&
&profiling_procedure => PMPI_Win_attach
implicit none

type mytype
integer :: value
end type

TYPE(MPI_WIN), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WIN_ATTACH

m4_define([_MPI_F08_WIN_CALL_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_call_errhandler,&
&profiling_procedure => PMPI_Win_call_errhandler
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_CALL_ERRHANDLER

m4_define([_MPI_F08_WIN_COMPLETE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_complete,&
&profiling_procedure => PMPI_Win_complete
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_COMPLETE

m4_define([_MPI_F08_WIN_CREATE], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Win_create,&
&profiling_procedure => PMPI_Win_create
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: b_
INTEGER, INTENT(IN) :: c_
TYPE(MPI_INFO), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_WIN_CREATE

m4_define([_MPI_F08_WIN_CREATE_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_,g_)
use :: mpi_f08, this_procedure => MPI_Win_create,&
&profiling_procedure => PMPI_Win_create
implicit none

type mytype
integer :: value
end type

type(mytype), DIMENSION(*), ASYNCHRONOUS :: a_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: b_, c_
TYPE(MPI_INFO), INTENT(IN) :: d_
TYPE(MPI_COMM), INTENT(IN) :: e_
TYPE(MPI_WIN), INTENT(OUT) :: f_
INTEGER, INTENT(OUT), OPTIONAL :: g_

call this_procedure(a_,b_,c_,d_,e_,f_,g_)
end subroutine]]
)dnl _MPI_F08_WIN_CREATE_C

m4_define([_MPI_F08_WIN_CREATE_DYNAMIC], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Win_create_dynamic,&
&profiling_procedure => PMPI_Win_create_dynamic
implicit none

TYPE(MPI_INFO), INTENT(IN) :: a_
TYPE(MPI_COMM), INTENT(IN) :: b_
TYPE(MPI_WIN), INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WIN_CREATE_DYNAMIC

m4_define([_MPI_F08_WIN_CREATE_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_create_errhandler,&
&profiling_procedure => PMPI_Win_create_errhandler
implicit none

PROCEDURE(MPI_WIN_ERRHANDLER_FUNCTION) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_CREATE_ERRHANDLER

m4_define([_MPI_F08_WIN_CREATE_KEYVAL], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Win_create_keyval,&
&profiling_procedure => PMPI_Win_create_keyval
implicit none

PROCEDURE(MPI_WIN_COPY_ATTR_FUNCTION) :: a_
PROCEDURE(MPI_WIN_DELETE_ATTR_FUNCTION) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_WIN_CREATE_KEYVAL

m4_define([_MPI_F08_WIN_DELETE_ATTR], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_delete_attr,&
&profiling_procedure => PMPI_Win_delete_attr
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_DELETE_ATTR

m4_define([_MPI_F08_WIN_DETACH], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_detach,&
&profiling_procedure => PMPI_Win_detach
implicit none

type mytype
integer :: value
end type

TYPE(MPI_WIN), INTENT(IN) :: a_
type(mytype), DIMENSION(*), ASYNCHRONOUS :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_DETACH

m4_define([_MPI_F08_WIN_FENCE], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_fence,&
&profiling_procedure => PMPI_Win_fence
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_WIN), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_FENCE

m4_define([_MPI_F08_WIN_FLUSH], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_flush,&
&profiling_procedure => PMPI_Win_flush
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_WIN), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_FLUSH

m4_define([_MPI_F08_WIN_FLUSH_ALL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_flush_all,&
&profiling_procedure => PMPI_Win_flush_all
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_FLUSH_ALL

m4_define([_MPI_F08_WIN_FLUSH_LOCAL], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_flush_local,&
&profiling_procedure => PMPI_Win_flush_local
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_WIN), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_FLUSH_LOCAL

m4_define([_MPI_F08_WIN_FLUSH_LOCAL_ALL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_flush_local_all,&
&profiling_procedure => PMPI_Win_flush_local_all
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_FLUSH_LOCAL_ALL

m4_define([_MPI_F08_WIN_FREE], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_free,&
&profiling_procedure => PMPI_Win_free
implicit none

TYPE(MPI_WIN), INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_FREE

m4_define([_MPI_F08_WIN_FREE_KEYVAL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_free_keyval,&
&profiling_procedure => PMPI_Win_free_keyval
implicit none

INTEGER, INTENT(INOUT) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_FREE_KEYVAL

m4_define([_MPI_F08_WIN_GET_ATTR], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Win_get_attr,&
&profiling_procedure => PMPI_Win_get_attr
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: c_
LOGICAL, INTENT(OUT) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_WIN_GET_ATTR

m4_define([_MPI_F08_WIN_GET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_get_errhandler,&
&profiling_procedure => PMPI_Win_get_errhandler
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_GET_ERRHANDLER

m4_define([_MPI_F08_WIN_GET_GROUP], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_get_group,&
&profiling_procedure => PMPI_Win_get_group
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
TYPE(MPI_GROUP), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_GET_GROUP

m4_define([_MPI_F08_WIN_GET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_get_info,&
&profiling_procedure => PMPI_Win_get_info
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_GET_INFO

m4_define([_MPI_F08_WIN_GET_NAME], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Win_get_name,&
&profiling_procedure => PMPI_Win_get_name
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: b_
INTEGER, INTENT(OUT) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WIN_GET_NAME

m4_define([_MPI_F08_WIN_LOCK], [[subroutine check_f08_sym(a_,b_,c_,d_,e_)
use :: mpi_f08, this_procedure => MPI_Win_lock,&
&profiling_procedure => PMPI_Win_lock
implicit none

INTEGER, INTENT(IN) :: a_, b_, c_
TYPE(MPI_WIN), INTENT(IN) :: d_
INTEGER, INTENT(OUT), OPTIONAL :: e_

call this_procedure(a_,b_,c_,d_,e_)
end subroutine]]
)dnl _MPI_F08_WIN_LOCK

m4_define([_MPI_F08_WIN_LOCK_ALL], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_lock_all,&
&profiling_procedure => PMPI_Win_lock_all
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_WIN), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_LOCK_ALL

m4_define([_MPI_F08_WIN_POST], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Win_post,&
&profiling_procedure => PMPI_Win_post
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_WIN), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WIN_POST

m4_define([_MPI_F08_WIN_SET_ATTR], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Win_set_attr,&
&profiling_procedure => PMPI_Win_set_attr
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WIN_SET_ATTR

m4_define([_MPI_F08_WIN_SET_ERRHANDLER], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_set_errhandler,&
&profiling_procedure => PMPI_Win_set_errhandler
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
TYPE(MPI_ERRHANDLER), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_SET_ERRHANDLER

m4_define([_MPI_F08_WIN_SET_INFO], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_set_info,&
&profiling_procedure => PMPI_Win_set_info
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
TYPE(MPI_INFO), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_SET_INFO

m4_define([_MPI_F08_WIN_SET_NAME], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_set_name,&
&profiling_procedure => PMPI_Win_set_name
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
CHARACTER(LEN=*), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_SET_NAME

m4_define([_MPI_F08_WIN_SHARED_QUERY], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Win_shared_query,&
&profiling_procedure => PMPI_Win_shared_query
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: c_
INTEGER, INTENT(OUT) :: d_
TYPE(C_PTR), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_WIN_SHARED_QUERY

m4_define([_MPI_F08_WIN_SHARED_QUERY_C], [[subroutine check_f08_sym(a_,b_,c_,d_,e_,f_)
use :: mpi_f08, this_procedure => MPI_Win_shared_query,&
&profiling_procedure => PMPI_Win_shared_query
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: c_, d_
TYPE(C_PTR), INTENT(OUT) :: e_
INTEGER, INTENT(OUT), OPTIONAL :: f_

call this_procedure(a_,b_,c_,d_,e_,f_)
end subroutine]]
)dnl _MPI_F08_WIN_SHARED_QUERY_C

m4_define([_MPI_F08_WIN_START], [[subroutine check_f08_sym(a_,b_,c_,d_)
use :: mpi_f08, this_procedure => MPI_Win_start,&
&profiling_procedure => PMPI_Win_start
implicit none

TYPE(MPI_GROUP), INTENT(IN) :: a_
INTEGER, INTENT(IN) :: b_
TYPE(MPI_WIN), INTENT(IN) :: c_
INTEGER, INTENT(OUT), OPTIONAL :: d_

call this_procedure(a_,b_,c_,d_)
end subroutine]]
)dnl _MPI_F08_WIN_START

m4_define([_MPI_F08_WIN_SYNC], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_sync,&
&profiling_procedure => PMPI_Win_sync
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_SYNC

m4_define([_MPI_F08_WIN_TEST], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_test,&
&profiling_procedure => PMPI_Win_test
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
LOGICAL, INTENT(OUT) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_TEST

m4_define([_MPI_F08_WIN_UNLOCK], [[subroutine check_f08_sym(a_,b_,c_)
use :: mpi_f08, this_procedure => MPI_Win_unlock,&
&profiling_procedure => PMPI_Win_unlock
implicit none

INTEGER, INTENT(IN) :: a_
TYPE(MPI_WIN), INTENT(IN) :: b_
INTEGER, INTENT(OUT), OPTIONAL :: c_

call this_procedure(a_,b_,c_)
end subroutine]]
)dnl _MPI_F08_WIN_UNLOCK

m4_define([_MPI_F08_WIN_UNLOCK_ALL], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_unlock_all,&
&profiling_procedure => PMPI_Win_unlock_all
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_UNLOCK_ALL

m4_define([_MPI_F08_WIN_WAIT], [[subroutine check_f08_sym(a_,b_)
use :: mpi_f08, this_procedure => MPI_Win_wait,&
&profiling_procedure => PMPI_Win_wait
implicit none

TYPE(MPI_WIN), INTENT(IN) :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call this_procedure(a_,b_)
end subroutine]]
)dnl _MPI_F08_WIN_WAIT

# End F08 symbol checks

# Start F08 symbol checks with linking
m4_define([_MPI_F08_LINKCHECK_ALLREDUCE_INIT], [[program main
use :: mpi_f08
implicit none
type mytype
integer :: value
end type

type(mytype), DIMENSION(10), ASYNCHRONOUS :: a_, b_
INTEGER :: c_, i_
TYPE(MPI_DATATYPE) :: d_
TYPE(MPI_OP) :: e_
TYPE(MPI_COMM) :: f_
TYPE(MPI_INFO) :: g_
TYPE(MPI_REQUEST) :: h_

call PMPI_Allreduce_init(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end program
]]
)dnl _MPI_F08_LINKCHECK_ALLREDUCE_INIT

m4_define([_MPI_F08_LINKCHECK_ALLREDUCE_INIT_C], [[program main
use :: mpi_f08
implicit none
type mytype
integer :: value
end type

type(mytype), DIMENSION(10), ASYNCHRONOUS :: a_, b_
INTEGER(KIND=MPI_COUNT_KIND) :: c_
TYPE(MPI_DATATYPE) :: d_
TYPE(MPI_OP) :: e_
TYPE(MPI_COMM) :: f_
TYPE(MPI_INFO) :: g_
TYPE(MPI_REQUEST) :: h_
INTEGER :: i_

call PMPI_Allreduce_init(a_,b_,c_,d_,e_,f_,g_,h_,i_)
end program
]]
)dnl _MPI_F08_LINKCHECK_ALLREDUCE_INIT_C

m4_define([_MPI_F08_LINKCHECK_GROUP_FROM_SESSION_PSET], [[program main
use :: mpi_f08
implicit none
TYPE(MPI_SESSION) :: a_
CHARACTER(LEN=10) :: b_
TYPE(MPI_GROUP) :: c_
INTEGER :: d_

call PMPI_Group_from_session_pset(a_,b_,c_,d_)
end program
]]
)dnl _MPI_F08_LINKCHECK_GROUP_FROM_SESSION_PSET

m4_define([_MPI_F08_LINKCHECK_SESSION_CALL_ERRHANDLER], [[program main
use :: mpi_f08
implicit none
TYPE(MPI_SESSION) :: a_
INTEGER :: b_, c_

call PMPI_Session_call_errhandler(a_,b_,c_)
end program
]]
)dnl _MPI_F08_LINKCHECK_SESSION_CALL_ERRHANDLER

# End F08 symbol checks with linking

# Start F08 checks for routines using the TS buffer convention
m4_define([_MPI_F08_TSBUFFERS_CHECK_FREE_MEM], [[subroutine check_mpi_free_mem(a_,b_)
use :: mpi_f08, this_procedure => MPI_Free_mem,&
&profiling_procedure => PMPI_Free_mem
implicit none

type(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: a_
INTEGER, INTENT(OUT), OPTIONAL :: b_

call profiling_procedure(a_,b_)
end subroutine
]])
# Start F08 checks for routines using the TS buffer convention
