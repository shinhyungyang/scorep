## -*- mode: makefile -*-

##
## This file is part of the Score-P software ecosystem (http://www.score-p.org)
##
## Copyright (c) 2023-2024,
## Forschungszentrum Juelich GmbH, Germany
##
## This software may be modified and distributed under the terms of
## a BSD-style license.  See the COPYING file in the package base
## directory for details.
##

# Linking shared and static libtool libraries to programs (via libtool
# or via a plain compiler/linker) doesn't work reliably on systems of
# interest.
#
# Sometimes, (1) installed shared libtool libraries are not
# self-contained. (2) E.g., on Cray (with different PrgEnvs) we saw
# that Score-P adapters, that depended on `libscorep_measurement.la`,
# were not self-contained because RPATH/RUNPATH information was not
# transferred from `libscorep_measurement.la` to
# `libscorep_adapter_<foo>.la`, whereas the NEEDED entries were
# transferred. In addition, (3) RPATH/RUNPATH information available to
# noinst libtool libraries does not reliably show up in the installed
# libtool libraries that LIBADD the noinst ones. Furthermore, (4) .la
# files cannot be relied upon as they might contain wrong data (e.g.,
# libbfd's .la file has references to the source tree). As a
# consequence, (5) other means of providing dependency information for
# static libtool libraries need to be put in place.
#
# We address these shortcomings as follows:
#
# 1. Installed shared (libtool) libraries and programs need to be
#    self-contained, i.e., all their NEEDED entries must be resolvable
#    at load-time, either from the environment or potential RPATH or
#    RUNPATH entries in the .so. For shared builds, we enforce
#    self-contained installed libraries by using `ldd` and checking
#    for non-resolved dependencies, see rule
#    `shared-objects-self-contained`. So far, a corresponding check
#    for installed programs hasn't been implemented.
#
# 2. Installed libtool libraries must not LIBADD other installed
#    libtool libraries. In particular, Score-P adapters must not
#    LIBADD `libscorep_measurement.la`. Instead, `scorep-config` needs
#    to provide appropriate LDFLAGS and LIBS.
#
# 3. Noinst libtool libraries that rely on external libraries, must
#    not encode this dependecy as LIBADD, LDFLAGS, and/or
#    LIBS. Instead, the dependency is to be encoded as
#    `lib<name>_la_needs_LIBS` and
#    `lib<name>_la_needs_LDFLAGS`. Libraries and programs that
#    LIBADD/LDADD the noinst library as `lib<name>.la`, need to
#    additionally add `lib<name>_la_needs_LIBS` to LIBADD/LDADD and
#    `lib<name>_la_needs_LDFLAGS` to LDFLAGS.  Noinst libraries with
#    dependencies that are built in build-<foo> and used in
#    build-<bar> can access the new variables by adding `-include
#    ../build-<foo>/Makefile.export` to `build-<bar>/Makefile.am`, see
#    rule `Makefile.export`. Here, the leading hyphen guarantees progress
#    even if the file doesn't exist.
#
# 4. Automatically installed .la files are made unavailable for
#    subsequent libtool activities by moving them at the end of the
#    installation (see rule `install-exec-move-la-files` in
#    common.am). As a result, e.g., a potentially bogus libcubew.la
#    won't affect Score-P or Scalasca.
#
# 5. Installed static libraries might need LDFLAGS and LIBS to
#    external libraries to be usable. Instead of getting this
#    information from unreliable .la files, the <pkg>-config tool
#    provides them. LIBS and LDFLAGS in question are extracted from
#    Makefile variables and put into a header file (see rule
#    `$(CONFIG_EXTERNAL_LIBS_HPP)`) which gets used by the
#    <pgk>-config tool.
#
# We either build shared libs or static libs, but not both. This makes
# the implementation of the rules straight forward (see
# AFS_LT_RESTRICTIONS).
#
#
# To encode a RPATH or RUNPATH into a shared libtool library, add
# -R<dir> to the corresponding (libtool) LDFLAGS. Whether <dir> will
# end up as RPATH or RUNPATH is system dependent.


# ---
# Ensure that <name> in all lib<name>.la is an automake canonicalized
# name as <name> is used to create variables. See e.g., the rules
# `Makefile.export` and `$(CONFIG_EXTERNAL_LIBS_HPP)`. Canonicalized
# names contain just letters, numbers, the strudel (@), and the
# underscore.

CLEANFILES += ensure_ltlibraries_canonicalized

ensure_ltlibraries_canonicalized: Makefile
	@for i in $(lib_LTLIBRARIES:.la=) $(noinst_LTLIBRARIES:.la=); do \
	    canononical_name=$$(echo "$$i" | tr -c 'A-Za-z0-9_@\n' '_' ); \
	    if test "$$canononical_name" != "$$i"; then \
	        echo "ERROR: $$i.la is not a canonical name. Please change to e.g., $$canononical_name.la." >&2; \
	        exit 1; \
	    fi; \
	done; \
	touch $@


# ---
# Dump noinst_LTLIBRARIES's `lib<name>_la_needs_LDFLAGS` and
# `lib<name>_la_needs_LIBS` as
#
#   lib<name>_la_needs_LDFLAGS = $(lib<name>_la_needs_LDFLAGS)
#   lib<name>_la_needs_LIBS = # $(lib<name>_la_needs_LIBS)
#
# into `build-<foo>/Makefile.export` to let `build-<bar>/Makefile`
# consume these variables in case they use non-local noinst
# LTLIBRARIES (e.g., libutils.la).

DISTCLEANFILES += Makefile.export

Makefile.export: Makefile ensure_ltlibraries_canonicalized
	$(AM_V_GEN): > Makefile.export; \
	$(MAKE) gen_export

gen_export: $(noinst_lt_needs_ldflags) $(noinst_lt_needs_libs)

noinst_lt_needs_ldflags = $(noinst_LTLIBRARIES:.la=_la_needs_LDFLAGS)
$(noinst_lt_needs_ldflags):
	@var=$$(echo "$@"); \
	value=$$(echo "$($@)"); \
	if test -n "$${value// }"; then \
	    echo "$(AFS_PACKAGE_BUILD_name)_$$var = $$value" >> Makefile.export; \
	fi

noinst_lt_needs_libs = $(noinst_LTLIBRARIES:.la=_la_needs_LIBS)
$(noinst_lt_needs_libs):
	@var=$$(echo "$@"); \
	value=$$(echo "$($@)"); \
	if test -n "$${value// }"; then \
	    echo "$(AFS_PACKAGE_BUILD_name)_$$var = $$value" >> Makefile.export; \
	fi


# ---
# Generate the C++-header file $(CONFIG_EXTERNAL_LIBS_HPP), i.e.,
# `../src/config-external-libs-<AFS_PACKAGE_BUILD_name>.hpp`,
# containing information for linking and rpathing of installed
# libraries, intended to be used by the <pkg>-config tools. The
# information is provided via the rules $(lib_lt_needs_libdirs)`,
# `$(lib_lt_needs_libs)` and inserted into a std::map<std::string,
# LibraryData> via the rule `$(gen_config_external_libs_body)`, see
# below and the file library_data.hpp.
#
# For each installed static libtool library <lib>.a, we provide two
# preprocessor defines, containing information about all external
# libraries <ext-lib> residing in <dir>, that are required to link
# this static <lib>.a into a non-libtool program:
#
#   #define $(AFS_PACKAGE_BUILD_NAME)_<lib>_NEEDS_LIBDIRS "<dir>[:<dir>]"
#   #define $(AFS_PACKAGE_BUILD_NAME)_<lib>_NEEDS_LIBS "-l<ext-lib>[ -l<ext-lib>]"
#
# <dir> is supposed to be used as '-L<dir> -Wl,-rpath -Wl,<dir>' (by
# the <pkg>-config tool).
#
# For installed shared libtool libraries <lib>.so, these preprocessor
# defines are generated empty, as the installed shared libs are
# supposed to be self-contained, see rule
# `shared-objects-self-contained`.
#
# Note that if <dir> is contained in $(SYS_LIB_DLSEARCH_PATH_SPEC), it will
# be omitted in $(AFS_PACKAGE_BUILD_NAME)_LIBDIR and
# $(AFS_PACKAGE_BUILD_NAME)_<lib>_NEEDS_LIBDIRS to prevent errors in sysroot
# builds.

CLEANFILES += $(CONFIG_EXTERNAL_LIBS_HPP)

$(CONFIG_EXTERNAL_LIBS_HPP): Makefile ensure_ltlibraries_canonicalized
	$(AM_V_GEN): > $@; \
	config_libdir="$(libdir)"; \
	for i in $(SYS_LIB_DLSEARCH_PATH_SPEC); do \
	    if [ "$$i" = "$(libdir)" ]; then config_libdir=""; break; fi; \
	done; \
	printf '%s\n%s\n%s\n%s\n%s\n%s\n' \
	       "#ifndef $(CONFIG_EXTERNAL_LIBS_HPP_INCLUDE_GUARD)" \
	       "#define $(CONFIG_EXTERNAL_LIBS_HPP_INCLUDE_GUARD)" \
	       "#include <library_data.hpp>" \
	       "#include <map>" \
	       "#define $(AFS_PACKAGE_BUILD_NAME)_BUILDDIR \"$(abs_builddir)\"" \
	       "#define $(AFS_PACKAGE_BUILD_NAME)_LIBDIR \"$$config_libdir\"" >> $@; \
	$(MAKE) gen_config_external_libs_defines; \
	printf '%s\n%s\n%s\n' \
	       "static void" \
	       "add_library_dependencies_$(AFS_PACKAGE_BUILD_name)( std::map<std::string, LibraryData>* library_objects )" \
	       "{" >> $@; \
	test -z "$(gen_config_external_libs_body)" || $(MAKE) $(gen_config_external_libs_body); \
	printf '%s\n%s\n' \
	       "}" \
	       "#endif // $(CONFIG_EXTERNAL_LIBS_HPP_INCLUDE_GUARD)" >> $@;

gen_config_external_libs_defines: $(lib_lt_needs_libdirs) $(lib_lt_needs_libs)

gen_config_external_libs_body = $(lib_LTLIBRARIES:.la=)
$(gen_config_external_libs_body):
	@echo "    (*library_objects)[ \"$@\" ] = LibraryData( \"$@\"," \
	      "$(AFS_PACKAGE_BUILD_NAME)_BUILDDIR," \
	      "$(AFS_PACKAGE_BUILD_NAME)_LIBDIR," \
	      "$(AFS_PACKAGE_BUILD_NAME)_$@_NEEDS_LIBS," \
	      "$(AFS_PACKAGE_BUILD_NAME)_$@_NEEDS_LIBDIRS );" \
	      >> $(CONFIG_EXTERNAL_LIBS_HPP)


if HAVE_BUILD_STATIC_LT_LIBRARIES

lib_lt_needs_libdirs = $(lib_LTLIBRARIES:.la=_la_LDFLAGS)
$(lib_lt_needs_libdirs):
	@needs_rpaths_var=$$(echo "$@" | $(SED) "s|_la_LDFLAGS|_NEEDS_LIBDIRS|"); \
	needs_rpaths_value=$$(echo "$($@) $(LDFLAGS)" | $(AWK) \
	    -v dlsearch_path="$(SYS_LIB_DLSEARCH_PATH_SPEC)" ' \
	    { \
	        gsub(/-R +/, "-R"); \
	        for ( i=1; i<=NF; i++ ) { \
	            if ( match( $$i, /^-R/ ) ) { \
	                count[$$i]++; \
	                if ( count[$$i] == 1 ) { \
	                    gsub("-R", "", $$i); \
	                    paths[idx++]=$$i \
	                } \
	            } \
	        } \
	    } \
	    END { \
	        split(dlsearch_path, dlsearch_arr); \
	        for ( i=0; i<idx; i++ ) { \
	            is_dlsearch_path = 0; \
	            for ( j in dlsearch_arr ) { \
	                if ( paths[i] == dlsearch_arr[j] ) { \
	                    is_dlsearch_path = 1; \
	                    break; \
	                } \
	            } \
	            if ( is_dlsearch_path ) { continue } \
	            if ( length( result ) == 0 ) { \
	                result=paths[i] \
	            } else { \
	                result=result ":" paths[i] \
	            } \
	        } \
	        print result \
	    } \
	'); \
	echo "#define $(AFS_PACKAGE_BUILD_NAME)_$$needs_rpaths_var \"$$needs_rpaths_value\"" >> $(CONFIG_EXTERNAL_LIBS_HPP)

# Below, we ignore .la files in *_la_LIBADD variables as they originate from
# noinst libraries that will be squashed into the installed libraries.
lib_lt_needs_libs = $(lib_LTLIBRARIES:.la=_la_LIBADD)
$(lib_lt_needs_libs):
	@needs_libs_var=$$(echo "$@" | $(AWK) ' \
	    { \
	        gsub( /_la_LIBADD/, "_NEEDS_LIBS" ); \
	        print $$0; \
	    } \
	'); \
	needs_libs_value=$$(echo "$($@)" | $(AWK) ' \
	    { \
	        gsub( /(\.\.\/build-[a-z]+\/)?lib[a-zA-Z0-9_.-]+\.la/, "" ); \
	        gsub( /^ +/, "" ); \
	        print $$0; \
	    } \
	'); \
	echo "#define $(AFS_PACKAGE_BUILD_NAME)_$$needs_libs_var \"$$needs_libs_value $(LIBS)\"" | \
	    tr -s ' ' | $(SED) 's/ *"$$/"/g' >> $(CONFIG_EXTERNAL_LIBS_HPP)

else !HAVE_BUILD_STATIC_LT_LIBRARIES

lib_lt_needs_libdirs = $(lib_LTLIBRARIES:.la=_NEEDS_LIBDIRS)
$(lib_lt_needs_libdirs):
	@echo "#define $(AFS_PACKAGE_BUILD_NAME)_$@ \"\"" >> $(CONFIG_EXTERNAL_LIBS_HPP)

lib_lt_needs_libs = $(lib_LTLIBRARIES:.la=_NEEDS_LIBS)
$(lib_lt_needs_libs):
	@echo "#define $(AFS_PACKAGE_BUILD_NAME)_$@ \"\"" >> $(CONFIG_EXTERNAL_LIBS_HPP)

endif !HAVE_BUILD_STATIC_LT_LIBRARIES


# ---
# Try to check with `ldd` if installed shared libraries are
# self-contained, i.e., all NEEDED entries can be resolved at
# load-time, either via the current environment or the RUNPATH or
# RPATH entries in the shared object.
#
# To abort `make installcheck` if not all shared lib_LTLIBRARIES are
# self-contained, add `shared-objects-self-contained` as prerequisite
# to `installcheck-local`.

if HAVE_BUILD_STATIC_LT_LIBRARIES

# Nothing to do in the pure-static case.
shared-objects-self-contained:

else !HAVE_BUILD_STATIC_LT_LIBRARIES

if AFS_BUILD_EQUALS_HOST

lib_lt_so = $(lib_LTLIBRARIES:.la=.so)
shared-objects-self-contained:
	@selfcontained=yes; \
	list='$(lib_lt_so)'; test -n "$(libdir)" || list=; \
	for so in $$list; do \
	    if LC_ALL=C ldd "$(libdir)/$$so" 2>/dev/null | ${GREP} 'not found' >/dev/null; then \
	        selfcontained=no; \
	        echo "not selfcontained: ldd $(libdir)/$$so"; \
	        ldd "$(libdir)/$$so"; \
	    fi; \
	done; \
	if test "x$$selfcontained" = xno; then \
	    echo "shared objects not self-contained"; \
	    exit 1; \
	fi

else !AFS_BUILD_EQUALS_HOST

# Cannot use ldd if build and host differ.
shared-objects-self-contained:

endif !AFS_BUILD_EQUALS_HOST

endif !HAVE_BUILD_STATIC_LT_LIBRARIES
