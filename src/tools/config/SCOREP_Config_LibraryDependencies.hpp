/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2013,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2013,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license. See the COPYING file in the package base
 * directory for details.
 *
 */

#ifndef SCOREP_CONFIG_LIBRARY_DEPENDENCY_HPP
#define SCOREP_CONFIG_LIBRARY_DEPENDENCY_HPP

/**
 * @file SCOREP_Config_LibraryDependecies.hpp
 *
 * Declares classes for the representation and analysis of library dependencies
 */

#include <map>
#include <deque>
#include <string>


/**
 * A class to store and analyze the dependencies from libraries. To generate
 * the dependecies, the .la files are parsed and initialization code is
 * generated by vendor/common/build-config/generate-library-dependecies.sh
 */
class SCOREP_Config_LibraryDependencies
{
    // ------------------------------------- Protected types
protected:

    /**
     * Internal class to represent teh content of one .la file.
     */
    class la_object
    {
public:
        /**
         * Empty contructor. Needed to allow copies of STL containers containing this
         * class
         */
        la_object( void );

        /**
         * Copy constructor.
         */
        la_object( const la_object& source );

        /**
         * Regular constructor.
         */
        la_object( const std::string&             lib_name,
                   const std::string&             build_dir,
                   const std::string&             install_dir,
                   const std::deque<std::string>& libs,
                   const std::deque<std::string>& ldflags,
                   const std::deque<std::string>& rpaths,
                   const std::deque<std::string>& dependency_las );

        /**
         * Destructor.
         */
        virtual
        ~la_object();
public:
        std::string             m_lib_name;
        std::string             m_build_dir;
        std::string             m_install_dir;
        std::deque<std::string> m_libs;
        std::deque<std::string> m_ldflags;
        std::deque<std::string> m_rpath;
        std::deque<std::string> m_dependency_las;
    };


    // ------------------------------------- Public functions
public:
    /**
     * Constructs the library dependecies
     */
    SCOREP_Config_LibraryDependencies( void );

    /**
     * Destructor
     */
    virtual
    ~SCOREP_Config_LibraryDependencies();

    /**
     * Returns a list of libraries containing the @a input_libs and its dependencies.
     * @param input_libs  A list of libraries, that should be linked.
     */
    std::deque<std::string>
    getLibraries( const std::deque<std::string>& input_libs );

    /**
     * Returns a list of library path flags for the @a input_libs and
     * its dependencies.
     * @param libs    A list of library names.
     * @param install If true the install paths are used. If false the
     *                build path are used.
     */
    std::deque<std::string>
    getLDFlags( const std::deque<std::string>& libs,
                bool                           install );

    /**
     * Returns a list of paths in which the executable should look atruntime
     * to find the libraries. It can be used to construct the rpath flags for
     * the @a input_libs and its dependencies.
     * @param libs      A list of library names.
     * @param install   If true the install paths are used. If false the
     *                  build path are used.
     */
    std::deque<std::string>
    getRpathFlags( const std::deque<std::string>& libs,
                   bool                           install );

    /**
     * This function adds a dependency to a library. For both libraries the .la
     * must be available. It is used to add the selected version of modules,
     * for which Score-P provides more than one implementation, e.g. threading
     * system, mutex.
     * @param dependent_lib The library which depends on @a dependency.
     * @param dependency    The library which is added to the dependencies of
     *                      @a dependent_lib.
     */
    void
    addDependency( const std::string& dependent_lib,
                   const std::string& dependency );

    // ------------------------------------- Protected functions
protected:
    /**
     * Calculates the dependencies for a given set of libraries.
     * @param libs  A list of library names.
     */
    std::deque<std::string>
    get_dependencies( const std::deque<std::string>& libs );

    // ------------------------------------- Public members
private:
    std::map< std::string, la_object> m_backend_objects;
};

#endif // SCOREP_CONFIG_LIBRARY_DEPENDENCY_HPP
