/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2021
 * Forschungszentrum Juelich GmbH, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license.  See the COPYING file in the package base
 * directory for details.
 *
 */

#ifndef SCOREP_MPI_LOGICAL_TIMER_H
#define SCOREP_MPI_LOGICAL_TIMER_H

/**
 * @file
 * @ingroup MPI_Wrapper
 *
 * @brief Functions for the use of logical timers with the MPI wrapper
 */

#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <mpi.h>

typedef uint64_t scorep_mpi_ltimer;

/**
 * @brief If defined, use a custom MPI_Datatype to communicate timer values
 *
 * If this is defined, all communications of timer values use a
 * custom MPI_Datatype @ref scorep_mpi_ltimer_datatype that is created and
 * committed during MPI_Init via @ref scorep_mpi_ltimer_init
 * (or @ref scorep_mpi_ltimer_init_thread in MPI_Init_thread).
 *
 * Else, @ref scorep_mpi_ltimer_datatype is plainly #define'ed
 */
#define SCOREP_MPI_LTIMER_CUSTOM_DATATYPE


#ifdef SCOREP_MPI_LTIMER_CUSTOM_DATATYPE
extern MPI_Datatype scorep_mpi_ltimer_datatype;
#else
#define scorep_mpi_ltimer_datatype MPI_UINT64_T
#endif

/**
 * @brief Tag for MPI messages sent by the wrapper to exchange logical timer values
 *
 * TODO: Right now, this is set to an arbitrary value.
 * There is no guarantee that this doesn't collide with a user-defined tag somewhere.
 *
 * We could solve this with custom communicators.
 * Therefore we would need to duplicate every communicator that is generated by the user,
 * and use our duplicate communicator to send the timer values.
 *
 * TODO: Don't expose this in the header.
 * Currently not possible, because the logical timer stuff in the
 * MPI_Send and MPI_Recv wrappers uses the raw PMPI calls instead of one of
 * the functions in this header.
 */
static const int scorep_mpi_ltimer_tag = 9900199;

/**
 * @brief Initialize the @ref scorep_mpi_logical_timer module (single-threaded programs).
 *
 * To be called during MPI_Init().
 */
void
scorep_mpi_ltimer_init();

/**
 * @brief Initialize the @ref scorep_mpi_logical_timer module (multi-threaded programs).
 *
 * To be called during MPI_Init_thread().
 */
void
scorep_mpi_ltimer_init_thread();

/**
 * @brief Is the logical timer being used in the current instrumented execution?
 *
 * All other functions in this module assume that the logical timer is enabled,
 * so they should be wrapped like this:
 *     if ( scorep_mpi_ltimer_enabled() )
 *     {
 *         scorep_mpi_ltimer_do_something_here();
 *     }
 */
bool
scorep_mpi_ltimer_enabled();

/**
 * @brief Query the current value of the logical timer.
 *
 * This function does not step the timer.
 */
scorep_mpi_ltimer
scorep_mpi_get_ltimer();

/**
 * @brief Advance the timer to the given value @p remote_time if this is in the future.
 *
 * This function implements the core principle of communicating logical timers.
 * When a time stamp from a remote location is received, the local timer has
 * to be updated if the remote time stamp is greater than the local time stamp.
 *
 * The local timer is not changed if \p remote_time is less than or equal the local time.
 *
 * This function does not step the timer.
 * The full timer update for a receiving operation is
 *     local = max (local, remote)
 *     local += 1
 *
 * @return The value of the local timer after the update.
 */
scorep_mpi_ltimer
scorep_mpi_forward_ltimer( scorep_mpi_ltimer remote_time );


/**
 * @name LogicalTimerMPI
 * @{
 */

/**
 * @brief Send my time stamp to @p dest in communicator @p comm.
 *
 * Uses a blocking MPI_Send().
 */
void
scorep_mpi_ltimer_send( int      dest,
                        MPI_Comm comm );

/**
 * @brief Receive a time stamp from @p source in communicator @p comm and update my time.
 *
 * Uses a blocking MPI_Recv().
 */
scorep_mpi_ltimer
scorep_mpi_ltimer_recv( int      source,
                        MPI_Comm comm );

/**
 * @brief Broadcast the time stamp from @p root to @p comm
 *
 * Uses a blocking MPI_Bcast().
 */
scorep_mpi_ltimer
scorep_mpi_ltimer_bcast( int      root,
                         MPI_Comm comm );

/**
 * @brief Update the timer in @p root with the maximum time stamp of all processes in @p comm.
 *
 * Uses a blocking MPI_Reduce().
 */
scorep_mpi_ltimer
scorep_mpi_ltimer_reduce( int      root,
                          MPI_Comm comm );

/**
 * @brief Update the timer on all processes in @p comm with the maximum time stamp in @p comm.
 *
 * Uses a blocking MPI_Allreduce().
 */
scorep_mpi_ltimer
scorep_mpi_ltimer_allreduce( MPI_Comm comm );

/**
 * @}
 */

#endif /* SCOREP_MPI_LOGICAL_TIMER_H */
