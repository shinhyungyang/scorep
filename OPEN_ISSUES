
                        Score-P v1.1.1 OPEN ISSUES
                        ==========================
                                                           Status: Feb 2013

* Platform support

  - Score-P has been tested on the following platforms:
    + IBM Blue Gene/Q, only static libraries supported
    + IBM SP & BladeCenter clusters, only static libraries supported
    + various Linux/Intel (x86/x64) clusters
    + Cray XE6/XK6: there have been preliminary tests with the
      PrgEnvCray environment module. The scorep command does not
      automatically detect a MPI or MPI+OpenMP application yet so you
      need to add --mpi for MPI and additionally --opari for hybrid
      applications manually. Support is still preliminary!
    The provided configure options (see INSTALL) may provide a good
    basis for building and testing the toolset on other systems.

  - The following platforms have not been tested recently:
    + IBM Blue Gene/P
    + Sun Solaris/SPARC-based clusters
    + SGI Altix/ICE
    However the supplied buildsystem might still work on these
    systems.

  - The following platforms have not been tested:
    + Cray XT3/4, XT5/6
    + NEC SX-9
    + IBM Blue Gene/L
    + SiCortex systems
    + other NEC SX systems

  - Each toolset installation can only support one MPI implementation
    (because MPI is only source-code but not binary compatible). If
    your systems support more than one MPI implementation (e.g. Linux
    clusters often do), separate builds for each MPI implementation
    have to be installed.

  - The same is true if your system features more than one compiler
    supporting automatic function instrumentation.

  - To build Score-P it is required to have MPI and Fortran compilers.

--------------------------------------------------------------------------------

* Automatic instrumentation via "scorep" based on (often undocumented)
  compiler switches

  - GNU    : tested with GCC 4 and higher
  - PGI    : tested with version 10.1
  - Oracle : only works for Fortran (not C/C++), tested with version 12.2
  - IBM    : only works for xlc/xlC version 7.0 and xlf version 9.1 and 
             higher and corresponding bgxl compilers on BlueGene systems
  - Intel  : only works with Intel icc/ifort version 10 and higher compilers

  Measurement filtering can only be applied to functions instrumented
  by the IBM, GNU, Intel, PGI, or Oracle compilers as well as
  functions instrumented by PDT and user functions. (Filtering of MPI
  functions, OpenMP is always ineffective.)

  Function instrumentation based on using the GNU and Intel interface
  has the limitation that instrumented functions in dynamically loaded
  (shared) libraries are not measured (i.e., implicitly filtered).

  The GNU Fortran compiler versions 4.6.0 and 4.6.1 have a bug which
  leads to an internal compiler error when using automatic function
  instrumentation.  It is therefore recommended to either use an
  older/newer version of the compiler or to work around this issue by
  using manual instrumentation or automatic source-code
  instrumentation based on PDToolkit.

  Function instrumentation using the Intel compiler version 11.1 for
  codes using OpenMP tasking is erroneous. You might try PDT
  instrumentation instead.

--------------------------------------------------------------------------------

* MPI support

  - When using derived data types in non-blocking communications, and
    no support for MPI_Type_dup() was detected, then please ensure,
    that the MPI_Datatype handle is still valid at the time the
    request finishes.
    
  - Online detection of MPI wait states might produce wrong results
    when messages sent within different communicators overtake each
    other.

--------------------------------------------------------------------------------

* Score-P misc.

  - Due to unreliable results using the RDTSCP timer Score-P switched
    to clock_gettime as default timer. Can be overridden by
    --enable-timer-cycle_counter_tsc at configure time.

  - There might be a performance impact when instrumenting code without
    explicitly given optimization flags. The instrumenter adds compiler
    flags to enable additional debugging information. Depending on the
    compiler this may turn off optimization unless optimization flags
    are explicitly specified.

  - Applications using an autotools-based buildsystem should add the
    option "--disable-option-checking" to the usual configure
    call. Score-P is added only at make time like "make CC="scorep
    <your-CC>" (same for CXX, F77, and FC)

  - Literal file-filter rules like "INCLUDE bt.f" for Fortran files that 
    will be processed by OPARI2 (i.e., files containing OpenMP or POMP 
    user pragmas) do not work as expected as OPARI2 changes the file 
    name (here to bt.opari.f)

  - Currently, the instrumenter allows to switch off OPARI2
    instrumentation for OpenMP programs. If OpenMP parallel regions
    are not instrumented and an event occures inside a parallel region
    (e.g., because an instrumented function is called inside of a
    parallel region) Score-P will crash. We are considering to make
    the usage more secure in future versions of Score-P. This might
    result in a change of the instrumenter option or the option may
    vanish completely.  However, there are some use-cases where
    disabling OPARI2 instrumentation is helpful.

  - Due to a bug in PDT 3.18 and earlier versions, PDT support is
    disabled on BlueGene systems.

  - Rusage-based metrics are not supported on BlueGene systems.

  - Rusage-based metric assertions fail on some systems for unknown
    reasons (ret != -1). Rusage-based metrics can't be used on these
    systems.

  - Currently it is not possible to reliably detect at configure time
    if the NVIDIA driver (possibly installed via a distribution's
    packet-manager) and the CUDA toolkit (possibly installed manually)
    are compatible. A safe option is to install the NVIDIA driver that
    comes with the toolkit and specify it's location via
    --with-libcuda[-(include|lib)].

--------------------------------------------------------------------------------

Please report bugs, wishes, and suggestions to
<scorep-bugs@groups.tu-dresden.de>.
