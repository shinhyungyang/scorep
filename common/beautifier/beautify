#!/bin/sh

# NAME
#     beautify [--on-committed] [--no-commit]
#
# DESCRIPTION
#     Beautify all modified and added source files in your working copy.
#     Without beautification, a commit may be rejected. Currently, the
#     beautification is performed by "uncrustify" using the configuration
#     file "common/beautifier/beautify.cfg" and, for Fortran 90 upwards,
#     "fprettify" using the configuration file
#     "common/beautifier/beautify_f.cfg".
#
#
# USAGE
#     Call beautify from anywhere in your working copy by relative path.
#     Can be used to automatically beautify each commit of a feature branch
#     with 'git rebase'
#
#         $ git rebase --reschedule-failed-exec --exec './common/beautifier/beautify --on-committed'
#
# AUTHORS
#     Christian Feld <c.feld@fz-juelich.de>
#     Markus Geimer <m.geimer@fz-juelich.de>
#     Bert Wesarg <bert.wesarg@tu-dresden.de>

set -e

argv0=${0##*/}
BEAUTIFY_ROOT=${0%/*}
: ${BEAUTIFY_ROOT:=.}
BEAUTIFY_ROOT=$(cd $BEAUTIFY_ROOT && pwd)

SUBDIRECTORY_OK=Yes
OPTIONS_SPEC="\
beautify [--on-committed] [--no-commit]
--
on-committed Honor also files in the last commit for beautification and amend commits the result, useful for 'git rebase --exec'
no-commit    Do not commit the result in case of --on-committed"
. $(git --exec-path)/git-sh-setup
require_work_tree
cd_to_toplevel

against=HEAD
do_commit=false
while test $# != 0
do
    case "$1" in
    (--on-committed)
        against=HEAD^1
        do_commit=true
        # Ensure that worktree and staging area is clean to prevent file clobbering
        if ! eval git diff-files --quiet --ignore-submodules --diff-filter=$filter               -- $extension ||
           ! eval git diff-index --quiet --ignore-submodules --diff-filter=$filter --cached HEAD -- $extension
        then
            die "error: Worktree or staging area not clean. Preventing clobbering of files."
        fi
        shift
        ;;
    (--no-commit)
        do_commit=false
        shift
        ;;
    (--)
        shift
        break;;
    (*)
        usage
        ;;
    esac
    shift
done

# Setup and use common beautification code
: ${BEAUTIFY_CONFIG:=$BEAUTIFY_ROOT/beautify.cfg}
: ${BEAUTIFY_F_CONFIG:=$BEAUTIFY_ROOT/beautify_f.cfg}
if [ ! -f $BEAUTIFY_ROOT/beautify-common ]
then
    echo "  ERROR    Could not find $BEAUTIFY_ROOT/beautify-common"
    exit 1
fi
. $BEAUTIFY_ROOT/beautify-common

# Iterate over candidate files in the index and the working copy, modifies
# the working copy
(
    eval git diff-files --name-only --ignore-submodules --diff-filter=$filter                   -- $extensions
    eval git diff-index --name-only --ignore-submodules --diff-filter=$filter --cached $against -- $extensions
) | sort -u |
while read path
do
    if ! beautify_candidate "$path"
    then
        continue
    fi
    if $do_commit
    then
        git add -- "$path"
    fi
done

if $do_commit && git diff-files --quiet --ignore-submodules
then
    git commit --amend --no-edit
fi
