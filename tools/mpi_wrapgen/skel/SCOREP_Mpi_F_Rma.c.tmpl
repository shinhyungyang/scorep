/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2019, 2022,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2019, 2025,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license. See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief Fortran interface wrappers for one-sided communication
 */

#include <config.h>
#include <scorep_mpi_f.h>

/* uppercase defines */
#pragma wrapgen multiple restrict(grma)      skel/SCOREP_Fmpi_DefineU.w

#pragma wrapgen multiple regex(MPI_Win_(allocate|allocate_shared|shared_query)) skel/SCOREP_Fmpi_DefineU_Cptr.w

#pragma wrapgen multiple restrict(grma_ext)  skel/SCOREP_Fmpi_DefineU.w

#pragma wrapgen multiple restrict(grma_misc+!n_c2f+!n_f2c) skel/SCOREP_Fmpi_DefineU.w

/* lowercase defines */
#pragma wrapgen multiple restrict(grma)      skel/SCOREP_Fmpi_DefineL.w

#pragma wrapgen multiple regex(MPI_Win_(allocate|allocate_shared|shared_query)) skel/SCOREP_Fmpi_DefineL_Cptr.w

#pragma wrapgen multiple restrict(grma_ext)  skel/SCOREP_Fmpi_DefineL.w

#pragma wrapgen multiple restrict(grma_misc+!n_c2f+!n_f2c) skel/SCOREP_Fmpi_DefineL.w

#ifndef NEED_F2C_CONV

/* If MPI_Comm_f2c is HAVE as a simple macro (which typically does nothing)
 * as it would require a "real" function if it is really needed
 * => we can save the f2c and c2s conversions */

/**
 * @name Fortran wrappers for access functions
 * @{
 */
#pragma wrapgen multiple regex(MPI_(Accumulate|Get|Put)$) skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for window management functions
 * @{
 */
#pragma wrapgen multiple regex(MPI_Win_(create|free)$) skel/SCOREP_Fmpi_Std.w

#pragma wrapgen single MPI_Win_get_group skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for synchronization functions
 * @{
 */
#pragma wrapgen multiple regex(MPI_Win_(fence|post|test|wait|start|complete|lock|unlock)$) skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for error handling functions
 * @{
 */
/* DO not wrap group rma_err */

/**
 * @}
 * @name Fortran wrappers for external interface functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_ext)  skel/SCOREP_Fmpi_Std.w


/**
 * @}
 * @name Fortran wrappers for new MPI-3 routines
  @{
  */
#pragma wrapgen multiple regex(MPI_(Raccumulate|Rget_accumulate|Rget|Rput|Get_accumulate|Fetch_and_op|Compare_and_swap)$) skel/SCOREP_Fmpi_Std.w
#pragma wrapgen multiple regex(MPI_Win_(allocate|allocate_shared|create_dynamic|lock_all|unlock_all|flush|flush_all|flush_local|flush_local_all|shared_query)$) skel/SCOREP_Fmpi_Std.w
#pragma wrapgen multiple regex(MPI_Win_(allocate|allocate_shared|shared_query)) skel/SCOREP_Fmpi_Std_Cptr.w

#else /* !NEED_F2C_CONV */

/**
 * @name Fortran wrappers for access functions
 * @{
 */
#pragma wrapgen multiple regex(MPI_(Accumulate|Get|Put)$) skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for window management functions
 * @{
 */
#pragma wrapgen multiple regex(MPI_Win_(create|free)$) skel/SCOREP_Mpi_F2c_C2f.w

#pragma wrapgen single MPI_Win_get_group skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for synchronization functions
 * @{
 */
#pragma wrapgen multiple regex(MPI_Win_(fence|post|test|wait|start|complete|lock|unlock)$) skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for error handling functions
 * @{
 */
/* Do not wrap group rma_err */

/**
 * @}
 * @name Fortran wrappers for external interface functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_ext)  skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for new MPI-3 routines
  @{
  */
#pragma wrapgen multiple regex(MPI_(Raccumulate|Rget_accumulate|Rget|Rput|Get_accumulate|Fetch_and_op|Compare_and_swap)$) skel/SCOREP_Mpi_F2c_C2f.w
#pragma wrapgen multiple regex(MPI_Win_(allocate|allocate_shared|create_dynamic|lock_all|unlock_all|flush|flush_all|flush_local|flush_local_all|shared_query)$) skel/SCOREP_Mpi_F2c_C2f.w
#pragma wrapgen multiple regex(MPI_Win_(allocate|allocate_shared|shared_query)) skel/SCOREP_Mpi_F2c_C2f_Cptr.w

/**
 * @}
 * @name Fortran wrappers for handle conversion functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_misc+!n_c2f+!n_f2c) skel/SCOREP_Mpi_F2c_C2f.w

#endif /* !NEED_F2C_CONV */

/**
 * @}
 */
