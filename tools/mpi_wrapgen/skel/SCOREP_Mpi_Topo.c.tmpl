/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2017,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2016, 2022,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license.  See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for topologies
 */

#include <config.h>

#include "SCOREP_Mpi.h"
#include "scorep_mpi_communicator.h"
#include <UTILS_Error.h>
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>
#include <SCOREP_Definitions.h>
#include <stdio.h>
#include <string.h>

/**
 * @name C wrappers
 * @{
 */

#if HAVE(MPI_1_0_SYMBOL_PMPI_CART_CREATE)
/**
 * Declaration of PMPI-symbol for MPI_Cart_create
 */
int PMPI_Cart_create( MPI_Comm comm_old, int ndims, SCOREP_MPI_CONST_DECL int* dims, SCOREP_MPI_CONST_DECL int* periodv, int reorder, MPI_Comm* comm_cart);

/**
 * Measurement wrapper for MPI_Cart_create
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1.0
 * @ingroup topo
 * Sequence of events:
 * @li enter region 'MPI_Cart_create'
 * @li define communicator
 * @li define topology
 * @li define coordinates
 * @li exit region 'MPI_Cart_create'
 */
int MPI_Cart_create( MPI_Comm                   comm_old,
                     int                        ndims,
                     SCOREP_MPI_CONST_DECL int* dims,
                     SCOREP_MPI_CONST_DECL int* periodv,
                     int                        reorder,
                     MPI_Comm*                  comm_cart)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_TOPO);
  SCOREP_InterimCommunicatorHandle new_comm_handle = SCOREP_INVALID_INTERIM_COMMUNICATOR;
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_CART_CREATE]);
      SCOREP_MpiCollectiveBegin();
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_CART_CREATE]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Cart_create(comm_old, ndims, dims, periodv, reorder, comm_cart);
  SCOREP_EXIT_WRAPPED_REGION();

    if ( *comm_cart != MPI_COMM_NULL )
    {
        /* register the new topology communicator
           creation independent from actual recording of the topology */
        new_comm_handle = scorep_mpi_comm_create( *comm_cart, comm_old );

        if ( scorep_mpi_enable_topologies )
        {
            /* get the internal communicator id for the communicator of the new topology */
            SCOREP_InterimCommunicatorHandle comm_id = scorep_mpi_comm_handle( *comm_cart );

            /* find the rank of the calling process */
            int my_rank;
            PMPI_Comm_rank( *comm_cart, &my_rank );

            /* create topology name*/
            /* length = prefix + ndims separators + 11 bytes per dimension */
            char topo_name[ 14 + ndims + 11 * ndims ];
            sprintf( topo_name, "MPI_Cartesian" );
            for ( int i = 0; i < ndims; ++i )
            {
                char sep = 'x';
                if ( i == 0 )
                {
                    sep = '_';
                }
                sprintf( topo_name + strlen( topo_name ), "%c%d", sep, dims[ i ] );
            }

            /* create the cartesian topology definition record */
            SCOREP_CartesianTopologyHandle topo_id = SCOREP_Definitions_NewCartesianTopology( topo_name,
                                                                                              comm_id,
                                                                                              ndims,
                                                                                              dims,
                                                                                              periodv,
                                                                                              NULL,
                                                                                              SCOREP_TOPOLOGIES_MPI );

            int coordv[ ndims ];
            PMPI_Cart_coords( *comm_cart, my_rank, ndims, coordv );

            /* create the coordinates definition record */
            SCOREP_Definitions_NewCartesianCoords( topo_id, my_rank, 0, ndims, coordv );
        }
    }
  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      if ( new_comm_handle != SCOREP_INVALID_INTERIM_COMMUNICATOR )
      {
        SCOREP_CommCreate(new_comm_handle);
      }
      SCOREP_MpiCollectiveEnd(SCOREP_MPI_COMM_HANDLE(comm_old),
                              SCOREP_INVALID_ROOT_RANK,
                              SCOREP_COLLECTIVE_CREATE_HANDLE,
                              0,
                              0);
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_CART_CREATE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_CART_CREATE]);
    }
    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE( MPI_1_0_SYMBOL_PMPI_CART_SUB )
/**
 * Declaration of PMPI-symbol for MPI_Cart_sub
 */
int PMPI_Cart_sub( MPI_Comm comm, SCOREP_MPI_CONST_DECL int* remain_dims, MPI_Comm* newcomm );

/**
 * Measurement wrapper for MPI_Cart_sub
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1.0
 * @ingroup topo
 * It triggers an enter and an exit event. Additionally, between enter event and exit
 * event, @ref SCOREP_Definitions_NewInterimCommunicator is called.
 */
int
MPI_Cart_sub( MPI_Comm comm, SCOREP_MPI_CONST_DECL int* remain_dims, MPI_Comm* newcomm )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_TOPO );
    SCOREP_InterimCommunicatorHandle new_comm_handle = SCOREP_INVALID_INTERIM_COMMUNICATOR;
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_CART_SUB ] );
            SCOREP_MpiCollectiveBegin();
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_CART_SUB ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Cart_sub( comm, remain_dims, newcomm );
    SCOREP_EXIT_WRAPPED_REGION();
    if ( *newcomm != MPI_COMM_NULL )
    {
        new_comm_handle = scorep_mpi_comm_create( *newcomm, comm );

        SCOREP_InterimCommunicatorHandle comm_id     = scorep_mpi_comm_handle( comm );
        SCOREP_InterimCommunicatorHandle sub_comm_id = scorep_mpi_comm_handle( *newcomm );

        int ndims, nparentdims;
        PMPI_Cartdim_get( *newcomm, &ndims );

        int subdims[ ndims ], subperiods[ ndims ], subcoords[ ndims ];
        PMPI_Cart_get( *newcomm, ndims, subdims, subperiods, subcoords );

        /* create topology name*/
        /* length = prefix + ndims separators + 11 bytes per dimension */
        char topo_name[ 18 + ndims + 11 * ndims ];
        sprintf( topo_name, "Sub MPI_Cartesian" );
        for ( int i = 0; i < ndims; ++i )
        {
            char sep = 'x';
            if ( i == 0 )
            {
                sep = '_';
            }
            sprintf( topo_name + strlen( topo_name ), "%c%d", sep, subdims[ i ] );
        }

        /* create the cartesian topology definition record */
        SCOREP_CartesianTopologyHandle topo_id = SCOREP_Definitions_NewCartesianTopology( topo_name,
                                                                                          sub_comm_id,
                                                                                          ndims,
                                                                                          subdims,
                                                                                          subperiods,
                                                                                          NULL,
                                                                                          SCOREP_TOPOLOGIES_MPI );
        int my_rank;
        PMPI_Comm_rank( *newcomm, &my_rank );

        /* create the coordinates definition record */
        SCOREP_Definitions_NewCartesianCoords( topo_id, my_rank, 0, ndims, subcoords );
    }

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if ( new_comm_handle != SCOREP_INVALID_INTERIM_COMMUNICATOR )
            {
              SCOREP_CommCreate(new_comm_handle);
            }
            SCOREP_MpiCollectiveEnd(SCOREP_MPI_COMM_HANDLE(comm),
                                    SCOREP_INVALID_ROOT_RANK,
                                    SCOREP_COLLECTIVE_CREATE_HANDLE,
                                    0,
                                    0);
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_CART_SUB ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_CART_SUB ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#pragma wrapgen single MPI_Graph_create skel/SCOREP_Mpi_CommMgnt.w

#pragma wrapgen single MPI_Dist_graph_create skel/SCOREP_Mpi_CommMgnt.w
#pragma wrapgen single MPI_Dist_graph_create_adjacent skel/SCOREP_Mpi_CommMgnt.w

#pragma wrapgen multiple restrict(gtopo+!ncreate+!nsub) skel/SCOREP_Mpi_Std.w
#pragma wrapgen single MPI_Dims_create skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
