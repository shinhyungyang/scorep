
/**
 * @file  SCOREP_Fmpi_Spawn.c
 * @maintainer Daniel Lorenz <d.lorenz@fz-juelich.de>
 * @status     alpha
 * @ingroup    MPI_Wrapper
 *
 * @brief Fortran interface wrappers for process creation and management 
 *        functions (spawning interface)
 */

#include <config.h>
#include "SCOREP_Fmpi.h"

#include <UTILS_Error.h>

/* uppercase defines */
#pragma wrapgen multiple restrict(gspawn) skel/SCOREP_Fmpi_DefineU.w

/* lowercase defines */
#pragma wrapgen multiple restrict(gspawn) skel/SCOREP_Fmpi_DefineL.w

/**
 * @name Fortran wrappers 
 * @{
 */

#ifndef NEED_F2C_CONV

/* If MPI_Comm_f2c is HAVE as a simple macro (which typically does nothing)
 * as it would require a "real" function if it is really needed
 * => we can save the f2c and c2s conversions */

#if HAVE(DECL_PMPI_COMM_SPAWN_MULTIPLE) && ! defined(SCOREP_MPI_NO_SPAWN) && ! defined(SCOREP_MPI_NO_EXTRA)
/**
 * Manual measurement wrapper for MPI_Comm_spawn_multiple
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI 2.0
 * @ingroup spawn
 */
void FSUB(MPI_Comm_spawn_multiple)(int* count,
                                   char* array_of_commands,
                                   char* array_of_argv,
                                   int* array_of_maxprocs,
                                   MPI_Info* array_of_info,
                                   int* root,
                                   MPI_Comm* comm,
                                   MPI_Comm* intercomm,
                                   int* array_of_errcodes,
                                   int* ierr,
                                   int array_of_commands_len,
                                   int array_of_argv_len)
{
  MPI_Fint  cur_cmd, cur_arg;
  char**    c_array_of_commands = NULL;
  char***   c_array_of_argv     = NULL;
  int      array_size        = *count + 1; /* additional space needed for empty element */
  /* allocate and fill local array_of_commands */

  c_array_of_commands = (char**)malloc(*count * sizeof (char*));
  if (!c_array_of_commands) 
  { 
    UTILS_ERROR_POSIX(); 
  }

  for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
  {
    char* start_ptr = array_of_commands + cur_cmd * array_of_commands_len;
    char* ptr       = start_ptr + array_of_commands_len - 1;
    int   len       = 0;

    /* Fortran strings are 'blank' padded */
    while (*ptr == ' ' && ptr > start_ptr) 
    {
      ptr--; 
    }
    len = ptr - start_ptr;
    c_array_of_commands[cur_cmd] = (char*) malloc((len + 1) * sizeof(char));
    if (!(c_array_of_commands[cur_cmd]))
    {
      UTILS_ERROR_POSIX();
    }
    /* copy contents */
    strncpy(c_array_of_commands[cur_cmd], start_ptr, len);
    /* null terminate string */
    c_array_of_commands[cur_cmd][len] = '\0';
  }

  /* check for special case of no arguments */
  if ((char***)array_of_argv == MPI_ARGVS_NULL)
  {
    c_array_of_argv = MPI_ARGVS_NULL;
  }
  else
  {
    /*
     * we need to convert Fortran argument list to C 
     * NOTE: Argument list is a column-major 2D Fortran array with fixed
     *       width entries. 
     */

    /* allocate and fill local array_of_argv */
    c_array_of_argv = (char***)malloc(array_size * sizeof (char**));
    if (!c_array_of_argv)
    {
      UTILS_ERROR_POSIX();
    }

    for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
    {
      int   arg_count = 0;  /* keep track of number of arguments */
      int   arg_size  = 0;  /* keep track of total storage needed for arguments */
      int   arg_len   = 0;
      char* start_ptr = array_of_argv + cur_cmd * array_of_argv_len;
      char* ptr       = NULL;
      char* c_arg_ptr = 0; /* pointer used for copying arguments into array */

      for (cur_arg = 0; 1; ++cur_arg)
      {
        /* start at first column entry of command */
        ptr = start_ptr + array_of_argv_len - 1;
        
        /* track number of arguments */
        arg_count = cur_arg;

        /* truncate padding */
        while (*ptr == ' ' && ptr > start_ptr)
        {
          ptr--;
        }
        if (ptr == start_ptr)
        {
          /* terminating empty argument was found */
          break;
        }

        arg_size += ptr - start_ptr + 1; /* add space for null termination */

        /* move start_ptr to next column */
        start_ptr += *count * array_of_argv_len;
      }

      /* allocate target array */
      c_array_of_argv[cur_cmd]    = (char**) malloc((arg_count + 1) * sizeof(char*));
      if (!(c_array_of_argv[cur_cmd]))
      {
        UTILS_ERROR_POSIX();
      }

      /* allocate a single block with sufficient capacity to minimize
       * system calls */
      c_array_of_argv[cur_cmd][0] = (char*)  malloc(arg_size * sizeof(char));
      if (!(c_array_of_argv[cur_cmd][0]))
      {
        UTILS_ERROR_POSIX();
      }  
      /* set index to begining of the block */
      c_arg_ptr = c_array_of_argv[cur_cmd][0];

      /* reset start_ptr */
      start_ptr = array_of_argv + cur_cmd * array_of_argv_len;
      for (cur_arg = 0; cur_arg < arg_count; ++cur_arg)
      {
        /* truncate padding */
        ptr       = start_ptr + array_of_argv_len - 1;
        while (*ptr == ' ' && ptr > start_ptr)
        {
          ptr--;
        }
        arg_len = ptr - start_ptr;
        strncpy(c_arg_ptr, start_ptr, arg_len);
        /* terminate string */
        c_arg_ptr[arg_len]  = '\0';
        /* save start of argument to c_array_of_argv */
        c_array_of_argv[cur_cmd][cur_arg] = c_arg_ptr;
        /* advance c_arg_ptr to next free position */
        c_arg_ptr      += arg_len + 1;
        /* proceed to next column */
        start_ptr += *count * array_of_argv_len;
      }
      /* null terminate argument array for command */
      c_array_of_argv[cur_cmd][arg_count] = NULL;
    }
    /* null terminate complete argument array */
    c_array_of_argv[*count] = NULL;
  }

  *ierr = MPI_Comm_spawn_multiple(*count, c_array_of_commands, 
                                  c_array_of_argv, array_of_maxprocs, 
                                  array_of_info, *root, *comm, 
                                  intercomm, array_of_errcodes);

  /* free array of commands */
  for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
  {
    free(c_array_of_commands[cur_cmd]);
    free(c_array_of_argv[cur_cmd][0]);
    free(c_array_of_argv[cur_cmd]);
  }
  free(c_array_of_commands);
  free(c_array_of_argv);

} /* FSUB(MPI_Comm_spawn_multiple) */

#endif

#if HAVE(MPI_COMM_SPAWN) && !defined(NO_MPI_SPAWN) \
  && !defined(NO_MPI_EXTRA)
/**
 * Measurement wrapper for MPI_Comm_spawn
 * @note Manually adapter wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2
 * @ingroup spawn
 */
void FSUB(MPI_Comm_spawn)(char*     command,
                          char*     argv,
                          int* maxprocs,
                          MPI_Info* info,
                          int* root,
                          MPI_Comm* comm,
                          MPI_Comm* newcomm,
                          int* array_of_errcodes,
                          int*      ierr,
                          int       command_len,
                          int       argv_len)
{
  char*    c_command = NULL;
  char**   c_argv    = NULL;
  int      arg_count = 0;
  int      arg_size  = 0;
  int      arg_len   = 0;
  int      cur_arg   = 0;
  char*    start_ptr = NULL;
  char*    ptr       = NULL;
  char*    c_arg_ptr = NULL;

  /* convert command */
  c_command = (char*)malloc((command_len + 1) * sizeof (char));
  if (!c_command)
  {
    UTILS_ERROR_POSIX();
  }

  strncpy(c_command, command, command_len);
  c_command[command_len] = '\0';

  if ((char**)argv == MPI_ARGV_NULL)
  {
    c_argv = MPI_ARGV_NULL;
  }
  else
  {
    /* convert array of arguments */
    for (cur_arg = 0; 1; ++cur_arg)
    {
      /* count arguments and track overall size */
      start_ptr = argv + cur_arg * argv_len;
      ptr       = start_ptr + argv_len - 1;

      while (*ptr == ' ' && ptr > start_ptr)
      {
        ptr--;
      }
      arg_size += ptr - start_ptr + 1;

      if (ptr == start_ptr)
      {
        /* found terminating empty argument */
        arg_count = cur_arg;
        break;
      }
    }

    c_argv = (char**)malloc((arg_count + 1) * sizeof (char));
    if (!c_argv)
    {
      UTILS_ERROR_POSIX();
    }

    c_argv[0] = (char*) malloc(arg_size * sizeof(char));
    if (!(c_argv[0]))
    {
      UTILS_ERROR_POSIX();
    }

    c_arg_ptr = c_argv[0];
    for (cur_arg = 0; cur_arg < arg_count; ++cur_arg)
    {
      /* count arguments and track overall size */
      start_ptr = argv + cur_arg * argv_len;
      ptr       = start_ptr + argv_len - 1;

      while (*ptr == ' ' && ptr > start_ptr)
      {
        ptr--;
      }
      arg_len = ptr - start_ptr;

      strncpy(c_arg_ptr, start_ptr, argv_len);
      c_arg_ptr[arg_len] = '\0';
      c_argv[cur_arg]    = c_arg_ptr;
      c_arg_ptr         += arg_len + 1;
    }
  }

  *ierr = MPI_Comm_spawn(c_command, c_argv, *maxprocs, 
                         *info, *root, *comm, newcomm, 
                         array_of_errcodes);

  free(c_command);
  free(c_argv);
} /* FSUB(MPI_Comm_spawn) */
#endif

#pragma wrapgen multiple restrict(gspawn+!nspawn) skel/SCOREP_Fmpi_Std.w

#else /* !NEED_F2C_CONV */

#if HAVE(DECL_PMPI_COMM_SPAWN_MULTIPLE) && ! defined(SCOREP_MPI_NO_SPAWN) && ! defined(SCOREP_MPI_NO_EXTRA)
/**
 * Manual measurement wrapper for MPI_Comm_spawn_multiple
 * @ingroup manual_wrapper
 * @ingroup interface_fortran
 * @ingroup mpi_version_2
 * @ingroup mpi_enabled_proc
 */
void FSUB(MPI_Comm_spawn_multiple)(MPI_Fint* count,
                                   char*     array_of_commands,
                                   char*     array_of_argv,
                                   MPI_Fint* array_of_maxprocs,
                                   MPI_Fint* array_of_info,
                                   MPI_Fint* root,
                                   MPI_Fint* comm,
                                   MPI_Fint* intercomm,
                                   MPI_Fint* array_of_errcodes,
                                   MPI_Fint* ierr,
                                   MPI_Fint  array_of_commands_len,
                                   MPI_Fint  array_of_argv_len)
{
  MPI_Fint cur_cmd, cur_arg;
  char**    c_array_of_commands = NULL;
  char***   c_array_of_argv     = NULL;
  MPI_Info* c_array_of_info     = NULL;
  MPI_Comm  c_intercomm, c_comm;
  int       array_size          = *count + 1; // additional space needed for empty element
 
  /* allocate and fill local array_of_commands */
  c_array_of_commands = (char**)malloc(*count * sizeof (char*));
  if (!c_array_of_commands)
  {
    UTILS_ERROR_POSIX();
  }

  for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
  {
    char* start_ptr = array_of_commands + cur_cmd * array_of_commands_len;
    char* ptr       = start_ptr + array_of_commands_len - 1;
    int   len       = 0;

    /* Fortran strings are 'blank' padded */
    while (*ptr == ' ' && ptr > start_ptr) 
    {
      ptr--; 
    }
    len = ptr - start_ptr;
    c_array_of_commands[cur_cmd] = (char*) malloc((len + 1) * sizeof(char));
    if (!(c_array_of_commands[cur_cmd])) UTILS_ERROR_POSIX();
    /* copy contents */
    strncpy(c_array_of_commands[cur_cmd], start_ptr, len);
    /* null terminate string */
    c_array_of_commands[cur_cmd][len] = '\0';
  }

  /* check for special case of no arguments */
  if ((char***)array_of_argv == MPI_ARGVS_NULL)
  {
    c_array_of_argv = MPI_ARGVS_NULL;
  }
  else
  {
    /*
     * we need to convert Fortran argument list to C 
     * NOTE: Argument list is a column-major 2D Fortran array with fixed
     *       width entries. 
     */

    /* allocate and fill local array_of_argv */
    c_array_of_argv = (char***)malloc(array_size * sizeof (char**));
    if (!c_array_of_argv) UTILS_ERROR_POSIX();

    for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
    {
      int   arg_count = 0;  /* keep track of number of arguments */
      int   arg_size  = 0;  /* keep track of total storage needed for arguments */
      int   arg_len   = 0;
      char* start_ptr = array_of_argv + cur_cmd * array_of_argv_len;
      char* ptr       = NULL;
      char* c_arg_ptr = NULL; /* pointer used for copying arguments into array */

      for (cur_arg = 0; 1; ++cur_arg)
      {
        /* start at first column entry of command */
        ptr = start_ptr + array_of_argv_len - 1;
        
        /* track number of arguments */
        arg_count = cur_arg;

        /* truncate padding */
        while (*ptr == ' ' && ptr > start_ptr)
        {
          ptr--;
        }
        if (ptr == start_ptr)
        {
          /* terminating empty argument was found */
          break;
        }

        arg_size += ptr - start_ptr + 1; /* add space for null termination */

        /* move start_ptr to next column */
        start_ptr += *count * array_of_argv_len;
      }

      /* allocate target array */
      c_array_of_argv[cur_cmd]    = (char**) malloc((arg_count + 1) * sizeof(char*));
      if (!(c_array_of_argv[cur_cmd])) UTILS_ERROR_POSIX();

      /* allocate a single block with sufficient capacity to minimize
       * system calls */
      c_array_of_argv[cur_cmd][0] = (char*)  malloc(arg_size * sizeof(char));
      if (!(c_array_of_argv[cur_cmd][0])) UTILS_ERROR_POSIX();
      /* set index to begining of the block */
      c_arg_ptr = c_array_of_argv[cur_cmd][0];

      /* reset start_ptr */
      start_ptr = array_of_argv + cur_cmd * array_of_argv_len;
      for (cur_arg = 0; cur_arg < arg_count; ++cur_arg)
      {
        /* truncate padding */
        ptr       = start_ptr + array_of_argv_len - 1;
        while (*ptr == ' ' && ptr > start_ptr)
        {
          ptr--;
        }
        arg_len = ptr - start_ptr;
        strncpy(c_arg_ptr, start_ptr, arg_len);
        /* terminate string */
        c_arg_ptr[arg_len]  = '\0';
        /* save start of argument to c_array_of_argv */
        c_array_of_argv[cur_cmd][cur_arg] = c_arg_ptr;
        /* advance c_arg_ptr to next free position */
        c_arg_ptr      += arg_len + 1;
        /* proceed to next column */
        start_ptr += *count * array_of_argv_len;
      }
      /* null terminate argument array for command */
      c_array_of_argv[cur_cmd][arg_count] = NULL;
    }
    /* null terminate complete argument array */
    c_array_of_argv[*count] = NULL;
  }

  /* convert info objects */
  c_array_of_info = (MPI_Info*) malloc (*count * sizeof(MPI_Info));
  if (!c_array_of_info) UTILS_ERROR_POSIX();
  for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
  {
    c_array_of_info[cur_cmd] = PMPI_Info_f2c(array_of_info[cur_cmd]);
  }

  /* convert incoming communicator */
  c_comm = PMPI_Comm_f2c(*comm);

  *ierr = MPI_Comm_spawn_multiple(*count, c_array_of_commands, 
                                  c_array_of_argv, array_of_maxprocs, 
                                  c_array_of_info, *root, c_comm, 
                                  &c_intercomm, array_of_errcodes);

  /* convert outgoing communicator */
  *intercomm = PMPI_Comm_c2f(c_intercomm);

  /* free array of commands */
  for (cur_cmd = 0; cur_cmd < *count; ++cur_cmd)
  {
    free(c_array_of_commands[cur_cmd]);
    free(c_array_of_argv[cur_cmd][0]);
    free(c_array_of_argv[cur_cmd]);
  }
  free(c_array_of_commands);
  free(c_array_of_argv);
  free(c_array_of_info);

} /* FSUB(MPI_Comm_spawn_multiple) */
#endif

#if HAVE(PMPI_COMM_SPAWN) && !defined(NO_MPI_SPAWN) \
  && !defined(NO_MPI_EXTRA)
/**
 * Measurement wrapper for MPI_Comm_spawn
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2
 * @ingroup spawn
 */
void FSUB(MPI_Comm_spawn)(char*     command,
                          char*     argv,
                          MPI_Fint* maxprocs,
                          MPI_Fint* info,
                          MPI_Fint* root,
                          MPI_Fint* comm,
                          MPI_Fint* newcomm,
                          MPI_Fint* array_of_errcodes,
                          MPI_Fint* ierr,
                          MPI_Fint  command_len,
                          MPI_Fint  argv_len)
{
  char*    c_command = NULL;
  char**   c_argv    = NULL;
  MPI_Comm c_newcomm = MPI_COMM_NULL;
  int      arg_count = 0;
  int      arg_size  = 0;
  int      arg_len   = 0;
  int      cur_arg   = 0;
  char*    start_ptr = NULL;
  char*    ptr       = NULL;
  char*    c_arg_ptr = NULL;

  /* convert command */
  c_command = (char*)malloc((command_len + 1) * sizeof (char));
  if (!c_command) UTILS_ERROR_POSIX();

  strncpy(c_command, command, command_len);
  c_command[command_len] = '\0';

  if ((char**)argv == MPI_ARGV_NULL)
  {
    c_argv = MPI_ARGV_NULL;
  }
  else
  {
    /* convert array of arguments */
    for (cur_arg = 0; 1; ++cur_arg)
    {
      /* count arguments and track overall size */
      start_ptr = argv + cur_arg * argv_len;
      ptr       = start_ptr + argv_len - 1;

      while (*ptr == ' ' && ptr > start_ptr)
      {
        ptr--;
      }
      arg_size += ptr - start_ptr + 1;

      if (ptr == start_ptr)
      {
        /* found terminating empty argument */
        arg_count = cur_arg;
        break;
      }
    }

    c_argv = (char**)malloc((arg_count + 1) * sizeof (char));
    if (!c_argv) UTILS_ERROR_POSIX();

    c_argv[0] = (char*) malloc(arg_size * sizeof(char));
    if (!(c_argv[0])) SCOREP_ERROR_POSIX;

    c_arg_ptr = c_argv[0];
    for (cur_arg = 0; cur_arg < arg_count; ++cur_arg)
    {
      /* count arguments and track overall size */
      start_ptr = argv + cur_arg * argv_len;
      ptr       = start_ptr + argv_len - 1;

      while (*ptr == ' ' && ptr > start_ptr)
      {
        ptr--;
      }
      arg_len = ptr - start_ptr;

      strncpy(c_arg_ptr, start_ptr, argv_len);
      c_arg_ptr[arg_len] = '\0';
      c_argv[cur_arg]    = c_arg_ptr;
      c_arg_ptr         += arg_len + 1;
    }
  }

  *ierr = MPI_Comm_spawn(c_command, c_argv, *maxprocs, 
                         PMPI_Info_f2c(*info), *root, 
                         PMPI_Comm_f2c(*comm), &c_newcomm, 
                         array_of_errcodes);

  /* convert communicator handle */
  *newcomm = PMPI_Comm_c2f(c_newcomm);
  
  free(c_command);
  free(c_argv);
} /* FSUB(MPI_Comm_spawn) */
#endif

#pragma wrapgen multiple restrict(gspawn+!nspawn) skel/SCOREP_Mpi_F2c_C2f.w

#endif

/**
 * @}
 */
