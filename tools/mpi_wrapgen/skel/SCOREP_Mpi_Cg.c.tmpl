/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for communicator and group functions
 */

#include <config.h>
#include "SCOREP_Mpi.h"
#include "scorep_mpi_communicator.h"
#include <SCOREP_Events.h>

/**
 * @name C wrappers for communicator constructors
 * @{
 */

#pragma wrapgen multiple regex((Interc|C)omm_(create|dup|merge|split)$) skel/SCOREP_Mpi_CommMgnt.w


/**
 * @}
 * @name C wrappers for communicator destructors
 * @{
 */

#if HAVE(DECL_PMPI_COMM_FREE)
/**
 * Measurement wrapper for MPI_Comm_free
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup cg
 */
int MPI_Comm_free(MPI_Comm* comm)
{
  const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_CG);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    SCOREP_EnterRegion (scorep_mpi_regid[SCOREP__MPI_COMM_FREE]);
  }

  scorep_mpi_comm_free(*comm);
  return_val = PMPI_Comm_free (comm);

  if (event_gen_active)
  {
    SCOREP_ExitRegion(scorep_mpi_regid[SCOREP__MPI_COMM_FREE]);
    SCOREP_MPI_EVENT_GEN_ON ();
  }

  return return_val;
}
#endif


/**
 * @}
 * @name C wrappers for group constructors
 * @{
 */

#pragma wrapgen multiple regex(Group.*(diff|incl|excl|intersection|union)) skel/SCOREP_Mpi_GroupMgnt.w
#pragma wrapgen multiple regex(Comm.*group$)                               skel/SCOREP_Mpi_Group.w

/**
 * @}
 * @name C wrappers for group destructors
 * @{
 */

#if HAVE(DECL_PMPI_GROUP_FREE)
/**
 * Measurement wrapper for MPI_Group_free
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup cg
 */
int MPI_Group_free(MPI_Group* group)
{
  const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_CG);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    SCOREP_EnterRegion(scorep_mpi_regid[SCOREP__MPI_GROUP_FREE]);
  }

  scorep_mpi_group_free(*group);
  return_val = PMPI_Group_free(group);

  if (event_gen_active)
  {
    SCOREP_ExitRegion (scorep_mpi_regid[SCOREP__MPI_GROUP_FREE]);
    SCOREP_MPI_EVENT_GEN_ON ();
  }

  return return_val;
}
#endif

/**
 * @}
 * @name C wrappers for miscelaneous functions
 * @{
 */

#pragma wrapgen multiple regex((Intercomm|Comm|Group)_(compare|rank|ranks|size|test_inter)$) skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for error handling functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_err) skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for external interface functions
 * @{
 */

#if HAVE( DECL_PMPI_COMM_SET_NAME ) && !defined( SCOREP_MPI_NO_EXTRA ) && !defined( SCOREP_MPI_NO_CG ) && !defined( SCOREP_MPI_NO_EXT ) && !defined( MPI_Comm_set_name )
/**
 * Measurement wrapper for MPI_Comm_set_name
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup cg_ext
 * Triggers an enter and exit event.
 * It wraps the me) call with enter and exit events.
 */
int
MPI_Comm_set_name( MPI_Comm comm, SCOREP_MPI_CONST_DECL char* comm_name )
{
    int return_val;

    if ( SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_CG_EXT ) )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        SCOREP_EnterRegion( scorep_mpi_regid[ SCOREP__MPI_COMM_SET_NAME ] );

        return_val = PMPI_Comm_set_name( comm, comm_name );
        if ( return_val == MPI_SUCCESS )
        {
            scorep_mpi_comm_set_name( comm, comm_name );
        }

        SCOREP_ExitRegion( scorep_mpi_regid[ SCOREP__MPI_COMM_SET_NAME ] );
        SCOREP_MPI_EVENT_GEN_ON();
    }
    else
    {
        return_val = PMPI_Comm_set_name( comm, comm_name );
    }

    return return_val;
}
#endif

#pragma wrapgen multiple restrict(gcg_ext+!nMPI_Comm_set_name) skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for handle conversion functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_misc+!n_c2f+!n_f2c) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
