/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for communicator and group functions
 */

#include <config.h>
#include "SCOREP_Mpi.h"
#include "scorep_mpi_communicator.h"
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>
#include <UTILS_Error.h>

/**
 * @name C wrappers for communicator constructors
 * @{
 */

#pragma wrapgen multiple regex((Interc|C)omm_(create|create_group|dup|dup_with_info|merge|split|split_type)$) skel/SCOREP_Mpi_CommMgnt.w

#if HAVE( DECL_PMPI_COMM_IDUP )
/**
 * Measurement wrapper for MPI_Comm_idup
 * @note C interface
 * @note Introduced with MPI-3
 * @ingroup cg
 * Triggers a program abort as this routine is not supported by Score-P.
 */
int
MPI_Comm_idup( MPI_Comm comm, MPI_Comm* newcomm, MPI_Request* request )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_CG );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_IDUP ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_IDUP ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Comm_idup( comm, newcomm, request );
    SCOREP_EXIT_WRAPPED_REGION();
    if ( return_val == MPI_SUCCESS )
    {
        scorep_mpi_request_comm_idup_create( *request, comm, newcomm );
    }

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_IDUP ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_IDUP ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

/**
 * @}
 * @name C wrappers for communicator destructors
 * @{
 */

#if HAVE(DECL_PMPI_COMM_FREE)
/**
 * Measurement wrapper for MPI_Comm_free
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup cg
 */
int MPI_Comm_free(MPI_Comm* comm)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_CG);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_FREE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_FREE]);
    }
  }

  scorep_mpi_comm_free(*comm);

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Comm_free (comm);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_FREE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_FREE]);
    }
    SCOREP_MPI_EVENT_GEN_ON ();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif


/**
 * @}
 * @name C wrappers for group constructors
 * @{
 */

#pragma wrapgen multiple regex(Group.*(diff|incl|excl|intersection|union)) skel/SCOREP_Mpi_GroupMgnt.w
#pragma wrapgen multiple regex(Comm_(group|remote_group)$)                 skel/SCOREP_Mpi_Group.w

/**
 * @}
 * @name C wrappers for group destructors
 * @{
 */

#if HAVE(DECL_PMPI_GROUP_FREE)
/**
 * Measurement wrapper for MPI_Group_free
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup cg
 */
int MPI_Group_free(MPI_Group* group)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_CG);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_GROUP_FREE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_GROUP_FREE]);
    }
  }

  scorep_mpi_group_free(*group);

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Group_free(group);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_GROUP_FREE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_GROUP_FREE]);
    }
    SCOREP_MPI_EVENT_GEN_ON ();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

/**
 * @}
 * @name C wrappers for miscelaneous functions
 * @{
 */

#pragma wrapgen multiple regex((Intercomm|Comm|Group)_(compare|rank|ranks|size|test_inter)$) skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for error handling functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_err) skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for external interface functions
 * @{
 */

#if HAVE( DECL_PMPI_COMM_SET_NAME ) && !defined( SCOREP_MPI_NO_EXTRA ) && !defined( SCOREP_MPI_NO_CG ) && !defined( SCOREP_MPI_NO_EXT ) && !defined( MPI_Comm_set_name )
/**
 * Measurement wrapper for MPI_Comm_set_name
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup cg_ext
 * Triggers an enter and exit event.
 * It wraps the me) call with enter and exit events.
 */
int
MPI_Comm_set_name( MPI_Comm comm, SCOREP_MPI_CONST_DECL char* comm_name )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_CG_EXT);
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_SET_NAME ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_SET_NAME ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Comm_set_name( comm, comm_name );
    SCOREP_EXIT_WRAPPED_REGION();
    if ( return_val == MPI_SUCCESS )
    {
        scorep_mpi_comm_set_name( comm, comm_name );
    }

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_SET_NAME ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_COMM_SET_NAME ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#pragma wrapgen multiple restrict(gcg_ext+!nMPI_Comm_set_name) skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for handle conversion functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_misc+!n_c2f+!n_f2c) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
