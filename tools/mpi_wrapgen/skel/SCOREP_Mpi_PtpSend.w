${guard:start}
/**
 * Measurement wrapper for ${name}
 * @note Auto-generated by wrapgen from template: SCOREP_Mpi_PtpSend.w
 * @note C interface
 * @note Introduced with MPI-${mpi:version}
 * @ingroup ${group|lowercase}
 * Sequence of events:
 * @li enter region '${name}'
 * @li MPI send event
 * @li exit region '${name}'
 */
${proto:c}
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_${group|uppercase});
  ${rtype} return_val;

  int sz;
  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__${name|uppercase}]);

      if (dest != MPI_PROC_NULL)
      {
        PMPI_Type_size(datatype, &sz);
        SCOREP_MpiSend(dest, SCOREP_MPI_COMM_HANDLE(comm),
                       tag, (uint64_t)count * sz);
      }
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__${name|uppercase}]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = ${call:pmpi};
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      if ( dest != MPI_PROC_NULL && scorep_mpi_ltimer_enabled() )
      {
        const scorep_mpi_ltimer timer_value = scorep_mpi_get_ltimer();
        PMPI_Send( &timer_value, 1, scorep_mpi_ltimer_datatype, dest, scorep_mpi_ltimer_tag, comm );
        /* TODO:
         * use
         * scorep_mpi_ltimer_send( dest, comm );
         * instead.
         * This currently leads to a deadlock/indefinetly waiting program,
         * when an MPI_Send is used in combination with an MPI_Irecv
         */
      }
      SCOREP_Timer_Subsystem_Logic_Event_Sync = true;
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__${name|uppercase}]);
      SCOREP_Timer_Subsystem_Logic_Event_Sync = false;
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__${name|uppercase}]);
    }
    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
${guard:end}
