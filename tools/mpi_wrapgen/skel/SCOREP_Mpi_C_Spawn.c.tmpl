/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2017,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2015, 2022-2023, 2025,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license. See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for process creation and management
 *        functions (spawning interface)
 */

#include <config.h>
#include "SCOREP_Mpi_C_Reg.h"
#include <scorep_mpi_groups.h>
#include <scorep_mpi_c.h>
#include <scorep_mpi_communicator.h>
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>

/**
 * @name C wrappers
 * @{
 */

#pragma wrapgen multiple restrict(gspawn+!n_name+!n_port+!ndisconnect+!njoin+!n_parent) skel/SCOREP_Mpi_CommMgnt.w
#pragma wrapgen single MPI_Comm_join skel/SCOREP_Mpi_CommMgntSubset.w

#if HAVE(MPI_2_0_SYMBOL_PMPI_COMM_DISCONNECT) && ! defined(SCOREP_MPI_NO_SPAWN)
/**
 * Declaration of PMPI-symbol for MPI_Comm_disconnect
 */
int PMPI_Comm_disconnect(MPI_Comm* comm);

/**
 * Measurement wrapper for MPI_Comm_disconnect
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup spawn
 * Triggers an enter and exit event.
 */
int MPI_Comm_disconnect(MPI_Comm* comm)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_SPAWN);
  SCOREP_InterimCommunicatorHandle freed_handle = SCOREP_MPI_COMM_HANDLE(*comm);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_DISCONNECT]);
      SCOREP_MpiCollectiveBegin();
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_DISCONNECT]);
    }
  }

  scorep_mpi_comm_free(*comm);
  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Comm_disconnect(comm);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_CommDestroy(freed_handle);
      SCOREP_MpiCollectiveEnd(freed_handle,
                              SCOREP_INVALID_ROOT_RANK,
                              SCOREP_COLLECTIVE_DESTROY_HANDLE,
                              0,
                              0);
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_DISCONNECT]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_DISCONNECT]);
    }
    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#pragma wrapgen single MPI_Comm_get_parent skel/SCOREP_Mpi_Std.w

#pragma wrapgen multiple restrict(gspawn+n_name) skel/SCOREP_Mpi_Std.w

#pragma wrapgen multiple restrict(gspawn+n_port) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
