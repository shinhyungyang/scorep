/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for process creation and management
 *        functions (spawning interface)
 */

#include <config.h>

/* We do wrap deprecated functions here, but we don't want warnings */
#define OMPI_WANT_MPI_INTERFACE_WARNING 0
#include "SCOREP_Mpi.h"
#include "scorep_mpi_communicator.h"
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>

/**
 * @name C wrappers
 * @{
 */

#pragma wrapgen multiple restrict(gspawn+!n_name+!n_port+!ndisconnect+!n_parent) skel/SCOREP_Mpi_CommMgnt.w

#if HAVE(DECL_PMPI_COMM_DISCONNECT) && ! defined(SCOREP_MPI_NO_SPAWN)
/**
 * Measurement wrapper for MPI_Comm_disconnect
 * @note Auto-generated by wrapgen from template: comm_mgnt.w
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup spawn
 * Triggers an enter and exit event.
 */
int MPI_Comm_disconnect(MPI_Comm* comm)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_SPAWN);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_DISCONNECT],
                              ( intptr_t )PMPI_Comm_disconnect);
  }

  scorep_mpi_comm_free(*comm);
  if (event_gen_active)
  {
    SCOREP_ENTER_WRAPPED_REGION();
  }
  return_val = PMPI_Comm_disconnect(comm);
  if (event_gen_active)
  {
    SCOREP_EXIT_WRAPPED_REGION();
  }

  if (event_gen_active)
  {
    SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_COMM_DISCONNECT]);
    SCOREP_MPI_EVENT_GEN_ON();
  }
  SCOREP_IN_MEASUREMENT_DECREMENT();

  return return_val;
}
#endif

#pragma wrapgen single MPI_Comm_get_parent skel/SCOREP_Mpi_Std.w

#pragma wrapgen multiple restrict(gspawn+n_name) skel/SCOREP_Mpi_Std.w

#pragma wrapgen multiple restrict(gspawn+n_port) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
