/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2018, 2020, 2022-2023,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2019,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license.  See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for parallel I/O
 */

#include <config.h>
#include "SCOREP_Mpi.h"
#include "scorep_mpi_communicator.h"
#include "scorep_mpi_request_mgmt.h"
#include "scorep_mpi_io_mgmt.h"
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>
#include <SCOREP_IoManagement.h>
#include <SCOREP_Definitions.h>

static inline SCOREP_IoAccessMode
mpi_io_get_access_mode( int amode )
{
    SCOREP_IoAccessMode scorep_mode = SCOREP_IO_ACCESS_MODE_NONE;

    if ( amode & MPI_MODE_RDONLY )
    {
        scorep_mode = SCOREP_IO_ACCESS_MODE_READ_ONLY;
    }
    else if ( amode & MPI_MODE_WRONLY )
    {
        scorep_mode = SCOREP_IO_ACCESS_MODE_WRITE_ONLY;
    }
    else if ( amode & MPI_MODE_RDWR )
    {
        scorep_mode = SCOREP_IO_ACCESS_MODE_READ_WRITE;
    }

    return scorep_mode;
}

static inline SCOREP_IoCreationFlag
mpi_io_get_creation_flags( int amode )
{
    SCOREP_IoCreationFlag creation_flags = SCOREP_IO_CREATION_FLAG_NONE;

    /* Handle creation flags */
    if ( amode & MPI_MODE_CREATE )
    {
        creation_flags |= SCOREP_IO_CREATION_FLAG_CREATE;
    }
    if ( amode & MPI_MODE_EXCL )
    {
        creation_flags |= SCOREP_IO_CREATION_FLAG_EXCLUSIVE;
    }

    return creation_flags;
}

static inline SCOREP_IoStatusFlag
mpi_io_get_status_flags( int amode )
{
    SCOREP_IoStatusFlag status_flags = SCOREP_IO_STATUS_FLAG_NONE;

    /* Handle status flags */
    if ( amode & MPI_MODE_APPEND )
    {
        status_flags |= SCOREP_IO_STATUS_FLAG_APPEND;
    }
    if ( amode & MPI_MODE_DELETE_ON_CLOSE )
    {
        status_flags |= SCOREP_IO_STATUS_FLAG_CLOSE_ON_EXEC;
    }

    return status_flags;
}

static inline SCOREP_IoSeekOption
mpi_io_get_seek_option( int whence )
{
    switch ( whence )
    {
        case MPI_SEEK_SET:
            return SCOREP_IO_SEEK_FROM_START;
        case MPI_SEEK_CUR:
            return SCOREP_IO_SEEK_FROM_CURRENT;
        case MPI_SEEK_END:
            return SCOREP_IO_SEEK_FROM_END;
    }

    return SCOREP_IO_SEEK_INVALID;
}

static inline int
mpi_io_get_type_size( MPI_Datatype datatype )
{
    int type_size = 0;
    PMPI_Type_size( datatype, &type_size );
    return type_size;
}

/**
 * @name C wrappers for administrative functions
 * @{
 */

#if HAVE( MPI_2_0_SYMBOL_PMPI_FILE_OPEN ) && !defined( SCOREP_MPI_NO_IO ) && !defined( MPI_File_open )
/**
 * Declaration of PMPI-symbol for MPI_File_open
 */
int PMPI_File_open( MPI_Comm comm, SCOREP_MPI_CONST_DECL char* filename, int amode, MPI_Info info, MPI_File* fh );

/**
 * Measurement wrapper for MPI_File_open
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup io
 * Triggers an enter and exit event.
 * It wraps the MPI_File_open call with enter and exit events.
 */
int
MPI_File_open( MPI_Comm comm, SCOREP_MPI_CONST_DECL char* filename, int amode, MPI_Info info, MPI_File* fh )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_IO);
    int return_val;

    uint32_t unify_key = 0;
    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_OPEN ] );

            SCOREP_InterimCommunicatorHandle    comm_handle  = SCOREP_MPI_COMM_HANDLE( comm );
            scorep_mpi_comm_definition_payload* comm_payload =
                SCOREP_InterimCommunicatorHandle_GetPayload( comm_handle );
            unify_key = ++comm_payload->io_handle_counter /* avoid zero as key */;
            SCOREP_IoMgmt_BeginHandleCreation( SCOREP_IO_PARADIGM_MPI,
                                               SCOREP_IO_HANDLE_FLAG_NONE,
                                               comm_handle,
                                               "" );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_OPEN ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_File_open( comm, filename, amode, info, fh );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if ( return_val == MPI_SUCCESS )
            {
                SCOREP_IoFileHandle file = SCOREP_IoMgmt_GetIoFileHandle( filename );
                SCOREP_IoHandleHandle io_handle = SCOREP_IoMgmt_CompleteHandleCreation(
                    SCOREP_IO_PARADIGM_MPI, file, unify_key, fh );
                if( io_handle != SCOREP_INVALID_IO_HANDLE )
                {
                    SCOREP_IoCreateHandle( io_handle,
                                           mpi_io_get_access_mode( amode ),
                                           mpi_io_get_creation_flags( amode ),
                                           mpi_io_get_status_flags( amode ) );
                }
            }
            else
            {
                SCOREP_IoMgmt_DropIncompleteHandle();
            }

            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_OPEN ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_OPEN ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif
#if HAVE( MPI_2_0_SYMBOL_PMPI_FILE_CLOSE ) && !defined( SCOREP_MPI_NO_IO ) && !defined( MPI_File_close )
/**
 * Declaration of PMPI-symbol for MPI_File_close
 */
int PMPI_File_close( MPI_File* fh );

/**
 * Measurement wrapper for MPI_File_close
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup io
 * Triggers an enter and exit event.
 * It wraps the MPI_File_close call with enter and exit events.
 */
int
MPI_File_close( MPI_File* fh )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_IO);
    SCOREP_IoHandleHandle io_handle = SCOREP_INVALID_IO_HANDLE;
    int return_val;
    int amode;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_CLOSE ] );
            io_handle = SCOREP_IoMgmt_RemoveHandle( SCOREP_IO_PARADIGM_MPI, fh );
            PMPI_File_get_amode( *fh, &amode);

            SCOREP_IoMgmt_PushHandle( io_handle );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_CLOSE ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_File_close( fh );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if( io_handle != SCOREP_INVALID_IO_HANDLE )
            {
                SCOREP_IoMgmt_PopHandle( io_handle );
                if(return_val == MPI_SUCCESS)
                {
                    if( amode & MPI_MODE_DELETE_ON_CLOSE )
                    {
                        SCOREP_IoFileHandle file = SCOREP_IoHandleHandle_GetIoFile( io_handle );
                        SCOREP_IoDeleteFile( SCOREP_IO_PARADIGM_MPI, file );
                    }
                    SCOREP_IoDestroyHandle( io_handle );
                    SCOREP_IoMgmt_DestroyHandle( io_handle );
                }
                else
                {
                    SCOREP_IoMgmt_ReinsertHandle( SCOREP_IO_PARADIGM_MPI, io_handle );
                }
            }
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_CLOSE ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_CLOSE ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif
#if HAVE( MPI_2_0_SYMBOL_PMPI_FILE_SEEK ) && !defined( SCOREP_MPI_NO_IO ) && !defined( MPI_File_seek )
/**
 * Declaration of PMPI-symbol for MPI_File_seek
 */
int MPI_File_seek( MPI_File fh, MPI_Offset offset, int whence );

/**
 * Measurement wrapper for MPI_File_seek
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup io
 * Triggers an enter and exit event.
 * It wraps the MPI_File_seek call with enter and exit events.
 */
int
MPI_File_seek( MPI_File fh, MPI_Offset offset, int whence )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_IO);
    SCOREP_IoHandleHandle io_handle = SCOREP_INVALID_IO_HANDLE;
    int return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK ] );
            io_handle = SCOREP_IoMgmt_GetAndPushHandle( SCOREP_IO_PARADIGM_MPI, &fh );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_File_seek( fh, offset, whence );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if( io_handle != SCOREP_INVALID_IO_HANDLE )
            {
                MPI_Offset pos;
                PMPI_File_get_position( fh, &pos );
                SCOREP_IoSeekOption seek_option = mpi_io_get_seek_option( whence );

                SCOREP_IoSeek( io_handle,
                               offset,
                               seek_option,
                               pos );

                SCOREP_IoMgmt_PopHandle( io_handle );
            }

            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif
#if HAVE( MPI_2_0_SYMBOL_PMPI_FILE_SEEK_SHARED ) && !defined( SCOREP_MPI_NO_IO ) && !defined( MPI_File_seek_shared )
/**
 * Declaration of PMPI-symbol for MPI_File_seek_shared
 */
int PMPI_File_seek_shared( MPI_File fh, MPI_Offset offset, int whence );

/**
 * Measurement wrapper for MPI_File_seek_shared
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup io
 * Triggers an enter and exit event.
 * It wraps the MPI_File_seek_shared call with enter and exit events.
 */
int
MPI_File_seek_shared( MPI_File fh, MPI_Offset offset, int whence )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_IO);
    SCOREP_IoHandleHandle io_handle = SCOREP_INVALID_IO_HANDLE;
    int return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK_SHARED ] );
            io_handle = SCOREP_IoMgmt_GetAndPushHandle( SCOREP_IO_PARADIGM_MPI, &fh );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK_SHARED ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_File_seek_shared( fh, offset, whence );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if( io_handle != SCOREP_INVALID_IO_HANDLE )
            {
                SCOREP_IoSeekOption   seek_option = mpi_io_get_seek_option( whence );

                MPI_Offset pos;
                PMPI_File_get_position( fh, &pos );

                SCOREP_IoSeek( io_handle,
                               offset,
                               seek_option,
                               pos );
                SCOREP_IoMgmt_PopHandle( io_handle );
            }

            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK_SHARED ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_SEEK_SHARED ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif
#if HAVE(MPI_2_0_SYMBOL_PMPI_FILE_DELETE) && ! defined(SCOREP_MPI_NO_IO) && ! defined( MPI_File_delete )
/**
 * Declaration of PMPI-symbol for MPI_File_delete
 */
int MPI_File_delete(SCOREP_MPI_CONST_DECL char* filename, MPI_Info info);

/**
 * Measurement wrapper for MPI_File_delete
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup io
 * Triggers an enter and exit event.
 * It wraps the MPI_File_delete call with enter and exit events.
 */
int
MPI_File_delete(SCOREP_MPI_CONST_DECL char* filename, MPI_Info info)
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_IO);
    SCOREP_IoFileHandle ifh = SCOREP_INVALID_IO_FILE;
    int return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_FILE_DELETE]);

            ifh = SCOREP_IoMgmt_GetIoFileHandle( filename );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_DELETE ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_File_delete(filename, info);
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if ( ifh != SCOREP_INVALID_IO_FILE )
            {
                SCOREP_IoDeleteFile( SCOREP_IO_PARADIGM_MPI, ifh );
            }
            SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_FILE_DELETE]);
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FILE_DELETE ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif
#pragma wrapgen multiple regex(MPI_File.*(get_[abipstv]|set_[abipstv]|sync|preallocate).*) skel/SCOREP_Mpi_Std.w
#pragma wrapgen single MPI_File_get_group skel/SCOREP_Mpi_Group.w
#pragma wrapgen single MPI_Register_datarep skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for access functions
 * @{
 */

#pragma wrapgen multiple regex(MPI_File_(read|write)(_all|_at|_at_all|_ordered|_shared)?$)  skel/SCOREP_Mpi_IoBlocking.w

/* MPI Implementation which use ROMIO can have no general support for MPI_Requests
   in asynchronous file IO operations. This leads to a different signature and
   thus to compiler errors. To avoid compilation errors, the asynchronous file
   IO functions are not wrapped if ROMIO is used and they support no general
   MPI_Requests.
*/
#if !defined(ROMIO_VERSION) || defined(MPIO_USES_MPI_REQUEST)

#pragma wrapgen multiple regex(MPI_File_(iread|iwrite)(_all|_at|_at_all|_shared)?$) skel/SCOREP_Mpi_IoNonBlocking.w

#endif /* !defined(ROMIO_VERSION) || defined(MPIO_USES_MPI_REQUEST) */

#pragma wrapgen multiple regex(MPI_File_(read|write)(_all|_at_all|_ordered)_begin$) skel/SCOREP_Mpi_IoSplitBegin.w
#pragma wrapgen multiple regex(MPI_File_(read|write)(_all|_at_all|_ordered)_end$)   skel/SCOREP_Mpi_IoSplitEnd.w

/**
 * @}
 * @name C wrappers for error handling functions
 * @{
 */

#pragma wrapgen multiple restrict(gio_err)  skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name Fortran wrappers for handle conversion functions
 * @{
 */

#pragma wrapgen multiple restrict(gio_misc+!n_c2f+!n_f2c) skel/SCOREP_Mpi_Std.w
