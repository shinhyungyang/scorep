/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2018,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2015,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license.  See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief Fortran interface wrappers for environmental management
 */

#include <config.h>
#include <scorep_mpi_f.h>

#include <stdlib.h>
#include <UTILS_Error.h>

/* uppercase defines */
#pragma wrapgen multiple restrict(genv) skel/SCOREP_Fmpi_DefineU.w

/* lowercase defines */
#pragma wrapgen multiple restrict(genv) skel/SCOREP_Fmpi_DefineL.w

/**
 * @name Fortran wrappers
 * @{
 */

#ifndef NEED_F2C_CONV

#pragma wrapgen single MPI_Initialized skel/SCOREP_Fmpi_Std.w

/* If MPI_Comm_f2c is HAVE as a simple macro (which typically does nothing)
 * as it would require a "real" function if it is really needed
 * => we can save the f2c and c2s conversions */

#if HAVE(MPI_2_0_SYMBOL_PMPI_INIT_THREAD)
/**
 * Measurement wrapper for MPI_Init_tread
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2.0
 * @ingroup env
 */
void FSUB(MPI_Init_thread)(int* required,
                           int* provided,
                           int* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  *ierr = MPI_Init_thread(0, (char***)0, *required, provided);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}
#endif

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-1.0
 * @ingroup env
 */
void FSUB(MPI_Init)(int* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  *ierr = MPI_Init(0, (char***)0);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init) skel/SCOREP_Fmpi_Std.w

#else /* !NEED_F2C_CONV */

#if HAVE(MPI_2_0_SYMBOL_PMPI_INIT_THREAD)
/**
 * Measurement wrapper for MPI_Init_tread
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2.0
 * @ingroup env
 */
void FSUB(MPI_Init_thread)(MPI_Fint* required,
                           MPI_Fint* provided,
                           MPI_Fint* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  if (sizeof(MPI_Fint) != sizeof(int))
  {
    UTILS_ERROR(SCOREP_ERROR_F2C_INT_SIZE_MISMATCH,
                "Shouldn't this error abort!" );
  }
  *ierr = MPI_Init_thread(0, (char***)0, *required, provided);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}
#endif

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-1.0
 * @ingroup env
 */
void FSUB(MPI_Init)(MPI_Fint* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  if (sizeof(MPI_Fint) != sizeof(int))
  {
    UTILS_ERROR(SCOREP_ERROR_F2C_INT_SIZE_MISMATCH,
                "Shouldn't this error abort!" );
  }
  *ierr = MPI_Init(0, (char***)0);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init) skel/SCOREP_Mpi_F2c_C2f.w

#pragma wrapgen single MPI_Initialized skel/SCOREP_Fmpi_Std.w

#endif

/**
 * @}
 */
