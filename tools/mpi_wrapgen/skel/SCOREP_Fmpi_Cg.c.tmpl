/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief Fortran interface wrappers for communicator and group functions
 */

#include <config.h>
/* We do wrap deprecated functions here, but we don't want warnings */
#define OMPI_WANT_MPI_INTERFACE_WARNING 0
#include "SCOREP_Fmpi.h"

/**
 * @name Uppercase names
 * @{*/
#pragma wrapgen multiple restrict(gcg)      skel/SCOREP_Fmpi_DefineU.w

#pragma wrapgen multiple restrict(gcg_ext+!nAttr)  skel/SCOREP_Fmpi_DefineU.w

#pragma wrapgen multiple restrict(gcg_misc+!n_c2f+!n_f2c) skel/SCOREP_Fmpi_DefineU.w

/**
 * @}
 * @name Lowercase names
 * @{
 */
#pragma wrapgen multiple restrict(gcg)      skel/SCOREP_Fmpi_DefineL.w

#pragma wrapgen multiple restrict(gcg_ext+!nAttr)  skel/SCOREP_Fmpi_DefineL.w

#pragma wrapgen multiple restrict(gcg_misc+!n_c2f+!n_f2c) skel/SCOREP_Fmpi_DefineL.w

#ifndef NEED_F2C_CONV

/* If MPI_Comm_f2c is HAVE as a simple macro (which typically does nothing)
 * as it would require a "real" function if it is really needed
 * => we can save the f2c and c2s conversions */

/**
 * @}
 * @name Fortran wrappers for communicator constructors
 * @{
 */

#pragma wrapgen multiple regex((Interc|C)omm_(create|dup|merge|split)$) skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for communicator destructors
 * @{
 */

#pragma wrapgen single MPI_Comm_free skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for group constructors
 * @{
 */

#pragma wrapgen multiple regex(Group.*(diff|incl|excl|intersection|union)) skel/SCOREP_Fmpi_Std.w
#pragma wrapgen multiple regex(Comm.*group$)                               skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for group destructors
 * @{
 */

#pragma wrapgen single MPI_Group_free skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for miscelaneous functions
 * @{
 */

#pragma wrapgen multiple regex((Intercomm|Comm|Group)_(compare|rank|ranks|remote_size|size|test_inter|translate_ranks)$) skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for error handling functions
 * @{
 */
/* Do not wrap group cg_err */

/**
 * @}
 * @name Fortran wrappers for external interface functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_ext+!nAttr) skel/SCOREP_Fmpi_Std.w

/**
 * @}
 * @name Fortran wrappers for handle conversion functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_misc+!n_c2f+!n_f2c) skel/SCOREP_Fmpi_Std.w

#else /* !NEED_F2C_CONV */

/**
 * @}
 * @name Fortran wrappers for communicator constructors
 * @{
 */

#pragma wrapgen multiple regex((Interc|C)omm_(create|dup|merge|split)$) skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for communicator destructors
 * @{
 */

#pragma wrapgen single MPI_Comm_free skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for group constructors
 * @{
 */

#pragma wrapgen multiple regex(Group.*(diff|incl|excl|intersection|union)) skel/SCOREP_Mpi_F2c_C2f.w
#pragma wrapgen multiple regex(Comm.*group$)                               skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for group destructors
 * @{
 */

#pragma wrapgen single MPI_Group_free skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for miscelaneous functions
 * @{
 */

#pragma wrapgen multiple regex((Intercomm|Comm|Group)_(compare|rank|ranks|remote_size|size|test_inter|translate_ranks)$) skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for error handling functions
 * @{
 */
/* Do not wrap error handling functions */

/**
 * @}
 * @name Fortran wrappers for external interface functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_ext+!nAttr) skel/SCOREP_Mpi_F2c_C2f.w

/**
 * @}
 * @name Fortran wrappers for handle conversion functions
 * @{
 */

#pragma wrapgen multiple restrict(gcg_misc+!n_c2f+!n_f2c) skel/SCOREP_Mpi_F2c_C2f.w

#endif /* !NEED_F2C_CONV */

/**
 * @}
 */

