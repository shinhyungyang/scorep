${guard:start}
/**
 * Measurement wrapper for ${name}
 * @note Auto-generated by wrapgen from template: SCOREP_Mpi_RmaPut.w
 * @note C interface
 * @note Introduced with MPI-${mpi:version}
 * @ingroup ${group|lowercase}
 * Triggers an enter and exit event.
 */
${proto:c}
{
  ${rtype} return_val;

  if (SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_${group|uppercase}))
  {
/* One-sided communication not handled in first version
    int     sendsz;
    elg_ui4 dpid;
    elg_ui4 wid;
    ${decl}
*/
    SCOREP_MPI_EVENT_GEN_OFF();
    SCOREP_EnterRegion(scorep_mpi_regid[SCOREP__${name|uppercase}]);

/* One-sided communication not handled in first version
    dpid = scorep_mpi_win_rank_to_pe( target_rank, win );
    wid = scorep_mpi_win_rank_id( win );

    PMPI_Type_size(origin_datatype, &sendsz);
    esd_mpi_put_1ts( dpid, wid, SCOREP_NEXT_RMA_ID, origin_count * sendsz);
*/
    return_val = ${call:pmpi};

/* One-sided communication not handled in first version
    esd_mpi_put_1te_remote(dpid, wid, SCOREP_CURR_RMA_ID);
*/

    SCOREP_ExitRegion(scorep_mpi_regid[SCOREP__${name|uppercase}]);
    SCOREP_MPI_EVENT_GEN_ON();
  }
  else
  {
    return_val = ${call:pmpi};
  }

  return return_val;
}
${guard:end}
