/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for external interface functions
 */

#include <config.h>
/* We do wrap deprecated functions here, but we don't want warnings */
#define OMPI_WANT_MPI_INTERFACE_WARNING 0
#include "SCOREP_Mpi.h"
#include <UTILS_Error.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>
#include <SCOREP_RuntimeManagement.h>

/**
 * @name C wrappers
 * @{
 */

#if HAVE(DECL_PMPI_ABORT)
/**
 * Measurement wrapper for MPI_Abort
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI 1.0
 * @ingroup ext
 */
int MPI_Abort(MPI_Comm comm,
              int      errorcode)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  int return_val;

  UTILS_WARNING("Explicit MPI_Abort call abandoning the SCOREP measurement.");
  SCOREP_SetAbortFlag();

  if (SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_EXT))
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_ABORT],
                              ( intptr_t )PMPI_Abort);

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Abort(comm, errorcode);
    SCOREP_EXIT_WRAPPED_REGION();

    SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_ABORT]);
    SCOREP_MPI_EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Abort(comm, errorcode);
  }
  SCOREP_IN_MEASUREMENT_DECREMENT();

  return return_val;
}
#endif

#pragma wrapgen single MPI_Grequest_complete skel/SCOREP_Mpi_StdCompl.w

#pragma wrapgen multiple restrict(gext+tint+!nMPI_Abort+!nMPI_Grequest_complete) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
