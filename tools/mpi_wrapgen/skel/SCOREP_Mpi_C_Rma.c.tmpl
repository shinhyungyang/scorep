/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013, 2019,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2020,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2019, 2025,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license. See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for one-sided communication
 */

#include <config.h>
#include "SCOREP_Mpi_C_Reg.h"
#include <scorep_mpi_c.h>
#include <scorep_mpi_communicator.h>
#include <scorep_mpi_request_mgmt.h>
#include <scorep_mpi_rma_request.h>
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>
#include <SCOREP_AllocMetric.h>

/** internal id counter for rma operations */
static int scorep_rma_id = 0;


static inline int
get_datatype_size(MPI_Datatype datatype)
{
  int datatype_size = 0;
  if ( datatype != MPI_DATATYPE_NULL )
  {
    PMPI_Type_size( datatype, &datatype_size );
  }
  return datatype_size;
}


/**
 * @name C wrappers for access functions
 * @{
 */

#pragma wrapgen single MPI_Accumulate skel/SCOREP_Mpi_RmaAtomic.w
#pragma wrapgen single MPI_Compare_and_swap skel/SCOREP_Mpi_RmaAtomicWithProto.w
#pragma wrapgen single MPI_Fetch_and_op skel/SCOREP_Mpi_RmaAtomicWithProto.w
#pragma wrapgen single MPI_Get skel/SCOREP_Mpi_RmaGet.w
#pragma wrapgen single MPI_Get_accumulate skel/SCOREP_Mpi_RmaAtomic.w
#pragma wrapgen single MPI_Put skel/SCOREP_Mpi_RmaPut.w
#pragma wrapgen single MPI_Raccumulate skel/SCOREP_Mpi_RmaAtomicWithProto.w
#pragma wrapgen single MPI_Rget skel/SCOREP_Mpi_RmaGet.w
#pragma wrapgen single MPI_Rget_accumulate skel/SCOREP_Mpi_RmaAtomic.w
#pragma wrapgen single MPI_Rput skel/SCOREP_Mpi_RmaPut.w

/**
 * @}
 * @name C wrappers for window management functions
 * @{
 */

#pragma wrapgen single MPI_Win_allocate skel/SCOREP_Mpi_WinCreate.w
#pragma wrapgen single MPI_Win_allocate_shared skel/SCOREP_Mpi_WinCreate.w
#pragma wrapgen single MPI_Win_attach skel/SCOREP_Mpi_Std.w
#pragma wrapgen single MPI_Win_create skel/SCOREP_Mpi_WinCreate.w
#pragma wrapgen single MPI_Win_create_dynamic skel/SCOREP_Mpi_WinCreate.w
#pragma wrapgen single MPI_Win_detach skel/SCOREP_Mpi_StdWithProto.w

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_FREE) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_free
 */
int PMPI_Win_free(MPI_Win* win);

/**
 * Measurement wrapper for MPI_Win_free
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_free(MPI_Win* win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int           event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int           event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int                 return_val;

  SCOREP_RmaWindowHandle win_handle;
  SCOREP_CollectiveType  collective_type = SCOREP_COLLECTIVE_DESTROY_HANDLE;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();
    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FREE]);
      SCOREP_RmaCollectiveBegin( SCOREP_RMA_SYNC_LEVEL_PROCESS );

      #if (MPI_VERSION >= 3)
      // determine collective type of operation
      int* create_kind = NULL;
      int flag        = 0;
      PMPI_Win_get_attr( *win, MPI_WIN_CREATE_FLAVOR, &create_kind, &flag );
      if (flag)
      {
        switch ( *create_kind )
        {
            case MPI_WIN_FLAVOR_CREATE:
            case MPI_WIN_FLAVOR_DYNAMIC:
                collective_type = SCOREP_COLLECTIVE_DESTROY_HANDLE;
                break;
            case MPI_WIN_FLAVOR_ALLOCATE:
            case MPI_WIN_FLAVOR_SHARED:
                collective_type = SCOREP_COLLECTIVE_DESTROY_HANDLE_AND_DEALLOCATE;
                break;
        }
      }
      #endif
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FREE]);
    }
  }

  // save handle reference for RmaCollectiveEnd
  win_handle = scorep_mpi_win_handle( *win );
  // stop tracking window
  scorep_mpi_win_free( *win );

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_free( win );
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_RmaWinDestroy( win_handle );
      SCOREP_RmaCollectiveEnd( collective_type,
                               SCOREP_RMA_SYNC_LEVEL_PROCESS,
                               win_handle, SCOREP_INVALID_ROOT_RANK, 0, 0);
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FREE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FREE]);
    }
    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#pragma wrapgen single MPI_Win_shared_query skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for synchronization functions
 * @{
 */

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_COMPLETE) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_complete
 */
int PMPI_Win_complete(MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_complete
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_complete(MPI_Win win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_COMPLETE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_COMPLETE]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_complete(win);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_RmaWindowHandle win_handle = scorep_mpi_win_handle( win );

      scorep_mpi_rma_request_foreach_on_window( win_handle,
                                                scorep_mpi_rma_request_write_standard_completion_and_remove );

      SCOREP_RmaGroupSync( SCOREP_RMA_SYNC_LEVEL_MEMORY |
                           SCOREP_RMA_SYNC_LEVEL_PROCESS,
                           win_handle,
                           scorep_mpi_epoch_get_group_handle( win, SCOREP_MPI_RMA_ACCESS_EPOCH ) );

      scorep_mpi_epoch_end( win, SCOREP_MPI_RMA_ACCESS_EPOCH );
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_COMPLETE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_COMPLETE]);
    }
    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_FENCE) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_fence
 */
int PMPI_Win_fence(int assert, MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_fence
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_fence(int     assert,
                  MPI_Win win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FENCE]);
      SCOREP_RmaCollectiveBegin( SCOREP_RMA_SYNC_LEVEL_MEMORY |
                                 SCOREP_RMA_SYNC_LEVEL_PROCESS );
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FENCE]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_fence(assert, win);
  SCOREP_EXIT_WRAPPED_REGION();


  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_RmaWindowHandle win_handle = scorep_mpi_win_handle( win );

      scorep_mpi_rma_request_foreach_on_window( win_handle,
                                                scorep_mpi_rma_request_write_standard_completion_and_remove );

      // TODO: evaluation of assert could lead to be better
      //       value for the SYNC_LEVEL

      SCOREP_RmaCollectiveEnd( SCOREP_COLLECTIVE_BARRIER,
                               SCOREP_RMA_SYNC_LEVEL_MEMORY |
                               SCOREP_RMA_SYNC_LEVEL_PROCESS,
                               win_handle,
                               SCOREP_INVALID_ROOT_RANK,
                               0, 0 );
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FENCE]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_FENCE]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE( MPI_3_0_SYMBOL_PMPI_WIN_FLUSH ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( MPI_Win_flush )
/**
 * Declaration of PMPI-symbol for MPI_Win_flush
 */
int PMPI_Win_flush( int rank, MPI_Win win );

/**
 * Measurement wrapper for MPI_Win_flush
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-3.0
 * @ingroup rma
 * Triggers an enter and exit event.
 * It wraps the MPI_Win_flush call with enter and exit events.
 */
int
MPI_Win_flush( int rank, MPI_Win win )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_flush( rank, win );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            scorep_mpi_rma_request_foreach_to_target( scorep_mpi_win_handle( win ),
                                                      rank,
                                                      scorep_mpi_rma_request_write_full_completion );
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE( MPI_3_0_SYMBOL_PMPI_WIN_FLUSH_ALL ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( MPI_Win_flush_all )
/**
 * Declaration of PMPI-symbol for MPI_Win_flush_all
 */
int PMPI_Win_flush_all( MPI_Win win );

/**
 * Measurement wrapper for MPI_Win_flush_all
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-3.0
 * @ingroup rma
 * Triggers an enter and exit event.
 * It wraps the MPI_Win_flush_all call with enter and exit events.
 */
int
MPI_Win_flush_all( MPI_Win win )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_ALL ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_flush_all( win );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            scorep_mpi_rma_request_foreach_on_window( scorep_mpi_win_handle( win ),
                                                      scorep_mpi_rma_request_write_full_completion );
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_ALL ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE( MPI_3_0_SYMBOL_PMPI_WIN_FLUSH_LOCAL ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( MPI_Win_flush_local )
/**
 * Declaration of PMPI-symbol for MPI_Win_flush_local
 */
int PMPI_Win_flush_local( int rank, MPI_Win win );

/**
 * Measurement wrapper for MPI_Win_flush_local
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-3.0
 * @ingroup rma
 * Triggers an enter and exit event.
 * It wraps the MPI_Win_flush_local call with enter and exit events.
 */
int
MPI_Win_flush_local( int rank, MPI_Win win )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_flush_local( rank, win );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            scorep_mpi_rma_request_foreach_to_target( scorep_mpi_win_handle( win ),
                                                      rank,
                                                      scorep_mpi_rma_request_write_standard_completion );
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE( MPI_3_0_SYMBOL_PMPI_WIN_FLUSH_LOCAL_ALL ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( MPI_Win_flush_local_all )
/**
 * Declaration of PMPI-symbol for MPI_Win_flush_local_all
 */
int PMPI_Win_flush_local_all( MPI_Win win );

/**
 * Measurement wrapper for MPI_Win_flush_local_all
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-3.0
 * @ingroup rma
 * Triggers an enter and exit event.
 * It wraps the MPI_Win_flush_local_all call with enter and exit events.
 */
int
MPI_Win_flush_local_all( MPI_Win win )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL_ALL ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_flush_local_all( win );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            scorep_mpi_rma_request_foreach_on_window( scorep_mpi_win_handle( win ),
                                                      scorep_mpi_rma_request_write_standard_completion );
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_FLUSH_LOCAL_ALL ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_LOCK) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_lock
 */
int PMPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_lock
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_lock(int     lock_type,
                 int     rank,
                 int     assert,
                 MPI_Win win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int   return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_LOCK]);
      SCOREP_RmaRequestLock( scorep_mpi_win_handle( win ), rank, 0,
                             lock_type == MPI_LOCK_EXCLUSIVE ? SCOREP_LOCK_EXCLUSIVE : SCOREP_LOCK_SHARED );
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_LOCK]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_lock( lock_type, rank, assert, win );
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_LOCK]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_LOCK]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE( MPI_3_0_SYMBOL_PMPI_WIN_LOCK_ALL ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( MPI_Win_lock_all )
/**
 * Declaration of PMPI-symbol for MPI_Win_lock_all
 */
int PMPI_Win_lock_all( int assert, MPI_Win win );

/**
 * Measurement wrapper for MPI_Win_lock_all
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-3.0
 * @ingroup rma
 *
 * Triggers an enter event, a request-lock event, and an exit event.
 *
 */
int
MPI_Win_lock_all( int assert, MPI_Win win )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_LOCK_ALL ] );
            SCOREP_RmaRequestLock( scorep_mpi_win_handle( win ), SCOREP_ALL_TARGET_RANKS, 0,
                                   SCOREP_LOCK_SHARED );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_LOCK_ALL ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_lock_all( assert, win );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_LOCK_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_LOCK_ALL ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_POST) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_post
 */
int PMPI_Win_post(MPI_Group group, int assert, MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_post
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_post(MPI_Group group,
                 int       assert,
                 MPI_Win   win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_POST]);
      scorep_mpi_epoch_start( win, group, SCOREP_MPI_RMA_EXPOSURE_EPOCH );
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_POST]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_post(group, assert, win);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_RmaGroupSync( SCOREP_RMA_SYNC_LEVEL_PROCESS,
                           scorep_mpi_win_handle( win ),
                           scorep_mpi_group_handle( group ) );
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_POST]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_POST]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_START) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_start
 */
int PMPI_Win_start(MPI_Group group, int assert, MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_start
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_start(MPI_Group group,
                  int       assert,
                  MPI_Win   win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_START]);
      scorep_mpi_epoch_start(win, group, SCOREP_MPI_RMA_ACCESS_EPOCH );
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_START]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_start(group, assert, win);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_RmaGroupSync( SCOREP_RMA_SYNC_LEVEL_PROCESS,
                           scorep_mpi_win_handle( win ),
                           scorep_mpi_group_handle( group ) );

      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_START]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_START]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#pragma wrapgen single MPI_Win_sync skel/SCOREP_Mpi_Std.w

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_TEST) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_test
 */
int PMPI_Win_test(MPI_Win win, int* flag);

/**
 * Measurement wrapper for MPI_Win_test
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_test(MPI_Win win,
                 int*    flag)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_TEST]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_TEST]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_test(win, flag);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      if (*flag != 0)
      {
        scorep_mpi_rma_request_foreach_on_window( scorep_mpi_win_handle( win ),
                                                  scorep_mpi_rma_request_write_standard_completion );

        SCOREP_RmaGroupSync( SCOREP_RMA_SYNC_LEVEL_MEMORY |
                             SCOREP_RMA_SYNC_LEVEL_PROCESS,
                             scorep_mpi_win_handle( win ),
                             scorep_mpi_epoch_get_group_handle( win, SCOREP_MPI_RMA_EXPOSURE_EPOCH ) );
        scorep_mpi_epoch_end(win, SCOREP_MPI_RMA_EXPOSURE_EPOCH );
      }
      else
      {
        SCOREP_RmaGroupSync( SCOREP_RMA_SYNC_LEVEL_NONE,
                             scorep_mpi_win_handle( win ),
                             scorep_mpi_epoch_get_group_handle( win, SCOREP_MPI_RMA_EXPOSURE_EPOCH ) );
      }

      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_TEST]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_TEST]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_UNLOCK) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_unlock
 */
int PMPI_Win_unlock(int rank, MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_unlock
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_unlock(int     rank,
                   MPI_Win win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_UNLOCK]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_UNLOCK]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_unlock(rank, win);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_RmaWindowHandle win_handle = scorep_mpi_win_handle( win );

      scorep_mpi_rma_request_foreach_to_target( scorep_mpi_win_handle( win ),
                                                rank,
                                                scorep_mpi_rma_request_write_full_completion );

      SCOREP_RmaReleaseLock( scorep_mpi_win_handle( win ),
                             rank, 0 );
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_UNLOCK]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_UNLOCK]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#if HAVE( MPI_3_0_SYMBOL_PMPI_WIN_UNLOCK_ALL ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( MPI_Win_unlock_all )
/**
 * Declaration of PMPI-symbol for MPI_Win_unlock_all
 */
int PMPI_Win_unlock_all( MPI_Win win );

/**
 * Measurement wrapper for MPI_Win_unlock_all
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-3.0
 * @ingroup rma
 *
 * Triggers an enter event, a release-lock event, and an exit event.
 *
 */
int
MPI_Win_unlock_all( MPI_Win win )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_UNLOCK_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_UNLOCK_ALL ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_unlock_all( win );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            SCOREP_RmaWindowHandle win_handle = scorep_mpi_win_handle( win );

            scorep_mpi_rma_request_foreach_on_window( scorep_mpi_win_handle( win ),
                                                      scorep_mpi_rma_request_write_full_completion );

            SCOREP_RmaReleaseLock( scorep_mpi_win_handle( win ),
                                   SCOREP_ALL_TARGET_RANKS, 0 );

            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_UNLOCK_ALL ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_UNLOCK_ALL ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE(MPI_2_0_SYMBOL_PMPI_WIN_WAIT) && !defined(SCOREP_MPI_NO_RMA)
/**
 * Declaration of PMPI-symbol for MPI_Win_wait
 */
int PMPI_Win_wait(MPI_Win win);

/**
 * Measurement wrapper for MPI_Win_wait
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma
 * Triggers an enter and exit event.
 */
int MPI_Win_wait(MPI_Win win)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_RMA);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_WAIT]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_WAIT]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Win_wait(win);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      scorep_mpi_rma_request_foreach_on_window( scorep_mpi_win_handle( win ),
                                                scorep_mpi_rma_request_write_standard_completion_and_remove );

      SCOREP_RmaGroupSync( SCOREP_RMA_SYNC_LEVEL_MEMORY |
                           SCOREP_RMA_SYNC_LEVEL_PROCESS,
                           scorep_mpi_win_handle( win ),
                           scorep_mpi_epoch_get_group_handle( win, SCOREP_MPI_RMA_EXPOSURE_EPOCH ) );

      scorep_mpi_epoch_end( win, SCOREP_MPI_RMA_EXPOSURE_EPOCH );

      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_WAIT]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_WIN_WAIT]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#pragma wrapgen single MPI_Win_get_group skel/SCOREP_Mpi_GroupMgnt.w

/**
 * @}
 * @name C wrappers for error handling functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_err)  skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name C wrappers for external interface functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_ext+!nset_name)  skel/SCOREP_Mpi_Std.w

#if HAVE( MPI_2_0_SYMBOL_PMPI_WIN_SET_NAME ) && !defined( SCOREP_MPI_NO_RMA ) && !defined( SCOREP_MPI_NO_EXT ) && !defined( SCOREP_MPI_NO_EXTRA ) && !defined( MPI_Win_set_name )
/**
 * Declaration of PMPI-symbol for MPI_Win_set_name
 */
int PMPI_Win_set_name( MPI_Win win, SCOREP_MPI_CONST_DECL char* win_name );

/**
 * Measurement wrapper for MPI_Win_set_name
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2.0
 * @ingroup rma_ext
 * Triggers an enter and exit event.
 * It wraps the MPI_Win_set_name call with enter and exit events.
 */
int
MPI_Win_set_name( MPI_Win win, SCOREP_MPI_CONST_DECL char* win_name )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR( SCOREP_MPI_ENABLED_RMA_EXT );
    int       return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_SET_NAME ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_SET_NAME ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Win_set_name( win, win_name );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( return_val == MPI_SUCCESS )
    {
        scorep_mpi_win_set_name( win, win_name );
    }

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_SET_NAME ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_WIN_SET_NAME ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

/**
 * @}
 * @name C wrappers for handle conversion functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_misc) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
