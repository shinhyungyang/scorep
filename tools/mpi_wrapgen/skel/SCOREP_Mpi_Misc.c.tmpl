/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for miscellaneous and handler conversion
 *        functions
 */

#include <config.h>
#include "SCOREP_Mpi.h"
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>

/**
 * @name C wrappers
 * @{
 */

#pragma wrapgen single MPI_Address skel/SCOREP_Mpi_StdWithProto.w

#if HAVE( DECL_PMPI_ALLOC_MEM ) && !defined( SCOREP_MPI_NO_EXTRA ) && !defined( SCOREP_MPI_NO_MISC ) && !defined( MPI_Alloc_mem )
/**
 * Measurement wrapper for MPI_Alloc_mem
 * @note Auto-generated by wrapgen from template: SCOREP_Mpi_Std.w
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup misc
 * Triggers an enter and exit event.
 * It wraps the MPI_Alloc_mem call with enter and exit events.
 */
int
MPI_Alloc_mem( MPI_Aint size, MPI_Info info, void* baseptr )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_MISC);
    int return_val;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();

        if ( event_gen_active_for_group )
        {
            if ( scorep_mpi_memory_recording )
            {
                uint64_t size_as_uint64 = size;
                SCOREP_AddAttribute( scorep_mpi_memory_alloc_size_attribute,
                                     &size_as_uint64 );
            }
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_ALLOC_MEM ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_ALLOC_MEM ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Alloc_mem( size, info, baseptr );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if ( scorep_mpi_memory_recording && size > 0 && MPI_SUCCESS == return_val )
            {
                SCOREP_AllocMetric_HandleAlloc( scorep_mpi_allocations_metric,
                                                ( uint64_t )( *( void** )baseptr ),
                                                size );
            }

            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_ALLOC_MEM ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_ALLOC_MEM ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#if HAVE( DECL_PMPI_FREE_MEM ) && !defined( SCOREP_MPI_NO_EXTRA ) && !defined( SCOREP_MPI_NO_MISC ) && !defined( MPI_Free_mem )
/**
 * Measurement wrapper for MPI_Free_mem
 * @note Auto-generated by wrapgen from template: SCOREP_Mpi_Std.w
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup misc
 * Triggers an enter and exit event.
 * It wraps the MPI_Free_mem call with enter and exit events.
 */
int
MPI_Free_mem( void* base )
{
    SCOREP_IN_MEASUREMENT_INCREMENT();
    const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
    const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_MISC);
    int return_val;
    void* allocation = NULL;

    if ( event_gen_active )
    {
        SCOREP_MPI_EVENT_GEN_OFF();
        if ( event_gen_active_for_group )
        {
            SCOREP_EnterWrappedRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FREE_MEM ] );

            if ( scorep_mpi_memory_recording && base )
            {
                SCOREP_AllocMetric_AcquireAlloc( scorep_mpi_allocations_metric,
                                                 ( uint64_t )base, &allocation );
            }
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_EnterWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FREE_MEM ] );
        }
    }

    SCOREP_ENTER_WRAPPED_REGION();
    return_val = PMPI_Free_mem( base );
    SCOREP_EXIT_WRAPPED_REGION();

    if ( event_gen_active )
    {
        if ( event_gen_active_for_group )
        {
            if ( scorep_mpi_memory_recording )
            {
                uint64_t dealloc_size = 0;
                if ( base && MPI_SUCCESS == return_val )
                {
                    SCOREP_AllocMetric_HandleFree( scorep_mpi_allocations_metric,
                                                   allocation, &dealloc_size );
                }
                SCOREP_AddAttribute( scorep_mpi_memory_dealloc_size_attribute,
                                     &dealloc_size );
            }

            SCOREP_ExitRegion( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FREE_MEM ] );
        }
        else if ( SCOREP_IsUnwindingEnabled() )
        {
            SCOREP_ExitWrapper( scorep_mpi_regions[ SCOREP_MPI_REGION__MPI_FREE_MEM ] );
        }
        SCOREP_MPI_EVENT_GEN_ON();
    }

    SCOREP_IN_MEASUREMENT_DECREMENT();
    return return_val;
}
#endif

#pragma wrapgen multiple restrict(gmisc+!n_c2f+!n_f2c+!n_Info+!nMPI_Address+!nMPI_Alloc_mem+!nMPI_Free_mem) skel/SCOREP_Mpi_Std.w

#pragma wrapgen multiple restrict(gmisc+n_Info+!nMPI_Info_delete+!nMPI_Info_get+!nMPI_Info_get_valuelen+!nMPI_Info_set+!nMPI_Address) skel/SCOREP_Mpi_Std.w

#pragma wrapgen single MPI_Info_delete skel/SCOREP_Mpi_StdCompl.w

#pragma wrapgen single MPI_Info_get skel/SCOREP_Mpi_StdCompl.w

#pragma wrapgen single MPI_Info_get_valuelen skel/SCOREP_Mpi_StdCompl.w

#pragma wrapgen single MPI_Info_set skel/SCOREP_Mpi_StdCompl.w

/**
 * @}
 */
