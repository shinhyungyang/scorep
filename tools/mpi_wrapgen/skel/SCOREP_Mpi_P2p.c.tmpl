/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2013,
 * RWTH Aachen University, Germany
 *
 * Copyright (c) 2009-2013,
 * Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *
 * Copyright (c) 2009-2018,
 * Technische Universitaet Dresden, Germany
 *
 * Copyright (c) 2009-2013,
 * University of Oregon, Eugene, USA
 *
 * Copyright (c) 2009-2019,
 * Forschungszentrum Juelich GmbH, Germany
 *
 * Copyright (c) 2009-2014,
 * German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *
 * Copyright (c) 2009-2013,
 * Technische Universitaet Muenchen, Germany
 *
 * Copyright (c) 2016,
 * Technische Universitaet Darmstadt, Germany
 *
 * This software may be modified and distributed under the terms of
 * a BSD-style license.  See the COPYING file in the package base
 * directory for details.
 *
 */

/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
*****************************************************************************
**  Copyright (c) 1998-2011                                                **
**  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          **
**                                                                         **
**  Copyright (c) 2010-2011                                                **
**  German Research School for Simulation Sciences GmbH,                   **
**  Laboratory for Parallel Programming                                    **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/


/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for point-to-point communication
 */

#include <config.h>
#include "SCOREP_Mpi.h"
#include "scorep_mpi_communicator.h"
#include "scorep_mpi_request_mgmt.h"
#include <UTILS_Error.h>
#include <SCOREP_RuntimeManagement.h>
#include <SCOREP_InMeasurement.h>
#include <SCOREP_Events.h>

/**
 * @name Blocking
 * @{
 */
#pragma wrapgen multiple regex(MPI_(S|B|R)[s]?end$) skel/SCOREP_Mpi_PtpSend.w

#if HAVE(DECL_PMPI_RECV) && !defined(SCOREP_MPI_NO_P2P)
/**
 * Measurement wrapper for MPI_Recv
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup p2p
 * Sequence of events:
 * @li enter region 'MPI_Recv'
 * @li MPI recv event
 * @li exit region 'MPI_Recv'
 */
int MPI_Recv( void* buf,
              int count,
              MPI_Datatype datatype,
              int source, int tag,
              MPI_Comm comm,
              MPI_Status* status )
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_P2P);
  int return_val;
  int        sz;
  uint64_t start_time_stamp;
  MPI_Status mystatus;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV]);

#if !defined(SCOREP_MPI_NO_HOOKS)
      if(SCOREP_IS_MPI_HOOKS_ON)
        start_time_stamp = SCOREP_GetLastTimeStamp();
#endif

      if (status == MPI_STATUS_IGNORE)
        status = &mystatus;
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Recv(buf, count, datatype, source, tag, comm, status);
  SCOREP_EXIT_WRAPPED_REGION();

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
#if ! defined(SCOREP_MPI_NO_HOOKS)
      if(SCOREP_IS_MPI_HOOKS_ON)
        SCOREP_Hooks_Post_MPI_Recv(buf, count, datatype, source, tag, comm, status, start_time_stamp, return_val);
#endif

      if (source != MPI_PROC_NULL && return_val == MPI_SUCCESS)
      {
        PMPI_Type_size(datatype, &sz);
        PMPI_Get_count(status, datatype, &count);
        SCOREP_MpiRecv(status->MPI_SOURCE, SCOREP_MPI_COMM_HANDLE(comm),
                       status->MPI_TAG, (uint64_t)count * sz);
      }

      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#pragma wrapgen single MPI_Probe skel/SCOREP_Mpi_Std.w

#pragma wrapgen single MPI_Mprobe skel/SCOREP_Mpi_Std.w

#pragma wrapgen single MPI_Improbe skel/SCOREP_Mpi_Std.w

#pragma wrapgen single MPI_Mrecv skel/SCOREP_Mpi_Std.w

#pragma wrapgen single MPI_Imrecv skel/SCOREP_Mpi_Std.w


#pragma wrapgen multiple restrict(nMPI_Sendrecv) skel/SCOREP_Mpi_PtpSendrecv.w

/**
 * @}
 * @name Non-blocking
 * @{
 */

#pragma wrapgen multiple regex(MPI_I(s|bs|rs|ss)end$) skel/SCOREP_Mpi_PtpIsend.w

#if HAVE(DECL_PMPI_IRECV) && !defined(SCOREP_MPI_NO_P2P)
/**
 * Measurement wrapper for MPI_Irecv
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup p2p
 * Triggers an enter and exit event.
 */
int MPI_Irecv(void* buf,
              int count,
              MPI_Datatype datatype,
              int source,
              int tag,
              MPI_Comm comm,
              MPI_Request* request)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_P2P);
  const int xnb_active                 = (scorep_mpi_enabled & SCOREP_MPI_ENABLED_XNONBLOCK);
  int       return_val;
  uint64_t  start_time_stamp;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_IRECV]);

#if !defined(SCOREP_MPI_NO_HOOKS)
      if(SCOREP_IS_MPI_HOOKS_ON)
        start_time_stamp = SCOREP_GetLastTimeStamp();
#endif
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_IRECV]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Irecv(buf, count, datatype, source, tag, comm, request);
  SCOREP_EXIT_WRAPPED_REGION();

  if (source != MPI_PROC_NULL && return_val == MPI_SUCCESS)
  {
    SCOREP_MpiRequestId reqid = scorep_mpi_get_request_id();
    int sz;
    PMPI_Type_size(datatype, &sz);

    if (event_gen_active_for_group && xnb_active)
      SCOREP_MpiIrecvRequest(reqid);

    scorep_mpi_request_p2p_create(*request, SCOREP_MPI_REQUEST_TYPE_RECV, SCOREP_MPI_REQUEST_FLAG_NONE,
                       tag, 0, (uint64_t)count * sz, datatype, comm, reqid);
#if !defined( SCOREP_MPI_NO_HOOKS )
    if (event_gen_active_for_group && SCOREP_IS_MPI_HOOKS_ON)
      SCOREP_Hooks_Post_MPI_Irecv( buf, count, datatype, source, tag, comm, request, start_time_stamp, return_val );
#endif
  }

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_IRECV]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_IRECV]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

#pragma wrapgen single MPI_Iprobe skel/SCOREP_Mpi_Std.w

/**
 * @}
 * @name Persistent requests
 * @{
 */

#pragma wrapgen multiple regex(MPI_(S|B|R)[s]?end_init$) skel/SCOREP_Mpi_PtpSendinit.w

#if HAVE(DECL_PMPI_RECV_INIT) && !defined(SCOREP_MPI_NO_P2P)
/**
 * Measurement wrapper for MPI_Recv_init
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup p2p
 * Triggers an enter and exit event.
 */
int MPI_Recv_init(void* buf,
                  int count,
                  MPI_Datatype datatype,
                  int source,
                  int tag,
                  MPI_Comm comm,
                  MPI_Request* request)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  const int event_gen_active           = SCOREP_MPI_IS_EVENT_GEN_ON;
  const int event_gen_active_for_group = SCOREP_MPI_IS_EVENT_GEN_ON_FOR(SCOREP_MPI_ENABLED_P2P);
  int       return_val;

  if (event_gen_active)
  {
    SCOREP_MPI_EVENT_GEN_OFF();

    if (event_gen_active_for_group)
    {
      SCOREP_EnterWrappedRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV_INIT]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_EnterWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV_INIT]);
    }
  }

  SCOREP_ENTER_WRAPPED_REGION();
  return_val = PMPI_Recv_init(buf, count, datatype, source, tag, comm, request);
  SCOREP_EXIT_WRAPPED_REGION();
  if (source != MPI_PROC_NULL && return_val == MPI_SUCCESS)
  {
    int sz;
    PMPI_Type_size(datatype, &sz);
    scorep_mpi_request_p2p_create(*request, SCOREP_MPI_REQUEST_TYPE_RECV, SCOREP_MPI_REQUEST_FLAG_IS_PERSISTENT,
                       tag, source, (uint64_t)count * sz, datatype, comm,
                       scorep_mpi_get_request_id());

	#if !defined( SCOREP_MPI_NO_HOOKS )
    if ( SCOREP_IS_MPI_HOOKS_ON )
	  SCOREP_Hooks_Post_MPI_Recv_init(buf, count, datatype, source, tag, comm, request,0,return_val);
    #endif
  }

  if (event_gen_active)
  {
    if (event_gen_active_for_group)
    {
      SCOREP_ExitRegion(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV_INIT]);
    }
    else if ( SCOREP_IsUnwindingEnabled() )
    {
      SCOREP_ExitWrapper(scorep_mpi_regions[SCOREP_MPI_REGION__MPI_RECV_INIT]);
    }

    SCOREP_MPI_EVENT_GEN_ON();
  }

  SCOREP_IN_MEASUREMENT_DECREMENT();
  return return_val;
}
#endif

/**
 * @}
 * @name Auxiliary functions
 * @{
 */

#pragma wrapgen multiple regex((Buffer_attach|Buffer_detach)) skel/SCOREP_Mpi_Std.w

/**
 * @}
 */
