/**
 * @file  SCOREP_Fmpi_Env.c
 * @maintainer Daniel Lorenz <d.lorenz@fz-juelich.de>
 * @status     alpha
 * @ingroup    MPI_Wrapper
 *
 * @brief Fortran interface wrappers for environmental management
 */

#include <config.h>
#include "SCOREP_Fmpi.h"

#include <stdlib.h>
#include <UTILS_Error.h>

/* uppercase defines */
#pragma wrapgen multiple restrict(genv) skel/SCOREP_Fmpi_DefineU.w

/* lowercase defines */
#pragma wrapgen multiple restrict(genv) skel/SCOREP_Fmpi_DefineL.w

/**
 * @name Fortran utility functions
 * @{
 */

/** lowercase define for initialization call for fortran MPI_BOTTOM */
#define scorep_mpi_fortran_init_bottom_L scorep_mpi_fortran_init_bottom
/** uppercase define for initialization call for fortran MPI_BOTTOM */
#define scorep_mpi_fortran_init_bottom_U SCOREP_MPI_FORTRAN_INIT_BOTTOM
/** lowercase define for initialization call for fortran MPI_IN_PLACE */
#define scorep_mpi_fortran_init_in_place_L scorep_mpi_fortran_init_in_place
/** uppercase define for initialization call for fortran MPI_IN_PLACE */
#define scorep_mpi_fortran_init_in_place_U SCOREP_MPI_FORTRAN_INIT_IN_PLACE
/** lowercase define for initialization call for fortran MPI_STATUS_IGNORE */
#define scorep_mpi_fortran_init_status_ignore_L scorep_mpi_fortran_init_status_ignore
/** uppercase define for initialization call for fortran MPI_STATUS_IGNORE */
#define scorep_mpi_fortran_init_status_ignore_U SCOREP_MPI_FORTRAN_INIT_STATUS_IGNORE
/** lowercase define for initialization call for fortran MPI_STATUSES_IGNORE */
#define scorep_mpi_fortran_init_statuses_ignore_L scorep_mpi_fortran_init_statuses_ignore
/** uppercase define for initialization call for fortran MPI_STATUSES_IGNORE */
#define scorep_mpi_fortran_init_statuses_ignore_U SCOREP_MPI_FORTRAN_INIT_STATUSES_IGNORE
/** lowercase define for initialization call for fortran MPI_UNWEIGHTED */
#define scorep_mpi_fortran_init_unweighted_L scorep_mpi_fortran_init_unweighted
/** uppercase define for initialization call for fortran MPI_UNWEIGHTED */
#define scorep_mpi_fortran_init_unweighted_U SCOREP_MPI_FORTRAN_INIT_UNWEIGHTED
/** address of fortran variable used as reference for MPI_UNWEIGHTED */

/** initialization function for fortran MPI_BOTTOM 
 * @param bottom address of variable acting as reference for MPI_BOTTOM 
 */
void FSUB(scorep_mpi_fortran_init_bottom)(MPI_Fint* bottom)
{
#if HAVE(MPI_BOTTOM)
  scorep_mpi_fortran_bottom = bottom;
#endif
}

/** initialization function for fortran MPI_IN_PLACE 
 * @param in_place address of variable acting as reference for MPI_IN_PLACE 
 */
void FSUB(scorep_mpi_fortran_init_in_place)(MPI_Fint* in_place)
{
#if HAVE(MPI_IN_PLACE)
  scorep_mpi_fortran_in_place = in_place;
#endif
}

/** initialization function for fortran MPI_STATUS_IGNORE
 * @param status_ignore address of variable acting as reference for MPI_STATUS_IGNORE 
 */
void FSUB(scorep_mpi_fortran_init_status_ignore)(MPI_Fint* status_ignore) 
{
#if HAVE(MPI_STATUS_IGNORE)
  scorep_mpi_fortran_status_ignore = status_ignore;
#endif
}

/** initialization function for fortran MPI_STATUSES_IGNORE
 * @param statuses_ignore address of variable acting as reference for MPI_STATUSES_IGNORE 
 */
void FSUB(scorep_mpi_fortran_init_statuses_ignore)(MPI_Fint* statuses_ignore) 
{
#if HAVE(MPI_STATUSES_IGNORE)
  scorep_mpi_fortran_statuses_ignore = statuses_ignore;
#endif
}

/** initialization function for fortran MPI_UNWEIGHTED
 * @param statuses_ignore address of variable acting as reference for MPI_UNWEIGHTED 
 */
void FSUB(scorep_mpi_fortran_init_unweighted)(MPI_Fint* unweighted) 
{
#if HAVE(MPI_UNWEIGHTED)
  scorep_mpi_fortran_unweighted = unweighted;
#endif
}

/**
 * @}
 * @name Fortran wrappers 
 * @{
 */

#ifndef NEED_F2C_CONV

#pragma wrapgen single MPI_Initialized skel/SCOREP_Fmpi_Std.w

/* If MPI_Comm_f2c is HAVE as a simple macro (which typically does nothing)
 * as it would require a "real" function if it is really needed
 * => we can save the f2c and c2s conversions */

#if HAVE(DECL_PMPI_INIT_THREAD)
/**
 * Measurement wrapper for MPI_Init_tread
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2
 * @ingroup env
 */
void FSUB(MPI_Init_thread)(int* required,
                           int* provided,
                           int* ierr)
{
  *ierr = MPI_Init_thread(0, (char***)0, *required, provided);
}
#endif

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-1
 * @ingroup env
 */
void FSUB(MPI_Init)(int* ierr)
{
  *ierr = MPI_Init(0, (char***)0);
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init) skel/SCOREP_Fmpi_Std.w

#else /* !NEED_F2C_CONV */

#if HAVE(DECL_PMPI_INIT_THREAD)
/**
 * Measurement wrapper for MPI_Init_tread
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2
 * @ingroup env
 */
void FSUB(MPI_Init_thread)(MPI_Fint* required,
                           MPI_Fint* provided,
                           MPI_Fint* ierr)
{
  if (sizeof(MPI_Fint) != sizeof(int))
  {
    UTILS_ERROR(SCOREP_ERROR_F2C_INT_SIZE_MISMATCH,
                "Shouldn't this error abort!" );
  }
  *ierr = MPI_Init_thread(0, (char***)0, *required, provided);
}
#endif

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-1
 * @ingroup env
 */
void FSUB(MPI_Init)(MPI_Fint* ierr)
{
  if (sizeof(MPI_Fint) != sizeof(int))
  {
    UTILS_ERROR(SCOREP_ERROR_F2C_INT_SIZE_MISMATCH,
                "Shouldn't this error abort!" );
  }
  *ierr = MPI_Init(0, (char***)0);
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init) skel/SCOREP_Mpi_F2c_C2f.w

#pragma wrapgen single MPI_Initialized skel/SCOREP_Fmpi_Std.w

#endif

/**
 * @}
 */
