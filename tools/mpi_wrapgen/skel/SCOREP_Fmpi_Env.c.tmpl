/**
 * @file
 * @ingroup    MPI_Wrapper
 *
 * @brief Fortran interface wrappers for environmental management
 */

#include <config.h>
#include "SCOREP_Fmpi.h"

#include <stdlib.h>
#include <UTILS_Error.h>

/* uppercase defines */
#pragma wrapgen multiple restrict(genv) skel/SCOREP_Fmpi_DefineU.w

/* lowercase defines */
#pragma wrapgen multiple restrict(genv) skel/SCOREP_Fmpi_DefineL.w

/**
 * @name Fortran wrappers
 * @{
 */

#ifndef NEED_F2C_CONV

#pragma wrapgen single MPI_Initialized skel/SCOREP_Fmpi_Std.w

/* If MPI_Comm_f2c is HAVE as a simple macro (which typically does nothing)
 * as it would require a "real" function if it is really needed
 * => we can save the f2c and c2s conversions */

#if HAVE(DECL_PMPI_INIT_THREAD)
/**
 * Measurement wrapper for MPI_Init_tread
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2
 * @ingroup env
 */
void FSUB(MPI_Init_thread)(int* required,
                           int* provided,
                           int* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  *ierr = MPI_Init_thread(0, (char***)0, *required, provided);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}
#endif

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-1
 * @ingroup env
 */
void FSUB(MPI_Init)(int* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  *ierr = MPI_Init(0, (char***)0);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init) skel/SCOREP_Fmpi_Std.w

#else /* !NEED_F2C_CONV */

#if HAVE(DECL_PMPI_INIT_THREAD)
/**
 * Measurement wrapper for MPI_Init_tread
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-2
 * @ingroup env
 */
void FSUB(MPI_Init_thread)(MPI_Fint* required,
                           MPI_Fint* provided,
                           MPI_Fint* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  if (sizeof(MPI_Fint) != sizeof(int))
  {
    UTILS_ERROR(SCOREP_ERROR_F2C_INT_SIZE_MISMATCH,
                "Shouldn't this error abort!" );
  }
  *ierr = MPI_Init_thread(0, (char***)0, *required, provided);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}
#endif

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note Fortran interface
 * @note Introduced with MPI-1
 * @ingroup env
 */
void FSUB(MPI_Init)(MPI_Fint* ierr)
{
  SCOREP_IN_MEASUREMENT_INCREMENT();
  if (sizeof(MPI_Fint) != sizeof(int))
  {
    UTILS_ERROR(SCOREP_ERROR_F2C_INT_SIZE_MISMATCH,
                "Shouldn't this error abort!" );
  }
  *ierr = MPI_Init(0, (char***)0);
  SCOREP_IN_MEASUREMENT_DECREMENT();
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init) skel/SCOREP_Mpi_F2c_C2f.w

#pragma wrapgen single MPI_Initialized skel/SCOREP_Fmpi_Std.w

#endif

/**
 * @}
 */
